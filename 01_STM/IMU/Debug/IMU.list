
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  08014068  08014068  00024068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b68  08014b68  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08014b68  08014b68  00024b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b70  08014b70  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b70  08014b70  00024b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b74  08014b74  00024b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08014b78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d408  20000248  08014dc0  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001d650  08014dc0  0003d650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002581e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f2a  00000000  00000000  00055b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ff0  00000000  00000000  0005aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018b3  00000000  00000000  0005ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc8e  00000000  00000000  0005e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b901  00000000  00000000  0008afb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001015c1  00000000  00000000  000b68b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009b74  00000000  00000000  001b7e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001c19e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000851  00000000  00000000  001c1a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001c229d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014050 	.word	0x08014050

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	08014050 	.word	0x08014050

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	4613      	mov	r3, r2
 8000f94:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <bmi160_get_regs+0x24>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000fa8:	23ff      	movs	r3, #255	; 0xff
 8000faa:	75fb      	strb	r3, [r7, #23]
 8000fac:	e017      	b.n	8000fde <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000fae:	89bb      	ldrh	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000fb4:	23f4      	movs	r3, #244	; 0xf4
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e011      	b.n	8000fde <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d103      	bne.n	8000fca <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc8:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69dc      	ldr	r4, [r3, #28]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7858      	ldrb	r0, [r3, #1]
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	7bf9      	ldrb	r1, [r7, #15]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	47a0      	blx	r4
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}

08000fea <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <bmi160_set_regs+0x28>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8001012:	23ff      	movs	r3, #255	; 0xff
 8001014:	75fb      	strb	r3, [r7, #23]
 8001016:	e045      	b.n	80010a4 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800101e:	23f4      	movs	r3, #244	; 0xf4
 8001020:	75fb      	strb	r3, [r7, #23]
 8001022:	e03f      	b.n	80010a4 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d103      	bne.n	8001034 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001032:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	2b11      	cmp	r3, #17
 800103a:	d003      	beq.n	8001044 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001040:	2b15      	cmp	r3, #21
 8001042:	d124      	bne.n	800108e <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1c      	ldr	r4, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7858      	ldrb	r0, [r3, #1]
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	7bf9      	ldrb	r1, [r7, #15]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	47a0      	blx	r4
 8001054:	4603      	mov	r3, r0
 8001056:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	2001      	movs	r0, #1
 800105e:	4798      	blx	r3
 8001060:	e01a      	b.n	8001098 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1c      	ldr	r4, [r3, #32]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7858      	ldrb	r0, [r3, #1]
 800106a:	7dbb      	ldrb	r3, [r7, #22]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	441a      	add	r2, r3
 8001070:	7bf9      	ldrb	r1, [r7, #15]
 8001072:	2301      	movs	r3, #1
 8001074:	47a0      	blx	r4
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2001      	movs	r0, #1
 8001086:	4798      	blx	r3
            for (; count < len; count++)
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	3301      	adds	r3, #1
 800108c:	75bb      	strb	r3, [r7, #22]
 800108e:	7dbb      	ldrb	r3, [r7, #22]
 8001090:	b29b      	uxth	r3, r3
 8001092:	89ba      	ldrh	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8e4      	bhi.n	8001062 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8001098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 80010a0:	23fe      	movs	r3, #254	; 0xfe
 80010a2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fd33 	bl	8001b28 <null_ptr_check>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <bmi160_init+0x38>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80010d6:	f107 010d 	add.w	r1, r7, #13
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	207f      	movs	r0, #127	; 0x7f
 80010e0:	f7ff ff50 	bl	8000f84 <bmi160_get_regs>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d127      	bne.n	8001140 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80010f6:	e007      	b.n	8001108 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ff40 	bl	8000f84 <bmi160_get_regs>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	73ba      	strb	r2, [r7, #14]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <bmi160_init+0x6a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2bd1      	cmp	r3, #209	; 0xd1
 8001118:	d1ee      	bne.n	80010f8 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <bmi160_init+0x8c>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2bd1      	cmp	r3, #209	; 0xd1
 8001128:	d108      	bne.n	800113c <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	22ff      	movs	r2, #255	; 0xff
 800112e:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f80b 	bl	800114c <bmi160_soft_reset>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e001      	b.n	8001140 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 800113c:	23fd      	movs	r3, #253	; 0xfd
 800113e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001154:	23b6      	movs	r3, #182	; 0xb6
 8001156:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <bmi160_soft_reset+0x1a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e024      	b.n	80011b6 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800116c:	f107 010e 	add.w	r1, r7, #14
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	207e      	movs	r0, #126	; 0x7e
 8001176:	f7ff ff38 	bl	8000fea <bmi160_set_regs>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	2001      	movs	r0, #1
 8001184:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <bmi160_soft_reset+0x5c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d108      	bne.n	80011a8 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001196:	f107 010e 	add.w	r1, r7, #14
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	207f      	movs	r0, #127	; 0x7f
 80011a0:	f7ff fef0 	bl	8000f84 <bmi160_get_regs>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fcd9 	bl	8001b68 <default_param_settg>
        }
    }

    return rslt;
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <bmi160_set_sens_conf+0x1a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e01f      	b.n	8001222 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fcea 	bl	8001bbc <set_accel_conf>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80011ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d116      	bne.n	8001222 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fe25 	bl	8001e44 <set_gyro_conf>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f811 	bl	800122e <bmi160_set_power_mode>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fdde 	bl	8001dda <check_invalid_settg>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <bmi160_set_power_mode+0x1a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e00d      	b.n	800126a <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff01 	bl	8002056 <set_accel_pwr>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 ff8f 	bl	8002184 <set_gyro_pwr>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	109b      	asrs	r3, r3, #2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 80012a2:	7d7b      	ldrb	r3, [r7, #21]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 80012aa:	7d3b      	ldrb	r3, [r7, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 80012b0:	2303      	movs	r3, #3
 80012b2:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d03c      	beq.n	8001334 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 80012ba:	7d7b      	ldrb	r3, [r7, #21]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d024      	beq.n	800130a <bmi160_get_sensor_data+0x94>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	dc34      	bgt.n	800132e <bmi160_get_sensor_data+0xb8>
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d002      	beq.n	80012ce <bmi160_get_sensor_data+0x58>
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d00f      	beq.n	80012ec <bmi160_get_sensor_data+0x76>
 80012cc:	e02f      	b.n	800132e <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 80012d8:	e02e      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 ff93 	bl	800220c <get_accel_data>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75fb      	strb	r3, [r7, #23]
                break;
 80012ea:	e025      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 80012f6:	e01f      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f84f 	bl	80023a2 <get_gyro_data>
 8001304:	4603      	mov	r3, r0
 8001306:	75fb      	strb	r3, [r7, #23]
                break;
 8001308:	e016      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <bmi160_get_sensor_data+0xa0>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001316:	23ff      	movs	r3, #255	; 0xff
 8001318:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 800131a:	e00d      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 800131c:	7db8      	ldrb	r0, [r7, #22]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	f001 f987 	bl	8002636 <get_accel_gyro_data>
 8001328:	4603      	mov	r3, r0
 800132a:	75fb      	strb	r3, [r7, #23]
                break;
 800132c:	e004      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800132e:	23fb      	movs	r3, #251	; 0xfb
 8001330:	75fb      	strb	r3, [r7, #23]
                break;
 8001332:	e001      	b.n	8001338 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8001334:	23ff      	movs	r3, #255	; 0xff
 8001336:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2b0d      	cmp	r3, #13
 8001358:	d879      	bhi.n	800144e <bmi160_set_int_config+0x10a>
 800135a:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <bmi160_set_int_config+0x1c>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	08001399 	.word	0x08001399
 8001364:	080013a7 	.word	0x080013a7
 8001368:	080013d1 	.word	0x080013d1
 800136c:	080013c3 	.word	0x080013c3
 8001370:	080013c3 	.word	0x080013c3
 8001374:	080013df 	.word	0x080013df
 8001378:	080013ed 	.word	0x080013ed
 800137c:	08001409 	.word	0x08001409
 8001380:	080013fb 	.word	0x080013fb
 8001384:	080013b5 	.word	0x080013b5
 8001388:	08001417 	.word	0x08001417
 800138c:	08001425 	.word	0x08001425
 8001390:	08001433 	.word	0x08001433
 8001394:	08001441 	.word	0x08001441
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f95a 	bl	8001654 <set_accel_any_motion_int>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
            break;
 80013a4:	e054      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f9ed 	bl	8001788 <set_accel_sig_motion_int>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
            break;
 80013b2:	e04d      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fa14 	bl	80017e4 <set_accel_no_motion_int>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
            break;
 80013c0:	e046      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f973 	bl	80016b0 <set_accel_tap_int>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]
            break;
 80013ce:	e03f      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa34 	bl	8001840 <set_accel_step_detect_int>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
            break;
 80013dc:	e038      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fa6e 	bl	80018c2 <set_accel_orientation_int>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]
            break;
 80013ea:	e031      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 faa8 	bl	8001944 <set_accel_flat_detect_int>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
            break;
 80013f8:	e02a      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fae2 	bl	80019c6 <set_accel_low_g_int>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
            break;
 8001406:	e023      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fb26 	bl	8001a5c <set_accel_high_g_int>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
            break;
 8001414:	e01c      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f982 	bl	8001722 <set_accel_gyro_data_ready_int>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
            break;
 8001422:	e015      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f002 fd54 	bl	8003ed4 <set_fifo_full_int>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]
            break;
 8001430:	e00e      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f002 fdb4 	bl	8003fa2 <set_fifo_watermark_int>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]
            break;
 800143e:	e007      	b.n	8001450 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fb55 	bl	8001af2 <set_intr_pin_config>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
            break;
 800144c:	e000      	b.n	8001450 <bmi160_set_int_config+0x10c>
        default:
            break;
 800144e:	bf00      	nop
    }

    return rslt;
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fb5d 	bl	8001b28 <null_ptr_check>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8001472:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800147a:	23ff      	movs	r3, #255	; 0xff
 800147c:	75fb      	strb	r3, [r7, #23]
 800147e:	e068      	b.n	8001552 <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f002 fe14 	bl	80040b0 <configure_offset_enable>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d15e      	bne.n	8001552 <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001494:	f107 0116 	add.w	r1, r7, #22
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	2069      	movs	r0, #105	; 0x69
 800149e:	f7ff fd71 	bl	8000f84 <bmi160_get_regs>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	f023 030c 	bic.w	r3, r3, #12
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 8001506:	7dbb      	ldrb	r3, [r7, #22]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	b25a      	sxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	b25b      	sxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b25b      	sxtb	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8001524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d112      	bne.n	8001552 <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800152c:	f107 0116 	add.w	r1, r7, #22
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	2069      	movs	r0, #105	; 0x69
 8001536:	f7ff fd58 	bl	8000fea <bmi160_set_regs>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 800153e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f002 fdfb 	bl	8004144 <trigger_foc>
 800154e:	4603      	mov	r3, r0
 8001550:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8001552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b088      	sub	sp, #32
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f000 fadd 	bl	8001b28 <null_ptr_check>
 800156e:	4603      	mov	r3, r0
 8001570:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8001572:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800157a:	23ff      	movs	r3, #255	; 0xff
 800157c:	77fb      	strb	r3, [r7, #31]
 800157e:	e063      	b.n	8001648 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001580:	f107 010c 	add.w	r1, r7, #12
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2207      	movs	r2, #7
 8001588:	2071      	movs	r0, #113	; 0x71
 800158a:	f7ff fcfb 	bl	8000f84 <bmi160_get_regs>
 800158e:	4603      	mov	r3, r0
 8001590:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	b25a      	sxtb	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	b25a      	sxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80015ae:	7cbb      	ldrb	r3, [r7, #18]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80015b6:	7f7b      	ldrb	r3, [r7, #29]
 80015b8:	039b      	lsls	r3, r3, #14
 80015ba:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80015bc:	7fbb      	ldrb	r3, [r7, #30]
 80015be:	019b      	lsls	r3, r3, #6
 80015c0:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80015c2:	8b7a      	ldrh	r2, [r7, #26]
 80015c4:	8b3b      	ldrh	r3, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80015ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da00      	bge.n	80015d4 <bmi160_get_offsets+0x76>
 80015d2:	333f      	adds	r3, #63	; 0x3f
 80015d4:	119b      	asrs	r3, r3, #6
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80015dc:	7c3b      	ldrb	r3, [r7, #16]
 80015de:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80015e0:	7cbb      	ldrb	r3, [r7, #18]
 80015e2:	109b      	asrs	r3, r3, #2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80015ec:	7f7b      	ldrb	r3, [r7, #29]
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80015f2:	7fbb      	ldrb	r3, [r7, #30]
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80015f8:	8b7a      	ldrh	r2, [r7, #26]
 80015fa:	8b3b      	ldrh	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8001600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001604:	2b00      	cmp	r3, #0
 8001606:	da00      	bge.n	800160a <bmi160_get_offsets+0xac>
 8001608:	333f      	adds	r3, #63	; 0x3f
 800160a:	119b      	asrs	r3, r3, #6
 800160c:	b21a      	sxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8001612:	7c7b      	ldrb	r3, [r7, #17]
 8001614:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8001616:	7cbb      	ldrb	r3, [r7, #18]
 8001618:	111b      	asrs	r3, r3, #4
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8001622:	7f7b      	ldrb	r3, [r7, #29]
 8001624:	039b      	lsls	r3, r3, #14
 8001626:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001628:	7fbb      	ldrb	r3, [r7, #30]
 800162a:	019b      	lsls	r3, r3, #6
 800162c:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800162e:	8b7a      	ldrh	r2, [r7, #26]
 8001630:	8b3b      	ldrh	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8001636:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <bmi160_get_offsets+0xe2>
 800163e:	333f      	adds	r3, #63	; 0x3f
 8001640:	119b      	asrs	r3, r3, #6
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001648:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f000 fa62 	bl	8001b28 <null_ptr_check>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <set_accel_any_motion_int+0x22>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e013      	b.n	80016a4 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f001 f915 	bl	80028b4 <enable_accel_any_motion_int>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f001 fb43 	bl	8002d26 <config_any_motion_int_settg>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f000 fa34 	bl	8001b28 <null_ptr_check>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <set_accel_tap_int+0x22>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016d2:	23ff      	movs	r3, #255	; 0xff
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e01e      	b.n	8001716 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3304      	adds	r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 fe7d 	bl	80033e2 <enable_tap_int>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d110      	bne.n	8001716 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f9fb 	bl	8001af2 <set_intr_pin_config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 febb 	bl	8003488 <config_tap_int_settg>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f000 f9fb 	bl	8001b28 <null_ptr_check>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <set_accel_gyro_data_ready_int+0x22>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001744:	23ff      	movs	r3, #255	; 0xff
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e018      	b.n	800177c <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f001 fb24 	bl	8002d98 <enable_data_ready_int>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10f      	bne.n	800177c <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f9c7 	bl	8001af2 <set_intr_pin_config>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 f9d8 	bl	8002b28 <map_hardware_interrupt>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800177c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f000 f9c8 	bl	8001b28 <null_ptr_check>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800179c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <set_accel_sig_motion_int+0x22>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017aa:	23ff      	movs	r3, #255	; 0xff
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e013      	b.n	80017d8 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3304      	adds	r3, #4
 80017b4:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f001 fc43 	bl	8003044 <enable_sig_motion_int>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f001 fc79 	bl	80030c6 <config_sig_motion_int_settg>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80017d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	f000 f99a 	bl	8001b28 <null_ptr_check>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <set_accel_no_motion_int+0x22>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	e013      	b.n	8001834 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3304      	adds	r3, #4
 8001810:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	68b8      	ldr	r0, [r7, #8]
 8001816:	f001 faec 	bl	8002df2 <enable_no_motion_int>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 fb36 	bl	8002e9c <config_no_motion_int_settg>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f000 f96c 	bl	8001b28 <null_ptr_check>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <set_accel_step_detect_int+0x22>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001862:	23ff      	movs	r3, #255	; 0xff
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e026      	b.n	80018b6 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f001 fcfd 	bl	8003270 <enable_step_detect_int>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f934 	bl	8001af2 <set_intr_pin_config>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f001 f8ab 	bl	80029f4 <map_feature_interrupt>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f001 fd18 	bl	80032e2 <config_step_detect>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80018cc:	6838      	ldr	r0, [r7, #0]
 80018ce:	f000 f92b 	bl	8001b28 <null_ptr_check>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <set_accel_orientation_int+0x22>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80018e4:	23ff      	movs	r3, #255	; 0xff
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e026      	b.n	8001938 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80018f0:	6839      	ldr	r1, [r7, #0]
 80018f2:	68b8      	ldr	r0, [r7, #8]
 80018f4:	f001 fecc 	bl	8003690 <enable_orient_int>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d119      	bne.n	8001938 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8f3 	bl	8001af2 <set_intr_pin_config>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10f      	bne.n	8001938 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f001 f86a 	bl	80029f4 <map_feature_interrupt>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f001 fee7 	bl	8003702 <config_orient_int_settg>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800194e:	6838      	ldr	r0, [r7, #0]
 8001950:	f000 f8ea 	bl	8001b28 <null_ptr_check>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <set_accel_flat_detect_int+0x22>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001966:	23ff      	movs	r3, #255	; 0xff
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e026      	b.n	80019ba <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f001 ff53 	bl	8003820 <enable_flat_int>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d119      	bne.n	80019ba <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8b2 	bl	8001af2 <set_intr_pin_config>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f001 f829 	bl	80029f4 <map_feature_interrupt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	68b8      	ldr	r0, [r7, #8]
 80019b2:	f001 ff6b 	bl	800388c <config_flat_int_settg>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f000 f8a9 	bl	8001b28 <null_ptr_check>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <set_accel_low_g_int+0x22>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80019e8:	23ff      	movs	r3, #255	; 0xff
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e030      	b.n	8001a50 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f001 ffa4 	bl	8003944 <enable_low_g_int>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d123      	bne.n	8001a50 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f871 	bl	8001af2 <set_intr_pin_config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d119      	bne.n	8001a50 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 ffe8 	bl	80029f4 <map_feature_interrupt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f001 ffbf 	bl	80039b6 <config_low_g_data_src>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f001 ffec 	bl	8003a24 <config_low_g_int_settg>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f000 f85e 	bl	8001b28 <null_ptr_check>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <set_accel_high_g_int+0x22>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001a7e:	23ff      	movs	r3, #255	; 0xff
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e030      	b.n	8001ae6 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	68b8      	ldr	r0, [r7, #8]
 8001a8e:	f002 f821 	bl	8003ad4 <enable_high_g_int>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d123      	bne.n	8001ae6 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f826 	bl	8001af2 <set_intr_pin_config>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 ff9d 	bl	80029f4 <map_feature_interrupt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f002 f85e 	bl	8003b8a <config_high_g_data_src>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f002 f88b 	bl	8003bf8 <config_high_g_int_settg>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f002 f8c0 	bl	8003c84 <config_int_out_ctrl>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f002 f97b 	bl	8003e0e <config_int_latch>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <null_ptr_check+0x26>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <null_ptr_check+0x26>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <null_ptr_check+0x26>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001b4e:	23ff      	movs	r3, #255	; 0xff
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2208      	movs	r2, #8
 8001b92:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2214      	movs	r2, #20
 8001b98:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6852      	ldr	r2, [r2, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68d2      	ldr	r2, [r2, #12]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f833 	bl	8001c3a <check_accel_config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d126      	bne.n	8001c2e <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8001be0:	f107 010c 	add.w	r1, r7, #12
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	2040      	movs	r0, #64	; 0x40
 8001bea:	f7ff f9fe 	bl	8000fea <bmi160_set_regs>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	795a      	ldrb	r2, [r3, #5]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	79da      	ldrb	r2, [r3, #7]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	2041      	movs	r0, #65	; 0x41
 8001c16:	f7ff f9e8 	bl	8000fea <bmi160_set_regs>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	799a      	ldrb	r2, [r3, #6]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	2040      	movs	r0, #64	; 0x40
 8001c4c:	f7ff f99a 	bl	8000f84 <bmi160_get_regs>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11b      	bne.n	8001c94 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f81e 	bl	8001ca0 <process_accel_odr>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f848 	bl	8001d08 <process_accel_bw>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3301      	adds	r3, #1
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f871 	bl	8001d72 <process_accel_range>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d81a      	bhi.n	8001cf4 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	795a      	ldrb	r2, [r3, #5]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	7a5b      	ldrb	r3, [r3, #9]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d016      	beq.n	8001cf8 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f023 030f 	bic.w	r3, r3, #15
 8001cd8:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001cda:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b25a      	sxtb	r2, r3
 8001ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e001      	b.n	8001cf8 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001cf4:	23fc      	movs	r3, #252	; 0xfc
 8001cf6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	79db      	ldrb	r3, [r3, #7]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	d81b      	bhi.n	8001d5e <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	79da      	ldrb	r2, [r3, #7]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7adb      	ldrb	r3, [r3, #11]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d017      	beq.n	8001d62 <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	79db      	ldrb	r3, [r3, #7]
 8001d36:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d40:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e001      	b.n	8001d62 <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d5e:	23fc      	movs	r3, #252	; 0xfc
 8001d60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	799b      	ldrb	r3, [r3, #6]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d81a      	bhi.n	8001dc6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	799a      	ldrb	r2, [r3, #6]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7a9b      	ldrb	r3, [r3, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d016      	beq.n	8001dca <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	799b      	ldrb	r3, [r3, #6]
 8001da0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001dac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e001      	b.n	8001dca <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dc6:	23fc      	movs	r3, #252	; 0xfc
 8001dc8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001de6:	f107 010e 	add.w	r1, r7, #14
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	2002      	movs	r0, #2
 8001df0:	f7ff f8c8 	bl	8000f84 <bmi160_get_regs>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d102      	bne.n	8001e16 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001e10:	23fa      	movs	r3, #250	; 0xfa
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e010      	b.n	8001e38 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d102      	bne.n	8001e22 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001e1c:	23f9      	movs	r3, #249	; 0xf9
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e00a      	b.n	8001e38 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d102      	bne.n	8001e2e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001e28:	23f8      	movs	r3, #248	; 0xf8
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e004      	b.n	8001e38 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001e2e:	7bbb      	ldrb	r3, [r7, #14]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d101      	bne.n	8001e38 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001e34:	23f7      	movs	r3, #247	; 0xf7
 8001e36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f833 	bl	8001ec2 <check_gyro_config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d126      	bne.n	8001eb6 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001e68:	f107 010c 	add.w	r1, r7, #12
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2042      	movs	r0, #66	; 0x42
 8001e72:	f7ff f8ba 	bl	8000fea <bmi160_set_regs>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d119      	bne.n	8001eb6 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7b5a      	ldrb	r2, [r3, #13]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7bda      	ldrb	r2, [r3, #15]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2043      	movs	r0, #67	; 0x43
 8001e9e:	f7ff f8a4 	bl	8000fea <bmi160_set_regs>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7b9a      	ldrb	r2, [r3, #14]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	2042      	movs	r0, #66	; 0x42
 8001ed4:	f7ff f856 	bl	8000f84 <bmi160_get_regs>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11b      	bne.n	8001f1c <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f81e 	bl	8001f28 <process_gyro_odr>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f848 	bl	8001f90 <process_gyro_bw>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f86b 	bl	8001fee <process_gyro_range>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7b5b      	ldrb	r3, [r3, #13]
 8001f42:	2b0d      	cmp	r3, #13
 8001f44:	d81a      	bhi.n	8001f7c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7b5a      	ldrb	r2, [r3, #13]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	7c5b      	ldrb	r3, [r3, #17]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d016      	beq.n	8001f80 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7b5b      	ldrb	r3, [r3, #13]
 8001f56:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f023 030f 	bic.w	r3, r3, #15
 8001f60:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001f62:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b25a      	sxtb	r2, r3
 8001f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e001      	b.n	8001f80 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001f7c:	23fc      	movs	r3, #252	; 0xfc
 8001f7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7bdb      	ldrb	r3, [r3, #15]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d815      	bhi.n	8001fda <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7bdb      	ldrb	r3, [r3, #15]
 8001fb2:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fbc:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001fbe:	7b7b      	ldrb	r3, [r7, #13]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001fc8:	b25a      	sxtb	r2, r3
 8001fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e001      	b.n	8001fde <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001fda:	23fc      	movs	r3, #252	; 0xfc
 8001fdc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	7b9b      	ldrb	r3, [r3, #14]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d81a      	bhi.n	8002042 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7b9a      	ldrb	r2, [r3, #14]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	7c9b      	ldrb	r3, [r3, #18]
 8002014:	429a      	cmp	r2, r3
 8002016:	d016      	beq.n	8002046 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	7b9b      	ldrb	r3, [r3, #14]
 800201c:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8002028:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	b25a      	sxtb	r2, r3
 8002032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002036:	4313      	orrs	r3, r2
 8002038:	b25b      	sxtb	r3, r3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e001      	b.n	8002046 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8002042:	23fc      	movs	r3, #252	; 0xfc
 8002044:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	d92b      	bls.n	80020c6 <set_accel_pwr+0x70>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	2b12      	cmp	r3, #18
 8002074:	d827      	bhi.n	80020c6 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	791a      	ldrb	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7a1b      	ldrb	r3, [r3, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d024      	beq.n	80020cc <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8002082:	f107 030e 	add.w	r3, r7, #14
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f826 	bl	80020da <process_under_sampling>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	1d19      	adds	r1, r3, #4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	207e      	movs	r0, #126	; 0x7e
 80020a4:	f7fe ffa1 	bl	8000fea <bmi160_set_regs>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7a1b      	ldrb	r3, [r3, #8]
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d103      	bne.n	80020bc <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2005      	movs	r0, #5
 80020ba:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	791a      	ldrb	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80020c4:	e002      	b.n	80020cc <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80020c6:	23f3      	movs	r3, #243	; 0xf3
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e000      	b.n	80020ce <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80020cc:	bf00      	nop
    }

    return rslt;
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80020e8:	2300      	movs	r3, #0
 80020ea:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	2040      	movs	r0, #64	; 0x40
 80020f4:	f7fe ff46 	bl	8000f84 <bmi160_get_regs>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80020fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d139      	bne.n	8002178 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	791b      	ldrb	r3, [r3, #4]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d120      	bne.n	800214e <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002114:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800211c:	b2da      	uxtb	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	2040      	movs	r0, #64	; 0x40
 800212a:	f7fe ff5e 	bl	8000fea <bmi160_set_regs>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11e      	bne.n	8002178 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800213a:	f107 010c 	add.w	r1, r7, #12
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	2058      	movs	r0, #88	; 0x58
 8002144:	f7fe ff51 	bl	8000fea <bmi160_set_regs>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e014      	b.n	8002178 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0f      	bge.n	8002178 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002160:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7bba      	ldrb	r2, [r7, #14]
 8002166:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	2040      	movs	r0, #64	; 0x40
 8002170:	f7fe ff3b 	bl	8000fea <bmi160_set_regs>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7b1b      	ldrb	r3, [r3, #12]
 8002194:	2b14      	cmp	r3, #20
 8002196:	d007      	beq.n	80021a8 <set_gyro_pwr+0x24>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7b1b      	ldrb	r3, [r3, #12]
 800219c:	2b15      	cmp	r3, #21
 800219e:	d003      	beq.n	80021a8 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80021a4:	2b17      	cmp	r3, #23
 80021a6:	d129      	bne.n	80021fc <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7b1a      	ldrb	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7c1b      	ldrb	r3, [r3, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d025      	beq.n	8002200 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 010c 	add.w	r1, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	207e      	movs	r0, #126	; 0x7e
 80021c0:	f7fe ff13 	bl	8000fea <bmi160_set_regs>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7c1b      	ldrb	r3, [r3, #16]
 80021cc:	2b14      	cmp	r3, #20
 80021ce:	d104      	bne.n	80021da <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2050      	movs	r0, #80	; 0x50
 80021d6:	4798      	blx	r3
 80021d8:	e00b      	b.n	80021f2 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7c1b      	ldrb	r3, [r3, #16]
 80021de:	2b17      	cmp	r3, #23
 80021e0:	d107      	bne.n	80021f2 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80021e6:	2b15      	cmp	r3, #21
 80021e8:	d103      	bne.n	80021f2 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	200a      	movs	r0, #10
 80021f0:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7b1a      	ldrb	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80021fa:	e001      	b.n	8002200 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80021fc:	23f3      	movs	r3, #243	; 0xf3
 80021fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	b29b      	uxth	r3, r3
 8002240:	3306      	adds	r3, #6
 8002242:	b29a      	uxth	r2, r3
 8002244:	f107 0114 	add.w	r1, r7, #20
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2012      	movs	r0, #18
 800224c:	f7fe fe9a 	bl	8000f84 <bmi160_get_regs>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8002256:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8098 	bne.w	8002390 <get_accel_data+0x184>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8002260:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800226a:	3330      	adds	r3, #48	; 0x30
 800226c:	443b      	add	r3, r7
 800226e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002276:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002280:	3330      	adds	r3, #48	; 0x30
 8002282:	443b      	add	r3, r7
 8002284:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800228c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	8c3a      	ldrh	r2, [r7, #32]
 80022a2:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80022a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022ae:	3330      	adds	r3, #48	; 0x30
 80022b0:	443b      	add	r3, r7
 80022b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80022ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022c4:	3330      	adds	r3, #48	; 0x30
 80022c6:	443b      	add	r3, r7
 80022c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022dc:	b21b      	sxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	8c3a      	ldrh	r2, [r7, #32]
 80022e6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80022e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022f2:	3330      	adds	r3, #48	; 0x30
 80022f4:	443b      	add	r3, r7
 80022f6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80022fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002308:	3330      	adds	r3, #48	; 0x30
 800230a:	443b      	add	r3, r7
 800230c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	8c3a      	ldrh	r2, [r7, #32]
 800232a:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d12a      	bne.n	8002388 <get_accel_data+0x17c>
        {
            time_0 = data_array[idx++];
 8002332:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800233c:	3330      	adds	r3, #48	; 0x30
 800233e:	443b      	add	r3, r7
 8002340:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002344:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002348:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002352:	3330      	adds	r3, #48	; 0x30
 8002354:	443b      	add	r3, r7
 8002356:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800235a:	b29b      	uxth	r3, r3
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8002360:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800236a:	3330      	adds	r3, #48	; 0x30
 800236c:	443b      	add	r3, r7
 800236e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002376:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	431a      	orrs	r2, r3
 800237c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002380:	431a      	orrs	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	e006      	b.n	8002396 <get_accel_data+0x18a>
        }
        else
        {
            accel->sensortime = 0;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e002      	b.n	8002396 <get_accel_data+0x18a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8002390:	23fe      	movs	r3, #254	; 0xfe
 8002392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8002396:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800239a:	4618      	mov	r0, r3
 800239c:	3730      	adds	r7, #48	; 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b08c      	sub	sp, #48	; 0x30
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d17b      	bne.n	80024d4 <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80023dc:	f107 0110 	add.w	r1, r7, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2206      	movs	r2, #6
 80023e4:	200c      	movs	r0, #12
 80023e6:	f7fe fdcd 	bl	8000f84 <bmi160_get_regs>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 80023f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d169      	bne.n	80024cc <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80023f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002402:	3330      	adds	r3, #48	; 0x30
 8002404:	443b      	add	r3, r7
 8002406:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800240a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 800240e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002418:	3330      	adds	r3, #48	; 0x30
 800241a:	443b      	add	r3, r7
 800241c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002424:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002430:	b21b      	sxth	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	8c3a      	ldrh	r2, [r7, #32]
 800243a:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800243c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002446:	3330      	adds	r3, #48	; 0x30
 8002448:	443b      	add	r3, r7
 800244a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800244e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002452:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800245c:	3330      	adds	r3, #48	; 0x30
 800245e:	443b      	add	r3, r7
 8002460:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	8c3a      	ldrh	r2, [r7, #32]
 800247e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002480:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800248a:	3330      	adds	r3, #48	; 0x30
 800248c:	443b      	add	r3, r7
 800248e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002496:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80024a0:	3330      	adds	r3, #48	; 0x30
 80024a2:	443b      	add	r3, r7
 80024a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80024ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	8c3a      	ldrh	r2, [r7, #32]
 80024c2:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	e0ae      	b.n	800262a <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80024cc:	23fe      	movs	r3, #254	; 0xfe
 80024ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024d2:	e0aa      	b.n	800262a <get_gyro_data+0x288>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	330c      	adds	r3, #12
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f107 0110 	add.w	r1, r7, #16
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	200c      	movs	r0, #12
 80024e4:	f7fe fd4e 	bl	8000f84 <bmi160_get_regs>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 80024ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8096 	bne.w	8002624 <get_gyro_data+0x282>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80024f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002502:	3330      	adds	r3, #48	; 0x30
 8002504:	443b      	add	r3, r7
 8002506:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800250a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 800250e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002518:	3330      	adds	r3, #48	; 0x30
 800251a:	443b      	add	r3, r7
 800251c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002524:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	b21a      	sxth	r2, r3
 800252c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002530:	b21b      	sxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	8c3a      	ldrh	r2, [r7, #32]
 800253a:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800253c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002546:	3330      	adds	r3, #48	; 0x30
 8002548:	443b      	add	r3, r7
 800254a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800254e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800255c:	3330      	adds	r3, #48	; 0x30
 800255e:	443b      	add	r3, r7
 8002560:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002568:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21a      	sxth	r2, r3
 8002570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002574:	b21b      	sxth	r3, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	8c3a      	ldrh	r2, [r7, #32]
 800257e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002580:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800258a:	3330      	adds	r3, #48	; 0x30
 800258c:	443b      	add	r3, r7
 800258e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002596:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80025a0:	3330      	adds	r3, #48	; 0x30
 80025a2:	443b      	add	r3, r7
 80025a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80025ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b21a      	sxth	r2, r3
 80025b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	8c3a      	ldrh	r2, [r7, #32]
 80025c2:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80025c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025c8:	3306      	adds	r3, #6
 80025ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 80025ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80025d8:	3330      	adds	r3, #48	; 0x30
 80025da:	443b      	add	r3, r7
 80025dc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80025e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80025ee:	3330      	adds	r3, #48	; 0x30
 80025f0:	443b      	add	r3, r7
 80025f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80025fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002606:	3330      	adds	r3, #48	; 0x30
 8002608:	443b      	add	r3, r7
 800260a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002612:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	431a      	orrs	r2, r3
 8002618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261c:	431a      	orrs	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	e002      	b.n	800262a <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002624:	23fe      	movs	r3, #254	; 0xfe
 8002626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 800262a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800262e:	4618      	mov	r0, r3
 8002630:	3730      	adds	r7, #48	; 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08c      	sub	sp, #48	; 0x30
 800263a:	af00      	add	r7, sp, #0
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4603      	mov	r3, r0
 8002644:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b29b      	uxth	r3, r3
 8002670:	330c      	adds	r3, #12
 8002672:	b29a      	uxth	r2, r3
 8002674:	f107 0110 	add.w	r1, r7, #16
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	200c      	movs	r0, #12
 800267c:	f7fe fc82 	bl	8000f84 <bmi160_get_regs>
 8002680:	4603      	mov	r3, r0
 8002682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8002686:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8109 	bne.w	80028a2 <get_accel_gyro_data+0x26c>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8002690:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800269a:	3330      	adds	r3, #48	; 0x30
 800269c:	443b      	add	r3, r7
 800269e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80026a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80026b0:	3330      	adds	r3, #48	; 0x30
 80026b2:	443b      	add	r3, r7
 80026b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80026bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8c3a      	ldrh	r2, [r7, #32]
 80026d2:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80026d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80026de:	3330      	adds	r3, #48	; 0x30
 80026e0:	443b      	add	r3, r7
 80026e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80026ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80026f4:	3330      	adds	r3, #48	; 0x30
 80026f6:	443b      	add	r3, r7
 80026f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	b21a      	sxth	r2, r3
 8002708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800270c:	b21b      	sxth	r3, r3
 800270e:	4313      	orrs	r3, r2
 8002710:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8c3a      	ldrh	r2, [r7, #32]
 8002716:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8002718:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002722:	3330      	adds	r3, #48	; 0x30
 8002724:	443b      	add	r3, r7
 8002726:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800272e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002738:	3330      	adds	r3, #48	; 0x30
 800273a:	443b      	add	r3, r7
 800273c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	b21a      	sxth	r2, r3
 800274c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002750:	b21b      	sxth	r3, r3
 8002752:	4313      	orrs	r3, r2
 8002754:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8c3a      	ldrh	r2, [r7, #32]
 800275a:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800275c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002766:	3330      	adds	r3, #48	; 0x30
 8002768:	443b      	add	r3, r7
 800276a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800276e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800277c:	3330      	adds	r3, #48	; 0x30
 800277e:	443b      	add	r3, r7
 8002780:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002788:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002794:	b21b      	sxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	8c3a      	ldrh	r2, [r7, #32]
 800279e:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80027a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80027aa:	3330      	adds	r3, #48	; 0x30
 80027ac:	443b      	add	r3, r7
 80027ae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80027b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80027c0:	3330      	adds	r3, #48	; 0x30
 80027c2:	443b      	add	r3, r7
 80027c4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80027cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	8c3a      	ldrh	r2, [r7, #32]
 80027e2:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80027e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80027ee:	3330      	adds	r3, #48	; 0x30
 80027f0:	443b      	add	r3, r7
 80027f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80027fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002804:	3330      	adds	r3, #48	; 0x30
 8002806:	443b      	add	r3, r7
 8002808:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800280c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002810:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b21a      	sxth	r2, r3
 8002818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	8c3a      	ldrh	r2, [r7, #32]
 8002826:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d132      	bne.n	8002894 <get_accel_gyro_data+0x25e>
        {
            time_0 = data_array[idx++];
 800282e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	443b      	add	r3, r7
 800283c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002840:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002844:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	443b      	add	r3, r7
 8002852:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002856:	b29b      	uxth	r3, r3
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800285c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002866:	3330      	adds	r3, #48	; 0x30
 8002868:	443b      	add	r3, r7
 800286a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002872:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	431a      	orrs	r2, r3
 8002878:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800287c:	431a      	orrs	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002882:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	431a      	orrs	r2, r3
 8002888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	e009      	b.n	80028a8 <get_accel_gyro_data+0x272>
        }
        else
        {
            accel->sensortime = 0;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e002      	b.n	80028a8 <get_accel_gyro_data+0x272>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80028a2:	23fe      	movs	r3, #254	; 0xfe
 80028a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 80028a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80028c6:	f107 010d 	add.w	r1, r7, #13
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	2050      	movs	r0, #80	; 0x50
 80028d0:	f7fe fb58 	bl	8000f84 <bmi160_get_regs>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d151      	bne.n	8002984 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d039      	beq.n	8002962 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 80028ee:	7b7b      	ldrb	r3, [r7, #13]
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	4313      	orrs	r3, r2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800290a:	7b7b      	ldrb	r3, [r7, #13]
 800290c:	f023 0302 	bic.w	r3, r3, #2
 8002910:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	b25b      	sxtb	r3, r3
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	b25a      	sxtb	r2, r3
 8002926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800292a:	4313      	orrs	r3, r2
 800292c:	b25b      	sxtb	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	b25b      	sxtb	r3, r3
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	b25a      	sxtb	r2, r3
 800294e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002952:	4313      	orrs	r3, r2
 8002954:	b25b      	sxtb	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	70da      	strb	r2, [r3, #3]
 8002960:	e007      	b.n	8002972 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8002962:	7b7b      	ldrb	r3, [r7, #13]
 8002964:	f023 0307 	bic.w	r3, r3, #7
 8002968:	b2db      	uxtb	r3, r3
 800296a:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002972:	f107 010d 	add.w	r1, r7, #13
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	2050      	movs	r0, #80	; 0x50
 800297c:	f7fe fb35 	bl	8000fea <bmi160_set_regs>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a0:	f107 010d 	add.w	r1, r7, #13
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	2062      	movs	r0, #98	; 0x62
 80029aa:	f7fe faeb 	bl	8000f84 <bmi160_get_regs>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d115      	bne.n	80029e6 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 80029ba:	7b7b      	ldrb	r3, [r7, #13]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	73bb      	strb	r3, [r7, #14]
        if (temp)
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	73bb      	strb	r3, [r7, #14]
            data = temp;
 80029d0:	7bbb      	ldrb	r3, [r7, #14]
 80029d2:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029d4:	f107 010d 	add.w	r1, r7, #13
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	2062      	movs	r0, #98	; 0x62
 80029de:	f7fe fb04 	bl	8000fea <bmi160_set_regs>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 80029fe:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <map_feature_interrupt+0x12c>)
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	4611      	mov	r1, r2
 8002a08:	8019      	strh	r1, [r3, #0]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	0c12      	lsrs	r2, r2, #16
 8002a0e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002a10:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <map_feature_interrupt+0x12c>)
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	8019      	strh	r1, [r3, #0]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	0c12      	lsrs	r2, r2, #16
 8002a20:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002a22:	f107 010c 	add.w	r1, r7, #12
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	2055      	movs	r0, #85	; 0x55
 8002a2c:	f7fe faaa 	bl	8000f84 <bmi160_get_regs>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d16a      	bne.n	8002b12 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8002a3c:	7b3b      	ldrb	r3, [r7, #12]
 8002a3e:	b25a      	sxtb	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	4619      	mov	r1, r3
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <map_feature_interrupt+0x130>)
 8002a48:	5c5b      	ldrb	r3, [r3, r1]
 8002a4a:	b25b      	sxtb	r3, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	4013      	ands	r3, r2
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	b25a      	sxtb	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <map_feature_interrupt+0x130>)
 8002a64:	5c5b      	ldrb	r3, [r3, r1]
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d83b      	bhi.n	8002af4 <map_feature_interrupt+0x100>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <map_feature_interrupt+0x90>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002a9f 	.word	0x08002a9f
 8002a8c:	08002ab7 	.word	0x08002ab7
 8002a90:	08002acf 	.word	0x08002acf
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8002a94:	7a3b      	ldrb	r3, [r7, #8]
 8002a96:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002a98:	7abb      	ldrb	r3, [r7, #10]
 8002a9a:	73bb      	strb	r3, [r7, #14]
                break;
 8002a9c:	e02c      	b.n	8002af8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8002a9e:	7a3a      	ldrb	r2, [r7, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <map_feature_interrupt+0x130>)
 8002aa8:	5c5b      	ldrb	r3, [r3, r1]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002ab0:	7abb      	ldrb	r3, [r7, #10]
 8002ab2:	73bb      	strb	r3, [r7, #14]
                break;
 8002ab4:	e020      	b.n	8002af8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002ab6:	7aba      	ldrb	r2, [r7, #10]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	4619      	mov	r1, r3
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <map_feature_interrupt+0x130>)
 8002ac0:	5c5b      	ldrb	r3, [r3, r1]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002ac8:	7a3b      	ldrb	r3, [r7, #8]
 8002aca:	733b      	strb	r3, [r7, #12]
                break;
 8002acc:	e014      	b.n	8002af8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8002ace:	7a3a      	ldrb	r2, [r7, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <map_feature_interrupt+0x130>)
 8002ad8:	5c5b      	ldrb	r3, [r3, r1]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002ae0:	7aba      	ldrb	r2, [r7, #10]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <map_feature_interrupt+0x130>)
 8002aea:	5c5b      	ldrb	r3, [r3, r1]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	73bb      	strb	r3, [r7, #14]
                break;
 8002af2:	e001      	b.n	8002af8 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002af4:	23fc      	movs	r3, #252	; 0xfc
 8002af6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002b00:	f107 010c 	add.w	r1, r7, #12
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2203      	movs	r2, #3
 8002b08:	2055      	movs	r0, #85	; 0x55
 8002b0a:	f7fe fa6e 	bl	8000fea <bmi160_set_regs>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	08014068 	.word	0x08014068
 8002b24:	08014144 	.word	0x08014144

08002b28 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002b3a:	f107 010d 	add.w	r1, r7, #13
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	2056      	movs	r0, #86	; 0x56
 8002b44:	f7fe fa1e 	bl	8000f84 <bmi160_get_regs>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d168      	bne.n	8002c26 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	7b7b      	ldrb	r3, [r7, #13]
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d839      	bhi.n	8002c08 <map_hardware_interrupt+0xe0>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <map_hardware_interrupt+0x74>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb3 	.word	0x08002bb3
 8002ba4:	08002bcb 	.word	0x08002bcb
 8002ba8:	08002bdf 	.word	0x08002bdf
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8002bac:	7bbb      	ldrb	r3, [r7, #14]
 8002bae:	737b      	strb	r3, [r7, #13]
                break;
 8002bb0:	e02c      	b.n	8002c0c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	737b      	strb	r3, [r7, #13]
                break;
 8002bc8:	e020      	b.n	8002c0c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002bd2:	5c9a      	ldrb	r2, [r3, r2]
 8002bd4:	7bbb      	ldrb	r3, [r7, #14]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	737b      	strb	r3, [r7, #13]
                break;
 8002bdc:	e016      	b.n	8002c0c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002be6:	5c9a      	ldrb	r2, [r3, r2]
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <map_hardware_interrupt+0x10c>)
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	7b7b      	ldrb	r3, [r7, #13]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	737b      	strb	r3, [r7, #13]
                break;
 8002c06:	e001      	b.n	8002c0c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002c08:	23fc      	movs	r3, #252	; 0xfc
 8002c0a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002c14:	f107 010d 	add.w	r1, r7, #13
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2056      	movs	r0, #86	; 0x56
 8002c1e:	f7fe f9e4 	bl	8000fea <bmi160_set_regs>
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08014144 	.word	0x08014144

08002c38 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002c4a:	f107 010d 	add.w	r1, r7, #13
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	2059      	movs	r0, #89	; 0x59
 8002c54:	f7fe f996 	bl	8000f84 <bmi160_get_regs>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002c64:	7b7b      	ldrb	r3, [r7, #13]
 8002c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	01db      	lsls	r3, r3, #7
 8002c78:	b25a      	sxtb	r2, r3
 8002c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002c86:	f107 010d 	add.w	r1, r7, #13
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2059      	movs	r0, #89	; 0x59
 8002c90:	f7fe f9ab 	bl	8000fea <bmi160_set_regs>
 8002c94:	4603      	mov	r3, r0
 8002c96:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8002cba:	f107 010c 	add.w	r1, r7, #12
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	205f      	movs	r0, #95	; 0x5f
 8002cc4:	f7fe f95e 	bl	8000f84 <bmi160_get_regs>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d122      	bne.n	8002d1a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002ce0:	7b3b      	ldrb	r3, [r7, #12]
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002ce8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002d08:	f107 0108 	add.w	r1, r7, #8
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	205f      	movs	r0, #95	; 0x5f
 8002d12:	f7fe f96a 	bl	8000fea <bmi160_set_regs>
 8002d16:	4603      	mov	r3, r0
 8002d18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7fe fedc 	bl	8001af2 <set_intr_pin_config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d122      	bne.n	8002d8c <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fe22 	bl	8002990 <disable_sig_motion_int>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d119      	bne.n	8002d8c <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fe4a 	bl	80029f4 <map_feature_interrupt>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002d64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f7ff ff62 	bl	8002c38 <config_any_motion_src>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8002d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68b8      	ldr	r0, [r7, #8]
 8002d84:	f7ff ff8e 	bl	8002ca4 <config_any_dur_threshold>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8002d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002da8:	f107 010d 	add.w	r1, r7, #13
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2051      	movs	r0, #81	; 0x51
 8002db2:	f7fe f8e7 	bl	8000f84 <bmi160_get_regs>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d111      	bne.n	8002de6 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002dc2:	7b7b      	ldrb	r3, [r7, #13]
 8002dc4:	f023 0310 	bic.w	r3, r3, #16
 8002dc8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002dd4:	f107 010d 	add.w	r1, r7, #13
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2051      	movs	r0, #81	; 0x51
 8002dde:	f7fe f904 	bl	8000fea <bmi160_set_regs>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002e04:	f107 010d 	add.w	r1, r7, #13
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2052      	movs	r0, #82	; 0x52
 8002e0e:	f7fe f8b9 	bl	8000f84 <bmi160_get_regs>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d138      	bne.n	8002e90 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8002e2c:	7b7b      	ldrb	r3, [r7, #13]
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002e34:	7bbb      	ldrb	r3, [r7, #14]
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8002e4c:	7b7b      	ldrb	r3, [r7, #13]
 8002e4e:	f023 0302 	bic.w	r3, r3, #2
 8002e52:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8002e6c:	7b7b      	ldrb	r3, [r7, #13]
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002e7e:	f107 010d 	add.w	r1, r7, #13
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	2052      	movs	r0, #82	; 0x52
 8002e88:	f7fe f8af 	bl	8000fea <bmi160_set_regs>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7fe fe21 	bl	8001af2 <set_intr_pin_config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d119      	bne.n	8002ef0 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fd98 	bl	80029f4 <map_feature_interrupt>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f000 f812 	bl	8002efc <config_no_motion_data_src>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	68b8      	ldr	r0, [r7, #8]
 8002ee8:	f000 f83e 	bl	8002f68 <config_no_motion_dur_thr>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002f0e:	f107 010d 	add.w	r1, r7, #13
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	2059      	movs	r0, #89	; 0x59
 8002f18:	f7fe f834 	bl	8000f84 <bmi160_get_regs>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d119      	bne.n	8002f5c <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002f28:	7b7b      	ldrb	r3, [r7, #13]
 8002f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f2e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	01db      	lsls	r3, r3, #7
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002f4a:	f107 010d 	add.w	r1, r7, #13
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	2059      	movs	r0, #89	; 0x59
 8002f54:	f7fe f849 	bl	8000fea <bmi160_set_regs>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8002f7e:	2300      	movs	r3, #0
 8002f80:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8002f82:	235f      	movs	r3, #95	; 0x5f
 8002f84:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002f86:	f107 010b 	add.w	r1, r7, #11
 8002f8a:	7b38      	ldrb	r0, [r7, #12]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f7fd fff8 	bl	8000f84 <bmi160_get_regs>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d14b      	bne.n	8003038 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002fc2:	f107 010b 	add.w	r1, r7, #11
 8002fc6:	7b38      	ldrb	r0, [r7, #12]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f7fe f80d 	bl	8000fea <bmi160_set_regs>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d12d      	bne.n	8003038 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8002fdc:	2362      	movs	r3, #98	; 0x62
 8002fde:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002fe0:	f107 010b 	add.w	r1, r7, #11
 8002fe4:	7b38      	ldrb	r0, [r7, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f7fd ffcb 	bl	8000f84 <bmi160_get_regs>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11e      	bne.n	8003038 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 800300e:	7bba      	ldrb	r2, [r7, #14]
 8003010:	7b7b      	ldrb	r3, [r7, #13]
 8003012:	4313      	orrs	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	789b      	ldrb	r3, [r3, #2]
 8003020:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8003022:	2361      	movs	r3, #97	; 0x61
 8003024:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8003026:	f107 0108 	add.w	r1, r7, #8
 800302a:	7b38      	ldrb	r0, [r7, #12]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2202      	movs	r2, #2
 8003030:	f7fd ffdb 	bl	8000fea <bmi160_set_regs>
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003056:	f107 010d 	add.w	r1, r7, #13
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	2050      	movs	r0, #80	; 0x50
 8003060:	f7fd ff90 	bl	8000f84 <bmi160_get_regs>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d124      	bne.n	80030ba <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 800307e:	7b7b      	ldrb	r3, [r7, #13]
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8003086:	7bbb      	ldrb	r3, [r7, #14]
 8003088:	f043 0307 	orr.w	r3, r3, #7
 800308c:	b2db      	uxtb	r3, r3
 800308e:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	70da      	strb	r2, [r3, #3]
 8003096:	e007      	b.n	80030a8 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8003098:	7b7b      	ldrb	r3, [r7, #13]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80030a8:	f107 010d 	add.w	r1, r7, #13
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	2050      	movs	r0, #80	; 0x50
 80030b2:	f7fd ff9a 	bl	8000fea <bmi160_set_regs>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7fe fd0c 	bl	8001af2 <set_intr_pin_config>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80030de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fc83 	bl	80029f4 <map_feature_interrupt>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80030f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	68b8      	ldr	r0, [r7, #8]
 80030fe:	f000 f812 	bl	8003126 <config_sig_motion_data_src>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8003106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	68b8      	ldr	r0, [r7, #8]
 8003112:	f000 f83e 	bl	8003192 <config_sig_dur_threshold>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800311a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8003138:	f107 010d 	add.w	r1, r7, #13
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	2059      	movs	r0, #89	; 0x59
 8003142:	f7fd ff1f 	bl	8000f84 <bmi160_get_regs>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d119      	bne.n	8003186 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8003152:	7b7b      	ldrb	r3, [r7, #13]
 8003154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003158:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	01db      	lsls	r3, r3, #7
 8003166:	b25a      	sxtb	r2, r3
 8003168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800316c:	4313      	orrs	r3, r2
 800316e:	b25b      	sxtb	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8003174:	f107 010d 	add.w	r1, r7, #13
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	2059      	movs	r0, #89	; 0x59
 800317e:	f7fd ff34 	bl	8000fea <bmi160_set_regs>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80031a6:	f107 010d 	add.w	r1, r7, #13
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	2060      	movs	r0, #96	; 0x60
 80031b0:	f7fd ff1b 	bl	8000fea <bmi160_set_regs>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d151      	bne.n	8003264 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80031c0:	f107 010d 	add.w	r1, r7, #13
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	2062      	movs	r0, #98	; 0x62
 80031ca:	f7fd fedb 	bl	8000f84 <bmi160_get_regs>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80031d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d144      	bne.n	8003264 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 80031da:	7b7b      	ldrb	r3, [r7, #13]
 80031dc:	f023 030c 	bic.w	r3, r3, #12
 80031e0:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	b25a      	sxtb	r2, r3
 80031f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8003202:	7b7b      	ldrb	r3, [r7, #13]
 8003204:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003208:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003212:	b2db      	uxtb	r3, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	b25b      	sxtb	r3, r3
 8003218:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800321c:	b25a      	sxtb	r2, r3
 800321e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003222:	4313      	orrs	r3, r2
 8003224:	b25b      	sxtb	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800322a:	7b7b      	ldrb	r3, [r7, #13]
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	b25b      	sxtb	r3, r3
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	b25a      	sxtb	r2, r3
 8003246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800324a:	4313      	orrs	r3, r2
 800324c:	b25b      	sxtb	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8003252:	f107 010d 	add.w	r1, r7, #13
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	2062      	movs	r0, #98	; 0x62
 800325c:	f7fd fec5 	bl	8000fea <bmi160_set_regs>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8003282:	f107 010d 	add.w	r1, r7, #13
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	2052      	movs	r0, #82	; 0x52
 800328c:	f7fd fe7a 	bl	8000f84 <bmi160_get_regs>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11c      	bne.n	80032d6 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	f023 0308 	bic.w	r3, r3, #8
 80032a2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032bc:	4313      	orrs	r3, r2
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80032c4:	f107 010d 	add.w	r1, r7, #13
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2052      	movs	r0, #82	; 0x52
 80032ce:	f7fd fe8c 	bl	8000fea <bmi160_set_regs>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 80032f0:	2300      	movs	r3, #0
 80032f2:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8003302:	2315      	movs	r3, #21
 8003304:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8003306:	2303      	movs	r3, #3
 8003308:	737b      	strb	r3, [r7, #13]
 800330a:	e05b      	b.n	80033c4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d104      	bne.n	8003324 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 800331a:	232d      	movs	r3, #45	; 0x2d
 800331c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	737b      	strb	r3, [r7, #13]
 8003322:	e04f      	b.n	80033c4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d104      	bne.n	800333c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8003332:	231d      	movs	r3, #29
 8003334:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8003336:	2307      	movs	r3, #7
 8003338:	737b      	strb	r3, [r7, #13]
 800333a:	e043      	b.n	80033c4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2bc0      	cmp	r3, #192	; 0xc0
 8003348:	d13c      	bne.n	80033c4 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 800334a:	f107 010c 	add.w	r1, r7, #12
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2202      	movs	r2, #2
 8003352:	207a      	movs	r0, #122	; 0x7a
 8003354:	f7fd fe16 	bl	8000f84 <bmi160_get_regs>
 8003358:	4603      	mov	r3, r0
 800335a:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 800335c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12f      	bne.n	80033c4 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8003364:	7b3b      	ldrb	r3, [r7, #12]
 8003366:	f023 0318 	bic.w	r3, r3, #24
 800336a:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003374:	b2db      	uxtb	r3, r3
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	b25b      	sxtb	r3, r3
 800337a:	f003 0318 	and.w	r3, r3, #24
 800337e:	b25a      	sxtb	r2, r3
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	4313      	orrs	r3, r2
 8003386:	b25b      	sxtb	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 80033a8:	7b7b      	ldrb	r3, [r7, #13]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4313      	orrs	r3, r2
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 80033c4:	f107 010c 	add.w	r1, r7, #12
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2202      	movs	r2, #2
 80033cc:	207a      	movs	r0, #122	; 0x7a
 80033ce:	f7fd fe0c 	bl	8000fea <bmi160_set_regs>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73bb      	strb	r3, [r7, #14]

    return rslt;
 80033d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80033f6:	f107 0115 	add.w	r1, r7, #21
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	2050      	movs	r0, #80	; 0x50
 8003400:	f7fd fdc0 	bl	8000f84 <bmi160_get_regs>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d135      	bne.n	800347c <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d114      	bne.n	8003442 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8003418:	7d7b      	ldrb	r3, [r7, #21]
 800341a:	f023 0320 	bic.w	r3, r3, #32
 800341e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	b25a      	sxtb	r2, r3
 8003434:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003438:	4313      	orrs	r3, r2
 800343a:	b25b      	sxtb	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	757b      	strb	r3, [r7, #21]
 8003440:	e013      	b.n	800346a <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8003442:	7d7b      	ldrb	r3, [r7, #21]
 8003444:	f023 0310 	bic.w	r3, r3, #16
 8003448:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	785b      	ldrb	r3, [r3, #1]
 800344e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	b25b      	sxtb	r3, r3
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	b25a      	sxtb	r2, r3
 800345e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003462:	4313      	orrs	r3, r2
 8003464:	b25b      	sxtb	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800346a:	f107 0115 	add.w	r1, r7, #21
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	2050      	movs	r0, #80	; 0x50
 8003474:	f7fd fdb9 	bl	8000fea <bmi160_set_regs>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800347c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7fe fb2b 	bl	8001af2 <set_intr_pin_config>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80034a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11a      	bne.n	80034de <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff faa2 	bl	80029f4 <map_feature_interrupt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80034b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d110      	bne.n	80034de <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f000 f813 	bl	80034ea <config_tap_data_src>
 80034c4:	4603      	mov	r3, r0
 80034c6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80034c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f841 	bl	800355c <config_tap_param>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80034de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80034fc:	f107 010d 	add.w	r1, r7, #13
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	2058      	movs	r0, #88	; 0x58
 8003506:	f7fd fd3d 	bl	8000f84 <bmi160_get_regs>
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11c      	bne.n	8003550 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8003516:	7b7b      	ldrb	r3, [r7, #13]
 8003518:	f023 0308 	bic.w	r3, r3, #8
 800351c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	b25b      	sxtb	r3, r3
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	b25a      	sxtb	r2, r3
 8003532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003536:	4313      	orrs	r3, r2
 8003538:	b25b      	sxtb	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800353e:	f107 010d 	add.w	r1, r7, #13
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	2058      	movs	r0, #88	; 0x58
 8003548:	f7fd fd4f 	bl	8000fea <bmi160_set_regs>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8003570:	2300      	movs	r3, #0
 8003572:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8003578:	f107 0114 	add.w	r1, r7, #20
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	2063      	movs	r0, #99	; 0x63
 8003582:	f7fd fcff 	bl	8000f84 <bmi160_get_regs>
 8003586:	4603      	mov	r3, r0
 8003588:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800358a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d178      	bne.n	8003684 <config_tap_param+0x128>
    {
        data = data_array[count];
 8003592:	7f3b      	ldrb	r3, [r7, #28]
 8003594:	3320      	adds	r3, #32
 8003596:	443b      	add	r3, r7
 8003598:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800359c:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d113      	bne.n	80035ce <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 80035b2:	7fbb      	ldrb	r3, [r7, #30]
 80035b4:	f023 0307 	bic.w	r3, r3, #7
 80035b8:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 80035ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	b25a      	sxtb	r2, r3
 80035c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80035da:	7fbb      	ldrb	r3, [r7, #30]
 80035dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e0:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 80035e2:	7ebb      	ldrb	r3, [r7, #26]
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8003604:	7fbb      	ldrb	r3, [r7, #30]
 8003606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360a:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 800360c:	7e7b      	ldrb	r3, [r7, #25]
 800360e:	01db      	lsls	r3, r3, #7
 8003610:	b25a      	sxtb	r2, r3
 8003612:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003616:	4313      	orrs	r3, r2
 8003618:	b25b      	sxtb	r3, r3
 800361a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 800361c:	7f3b      	ldrb	r3, [r7, #28]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	773a      	strb	r2, [r7, #28]
 8003622:	3320      	adds	r3, #32
 8003624:	443b      	add	r3, r7
 8003626:	7fba      	ldrb	r2, [r7, #30]
 8003628:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 800362c:	7f3b      	ldrb	r3, [r7, #28]
 800362e:	3320      	adds	r3, #32
 8003630:	443b      	add	r3, r7
 8003632:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003636:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003640:	b2db      	uxtb	r3, r3
 8003642:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8003644:	7fbb      	ldrb	r3, [r7, #30]
 8003646:	f023 031f 	bic.w	r3, r3, #31
 800364a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 800364c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	b25a      	sxtb	r2, r3
 8003656:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800365a:	4313      	orrs	r3, r2
 800365c:	b25b      	sxtb	r3, r3
 800365e:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8003660:	7f3b      	ldrb	r3, [r7, #28]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	773a      	strb	r2, [r7, #28]
 8003666:	3320      	adds	r3, #32
 8003668:	443b      	add	r3, r7
 800366a:	7fba      	ldrb	r2, [r7, #30]
 800366c:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8003670:	7f3b      	ldrb	r3, [r7, #28]
 8003672:	b29a      	uxth	r2, r3
 8003674:	f107 0114 	add.w	r1, r7, #20
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2063      	movs	r0, #99	; 0x63
 800367c:	f7fd fcb5 	bl	8000fea <bmi160_set_regs>
 8003680:	4603      	mov	r3, r0
 8003682:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003684:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80036a2:	f107 010d 	add.w	r1, r7, #13
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	2050      	movs	r0, #80	; 0x50
 80036ac:	f7fd fc6a 	bl	8000f84 <bmi160_get_regs>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11c      	bne.n	80036f6 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 80036bc:	7b7b      	ldrb	r3, [r7, #13]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	789b      	ldrb	r3, [r3, #2]
 80036c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	019b      	lsls	r3, r3, #6
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	b25a      	sxtb	r2, r3
 80036d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036dc:	4313      	orrs	r3, r2
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80036e4:	f107 010d 	add.w	r1, r7, #13
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	2050      	movs	r0, #80	; 0x50
 80036ee:	f7fd fc7c 	bl	8000fea <bmi160_set_regs>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8003714:	2300      	movs	r3, #0
 8003716:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8003718:	f107 0108 	add.w	r1, r7, #8
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2202      	movs	r2, #2
 8003720:	2065      	movs	r0, #101	; 0x65
 8003722:	f7fd fc2f 	bl	8000f84 <bmi160_get_regs>
 8003726:	4603      	mov	r3, r0
 8003728:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d170      	bne.n	8003814 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8003732:	7a3b      	ldrb	r3, [r7, #8]
 8003734:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8003736:	7bbb      	ldrb	r3, [r7, #14]
 8003738:	f023 0303 	bic.w	r3, r3, #3
 800373c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	4313      	orrs	r3, r2
 800374e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8003750:	7bbb      	ldrb	r3, [r7, #14]
 8003752:	f023 030c 	bic.w	r3, r3, #12
 8003756:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	b25b      	sxtb	r3, r3
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	b25a      	sxtb	r2, r3
 800376c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003770:	4313      	orrs	r3, r2
 8003772:	b25b      	sxtb	r3, r3
 8003774:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8003776:	7bbb      	ldrb	r3, [r7, #14]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003786:	b2db      	uxtb	r3, r3
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	b25a      	sxtb	r2, r3
 800378c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003790:	4313      	orrs	r3, r2
 8003792:	b25b      	sxtb	r3, r3
 8003794:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8003796:	7bbb      	ldrb	r3, [r7, #14]
 8003798:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800379a:	7a7b      	ldrb	r3, [r7, #9]
 800379c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 800379e:	7bbb      	ldrb	r3, [r7, #14]
 80037a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a4:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	7b7b      	ldrb	r3, [r7, #13]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 80037b8:	7bbb      	ldrb	r3, [r7, #14]
 80037ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037be:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	b25a      	sxtb	r2, r3
 80037d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037d8:	4313      	orrs	r3, r2
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 80037de:	7bbb      	ldrb	r3, [r7, #14]
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	01db      	lsls	r3, r3, #7
 80037f2:	b25a      	sxtb	r2, r3
 80037f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8003802:	f107 0108 	add.w	r1, r7, #8
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	2065      	movs	r0, #101	; 0x65
 800380c:	f7fd fbed 	bl	8000fea <bmi160_set_regs>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003832:	f107 010d 	add.w	r1, r7, #13
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	2050      	movs	r0, #80	; 0x50
 800383c:	f7fd fba2 	bl	8000f84 <bmi160_get_regs>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d119      	bne.n	8003880 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 800384c:	7b7b      	ldrb	r3, [r7, #13]
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	01db      	lsls	r3, r3, #7
 8003860:	b25a      	sxtb	r2, r3
 8003862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003866:	4313      	orrs	r3, r2
 8003868:	b25b      	sxtb	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800386e:	f107 010d 	add.w	r1, r7, #13
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	2050      	movs	r0, #80	; 0x50
 8003878:	f7fd fbb7 	bl	8000fea <bmi160_set_regs>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 800389e:	2300      	movs	r3, #0
 80038a0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80038a2:	f107 0108 	add.w	r1, r7, #8
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2202      	movs	r2, #2
 80038aa:	2067      	movs	r0, #103	; 0x67
 80038ac:	f7fd fb6a 	bl	8000f84 <bmi160_get_regs>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d13d      	bne.n	8003938 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 80038bc:	7a3b      	ldrb	r3, [r7, #8]
 80038be:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038c6:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	7b7b      	ldrb	r3, [r7, #13]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80038da:	7bbb      	ldrb	r3, [r7, #14]
 80038dc:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80038de:	7a7b      	ldrb	r3, [r7, #9]
 80038e0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038e8:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038fc:	b25a      	sxtb	r2, r3
 80038fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003902:	4313      	orrs	r3, r2
 8003904:	b25b      	sxtb	r3, r3
 8003906:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	f023 0307 	bic.w	r3, r3, #7
 800390e:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	7b7b      	ldrb	r3, [r7, #13]
 800391e:	4313      	orrs	r3, r2
 8003920:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003922:	7bbb      	ldrb	r3, [r7, #14]
 8003924:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003926:	f107 0108 	add.w	r1, r7, #8
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2202      	movs	r2, #2
 800392e:	2067      	movs	r0, #103	; 0x67
 8003930:	f7fd fb5b 	bl	8000fea <bmi160_set_regs>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003956:	f107 010d 	add.w	r1, r7, #13
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	2051      	movs	r0, #81	; 0x51
 8003960:	f7fd fb10 	bl	8000f84 <bmi160_get_regs>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11c      	bne.n	80039aa <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8003970:	7b7b      	ldrb	r3, [r7, #13]
 8003972:	f023 0308 	bic.w	r3, r3, #8
 8003976:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	b25b      	sxtb	r3, r3
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	b25a      	sxtb	r2, r3
 800398c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003990:	4313      	orrs	r3, r2
 8003992:	b25b      	sxtb	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003998:	f107 010d 	add.w	r1, r7, #13
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	2051      	movs	r0, #81	; 0x51
 80039a2:	f7fd fb22 	bl	8000fea <bmi160_set_regs>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80039c8:	f107 010d 	add.w	r1, r7, #13
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	2058      	movs	r0, #88	; 0x58
 80039d2:	f7fd fad7 	bl	8000f84 <bmi160_get_regs>
 80039d6:	4603      	mov	r3, r0
 80039d8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d119      	bne.n	8003a16 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80039e2:	7b7b      	ldrb	r3, [r7, #13]
 80039e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	789b      	ldrb	r3, [r3, #2]
 80039ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	01db      	lsls	r3, r3, #7
 80039f6:	b25a      	sxtb	r2, r3
 80039f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003a04:	f107 010d 	add.w	r1, r7, #13
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2058      	movs	r0, #88	; 0x58
 8003a0e:	f7fd faec 	bl	8000fea <bmi160_set_regs>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003a32:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <config_low_g_int_settg+0xac>)
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	8019      	strh	r1, [r3, #0]
 8003a3e:	3302      	adds	r3, #2
 8003a40:	0c12      	lsrs	r2, r2, #16
 8003a42:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003a44:	f107 0308 	add.w	r3, r7, #8
 8003a48:	1c99      	adds	r1, r3, #2
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	205c      	movs	r0, #92	; 0x5c
 8003a50:	f7fd fa98 	bl	8000f84 <bmi160_get_regs>
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d130      	bne.n	8003ac2 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8003a60:	7abb      	ldrb	r3, [r7, #10]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 8003a7c:	7abb      	ldrb	r3, [r7, #10]
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	789b      	ldrb	r3, [r3, #2]
 8003a88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	b25a      	sxtb	r2, r3
 8003a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003ab0:	f107 0108 	add.w	r1, r7, #8
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	205a      	movs	r0, #90	; 0x5a
 8003aba:	f7fd fa96 	bl	8000fea <bmi160_set_regs>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08014068 	.word	0x08014068

08003ad4 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003ae6:	f107 010d 	add.w	r1, r7, #13
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	2051      	movs	r0, #81	; 0x51
 8003af0:	f7fd fa48 	bl	8000f84 <bmi160_get_regs>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13e      	bne.n	8003b7e <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003b00:	7b7b      	ldrb	r3, [r7, #13]
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	7bbb      	ldrb	r3, [r7, #14]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8003b1c:	7b7b      	ldrb	r3, [r7, #13]
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	b25a      	sxtb	r2, r3
 8003b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003b44:	7b7b      	ldrb	r3, [r7, #13]
 8003b46:	f023 0304 	bic.w	r3, r3, #4
 8003b4a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	b25a      	sxtb	r2, r3
 8003b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003b6c:	f107 010d 	add.w	r1, r7, #13
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	2051      	movs	r0, #81	; 0x51
 8003b76:	f7fd fa38 	bl	8000fea <bmi160_set_regs>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003b9c:	f107 010d 	add.w	r1, r7, #13
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2058      	movs	r0, #88	; 0x58
 8003ba6:	f7fd f9ed 	bl	8000f84 <bmi160_get_regs>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003bb6:	7b7b      	ldrb	r3, [r7, #13]
 8003bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bbc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	b25a      	sxtb	r2, r3
 8003bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003bd8:	f107 010d 	add.w	r1, r7, #13
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	2058      	movs	r0, #88	; 0x58
 8003be2:	f7fd fa02 	bl	8000fea <bmi160_set_regs>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <config_high_g_int_settg+0x88>)
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	8019      	strh	r1, [r3, #0]
 8003c12:	3302      	adds	r3, #2
 8003c14:	0c12      	lsrs	r2, r2, #16
 8003c16:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003c18:	f107 0108 	add.w	r1, r7, #8
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	205c      	movs	r0, #92	; 0x5c
 8003c22:	f7fd f9af 	bl	8000f84 <bmi160_get_regs>
 8003c26:	4603      	mov	r3, r0
 8003c28:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11f      	bne.n	8003c72 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003c32:	7a3b      	ldrb	r3, [r7, #8]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	b25a      	sxtb	r2, r3
 8003c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	789b      	ldrb	r3, [r3, #2]
 8003c58:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8003c60:	f107 0108 	add.w	r1, r7, #8
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2203      	movs	r2, #3
 8003c68:	205c      	movs	r0, #92	; 0x5c
 8003c6a:	f7fd f9be 	bl	8000fea <bmi160_set_regs>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	08014068 	.word	0x08014068

08003c84 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003c96:	f107 010f 	add.w	r1, r7, #15
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2053      	movs	r0, #83	; 0x53
 8003ca0:	f7fd f970 	bl	8000f84 <bmi160_get_regs>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f040 80a8 	bne.w	8003e02 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d14a      	bne.n	8003d56 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	f023 0308 	bic.w	r3, r3, #8
 8003cc6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	b25a      	sxtb	r2, r3
 8003cdc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	b25a      	sxtb	r2, r3
 8003d04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	f023 0302 	bic.w	r3, r3, #2
 8003d16:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b25b      	sxtb	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	7dbb      	ldrb	r3, [r7, #22]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	e04c      	b.n	8003df0 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	01db      	lsls	r3, r3, #7
 8003d6a:	b25a      	sxtb	r2, r3
 8003d6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	019b      	lsls	r3, r3, #6
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	b25a      	sxtb	r2, r3
 8003d94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	f023 0320 	bic.w	r3, r3, #32
 8003da6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	b25a      	sxtb	r2, r3
 8003dbc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	b25a      	sxtb	r2, r3
 8003de4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b25b      	sxtb	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003df0:	f107 010f 	add.w	r1, r7, #15
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	2053      	movs	r0, #83	; 0x53
 8003dfa:	f7fd f8f6 	bl	8000fea <bmi160_set_regs>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003e20:	f107 010f 	add.w	r1, r7, #15
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	2054      	movs	r0, #84	; 0x54
 8003e2a:	f7fd f8ab 	bl	8000f84 <bmi160_get_regs>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d146      	bne.n	8003ec8 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d114      	bne.n	8003e72 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	b25a      	sxtb	r2, r3
 8003e64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e013      	b.n	8003e9a <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	f023 0320 	bic.w	r3, r3, #32
 8003e78:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	015b      	lsls	r3, r3, #5
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	b25a      	sxtb	r2, r3
 8003e8e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	7dbb      	ldrb	r3, [r7, #22]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003eb6:	f107 010f 	add.w	r1, r7, #15
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2054      	movs	r0, #84	; 0x54
 8003ec0:	f7fd f893 	bl	8000fea <bmi160_set_regs>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <set_fifo_full_int+0x1c>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003ef0:	23ff      	movs	r3, #255	; 0xff
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e019      	b.n	8003f2a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f81c 	bl	8003f36 <enable_fifo_full_int>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fd fdf0 	bl	8001af2 <set_intr_pin_config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fe fe01 	bl	8002b28 <map_hardware_interrupt>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003f44:	f107 010e 	add.w	r1, r7, #14
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	2051      	movs	r0, #81	; 0x51
 8003f4e:	f7fd f819 	bl	8000f84 <bmi160_get_regs>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11b      	bne.n	8003f96 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	f023 0320 	bic.w	r3, r3, #32
 8003f66:	b25a      	sxtb	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7a1b      	ldrb	r3, [r3, #8]
 8003f6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003f84:	f107 010e 	add.w	r1, r7, #14
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2051      	movs	r0, #81	; 0x51
 8003f8e:	f7fd f82c 	bl	8000fea <bmi160_set_regs>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <set_fifo_watermark_int+0x1c>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003fbe:	23ff      	movs	r3, #255	; 0xff
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	e019      	b.n	8003ff8 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f81c 	bl	8004004 <enable_fifo_wtm_int>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fd89 	bl	8001af2 <set_intr_pin_config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe fd9a 	bl	8002b28 <map_hardware_interrupt>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8004012:	f107 010e 	add.w	r1, r7, #14
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	2051      	movs	r0, #81	; 0x51
 800401c:	f7fc ffb2 	bl	8000f84 <bmi160_get_regs>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11b      	bne.n	8004064 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800402c:	7bbb      	ldrb	r3, [r7, #14]
 800402e:	b25b      	sxtb	r3, r3
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	b25a      	sxtb	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7a1b      	ldrb	r3, [r3, #8]
 800403a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	b25b      	sxtb	r3, r3
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	b25b      	sxtb	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8004052:	f107 010e 	add.w	r1, r7, #14
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	2051      	movs	r0, #81	; 0x51
 800405c:	f7fc ffc5 	bl	8000fea <bmi160_set_regs>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 800407a:	f107 010e 	add.w	r1, r7, #14
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	201b      	movs	r0, #27
 8004084:	f7fc ff7e 	bl	8000f84 <bmi160_get_regs>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800408c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	10db      	asrs	r3, r3, #3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80040a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80040ba:	6838      	ldr	r0, [r7, #0]
 80040bc:	f7fd fd34 	bl	8001b28 <null_ptr_check>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 80040c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80040cc:	23ff      	movs	r3, #255	; 0xff
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e032      	b.n	8004138 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 80040d2:	f107 010e 	add.w	r1, r7, #14
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	2077      	movs	r0, #119	; 0x77
 80040dc:	f7fc ff52 	bl	8000f84 <bmi160_get_regs>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80040e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d125      	bne.n	8004138 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	b25a      	sxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	795b      	ldrb	r3, [r3, #5]
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	b25b      	sxtb	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	b25b      	sxtb	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	b25b      	sxtb	r3, r3
 800410a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410e:	b25a      	sxtb	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	791b      	ldrb	r3, [r3, #4]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	b25b      	sxtb	r3, r3
 800411e:	4313      	orrs	r3, r2
 8004120:	b25b      	sxtb	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8004126:	f107 010e 	add.w	r1, r7, #14
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	2077      	movs	r0, #119	; 0x77
 8004130:	f7fc ff5b 	bl	8000fea <bmi160_set_regs>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 800414e:	2301      	movs	r3, #1
 8004150:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 8004152:	2303      	movs	r3, #3
 8004154:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 800415a:	f107 011c 	add.w	r1, r7, #28
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	207e      	movs	r0, #126	; 0x7e
 8004164:	f7fc ff41 	bl	8000fea <bmi160_set_regs>
 8004168:	4603      	mov	r3, r0
 800416a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800416c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d141      	bne.n	80041f8 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8004174:	f107 031d 	add.w	r3, r7, #29
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff78 	bl	8004070 <get_foc_status>
 8004180:	4603      	mov	r3, r0
 8004182:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8004184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d112      	bne.n	80041b2 <trigger_foc+0x6e>
 800418c:	7f7b      	ldrb	r3, [r7, #29]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d025      	beq.n	80041de <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8004192:	e00e      	b.n	80041b2 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2019      	movs	r0, #25
 800419a:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 800419c:	f107 031d 	add.w	r3, r7, #29
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff64 	bl	8004070 <get_foc_status>
 80041a8:	4603      	mov	r3, r0
 80041aa:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80041ac:	7fbb      	ldrb	r3, [r7, #30]
 80041ae:	3301      	adds	r3, #1
 80041b0:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80041b2:	7f7b      	ldrb	r3, [r7, #29]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <trigger_foc+0x7a>
 80041b8:	7fbb      	ldrb	r3, [r7, #30]
 80041ba:	2b1f      	cmp	r3, #31
 80041bc:	d9ea      	bls.n	8004194 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 80041be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <trigger_foc+0x96>
 80041c6:	7f7b      	ldrb	r3, [r7, #29]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f9c5 	bl	800155e <bmi160_get_offsets>
 80041d4:	4603      	mov	r3, r0
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e001      	b.n	80041de <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 80041da:	23f5      	movs	r3, #245	; 0xf5
 80041dc:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 80041de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 80041e6:	f107 0108 	add.w	r1, r7, #8
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2214      	movs	r2, #20
 80041ee:	200c      	movs	r0, #12
 80041f0:	f7fc fec8 	bl	8000f84 <bmi160_get_regs>
 80041f4:	4603      	mov	r3, r0
 80041f6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80041f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 800420c:	f000 f970 	bl	80044f0 <set_bmi160_Ares>
	set_bmi160_Gres();
 8004210:	f000 f99a 	bl	8004548 <set_bmi160_Gres>
	get_bmi160_Ares();
 8004214:	f000 f9ca 	bl	80045ac <get_bmi160_Ares>
	get_bmi160_Gres();
 8004218:	f000 f9fe 	bl	8004618 <get_bmi160_Gres>

    sensor.id = 0;
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <BMI160_init+0x164>)
 800421e:	2200      	movs	r2, #0
 8004220:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8004222:	4b51      	ldr	r3, [pc, #324]	; (8004368 <BMI160_init+0x164>)
 8004224:	2200      	movs	r2, #0
 8004226:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8004228:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <BMI160_init+0x164>)
 800422a:	4a50      	ldr	r2, [pc, #320]	; (800436c <BMI160_init+0x168>)
 800422c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800422e:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <BMI160_init+0x164>)
 8004230:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <BMI160_init+0x16c>)
 8004232:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8004234:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <BMI160_init+0x164>)
 8004236:	4a4f      	ldr	r2, [pc, #316]	; (8004374 <BMI160_init+0x170>)
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
    sensor.read_write_len = 32;
 800423a:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <BMI160_init+0x164>)
 800423c:	2220      	movs	r2, #32
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28

    rslt = bmi160_soft_reset(&sensor);
 8004240:	4849      	ldr	r0, [pc, #292]	; (8004368 <BMI160_init+0x164>)
 8004242:	f7fc ff83 	bl	800114c <bmi160_soft_reset>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <BMI160_init+0x164>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	20c8      	movs	r0, #200	; 0xc8
 8004250:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 8004252:	4845      	ldr	r0, [pc, #276]	; (8004368 <BMI160_init+0x164>)
 8004254:	f7fc ff2c 	bl	80010b0 <bmi160_init>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 800425c:	2300      	movs	r3, #0
 800425e:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8004264:	2301      	movs	r3, #1
 8004266:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8004268:	89ba      	ldrh	r2, [r7, #12]
 800426a:	f107 010b 	add.w	r1, r7, #11
 800426e:	7bb8      	ldrb	r0, [r7, #14]
 8004270:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <BMI160_init+0x164>)
 8004272:	f7fc fe87 	bl	8000f84 <bmi160_get_regs>
 8004276:	4603      	mov	r3, r0
 8004278:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 800427a:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <BMI160_init+0x164>)
 800427c:	220b      	movs	r2, #11
 800427e:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8004280:	4b39      	ldr	r3, [pc, #228]	; (8004368 <BMI160_init+0x164>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2064      	movs	r0, #100	; 0x64
 8004286:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8004288:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <BMI160_init+0x174>)
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <BMI160_init+0x164>)
 800428e:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <BMI160_init+0x164>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8004298:	4b33      	ldr	r3, [pc, #204]	; (8004368 <BMI160_init+0x164>)
 800429a:	2211      	movs	r2, #17
 800429c:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 800429e:	4b32      	ldr	r3, [pc, #200]	; (8004368 <BMI160_init+0x164>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2064      	movs	r0, #100	; 0x64
 80042a4:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80042a6:	4b30      	ldr	r3, [pc, #192]	; (8004368 <BMI160_init+0x164>)
 80042a8:	2202      	movs	r2, #2
 80042aa:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <BMI160_init+0x164>)
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2064      	movs	r0, #100	; 0x64
 80042b2:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <BMI160_init+0x164>)
 80042b6:	220b      	movs	r2, #11
 80042b8:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <BMI160_init+0x164>)
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2064      	movs	r0, #100	; 0x64
 80042c0:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <BMI160_init+0x178>)
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <BMI160_init+0x164>)
 80042c8:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <BMI160_init+0x164>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2064      	movs	r0, #100	; 0x64
 80042d0:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80042d2:	4b25      	ldr	r3, [pc, #148]	; (8004368 <BMI160_init+0x164>)
 80042d4:	2215      	movs	r2, #21
 80042d6:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 80042d8:	4b23      	ldr	r3, [pc, #140]	; (8004368 <BMI160_init+0x164>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2064      	movs	r0, #100	; 0x64
 80042de:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <BMI160_init+0x164>)
 80042e2:	2202      	movs	r2, #2
 80042e4:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <BMI160_init+0x164>)
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2064      	movs	r0, #100	; 0x64
 80042ec:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 80042ee:	481e      	ldr	r0, [pc, #120]	; (8004368 <BMI160_init+0x164>)
 80042f0:	f7fc ff67 	bl	80011c2 <bmi160_set_sens_conf>
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 80042f8:	f000 f844 	bl	8004384 <start_foc>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <BMI160_init+0x17c>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <BMI160_init+0x17c>)
 8004308:	220a      	movs	r2, #10
 800430a:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <BMI160_init+0x17c>)
 800430e:	7893      	ldrb	r3, [r2, #2]
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <BMI160_init+0x17c>)
 8004318:	7893      	ldrb	r3, [r2, #2]
 800431a:	f36f 0341 	bfc	r3, #1, #1
 800431e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8004320:	4a17      	ldr	r2, [pc, #92]	; (8004380 <BMI160_init+0x17c>)
 8004322:	7893      	ldrb	r3, [r2, #2]
 8004324:	f36f 0382 	bfc	r3, #2, #1
 8004328:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 800432a:	4a15      	ldr	r2, [pc, #84]	; (8004380 <BMI160_init+0x17c>)
 800432c:	7893      	ldrb	r3, [r2, #2]
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <BMI160_init+0x17c>)
 8004336:	7893      	ldrb	r3, [r2, #2]
 8004338:	f36f 1304 	bfc	r3, #4, #1
 800433c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <BMI160_init+0x17c>)
 8004340:	8853      	ldrh	r3, [r2, #2]
 8004342:	f36f 1348 	bfc	r3, #5, #4
 8004346:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <BMI160_init+0x164>)
 800434a:	480d      	ldr	r0, [pc, #52]	; (8004380 <BMI160_init+0x17c>)
 800434c:	f7fc fffa 	bl	8001344 <bmi160_set_int_config>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	761a      	strb	r2, [r3, #24]
    return rslt;
 800435a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000264 	.word	0x20000264
 800436c:	080046a1 	.word	0x080046a1
 8004370:	080046e5 	.word	0x080046e5
 8004374:	08007bed 	.word	0x08007bed
 8004378:	200002c6 	.word	0x200002c6
 800437c:	200002c7 	.word	0x200002c7
 8004380:	200002bc 	.word	0x200002bc

08004384 <start_foc>:

int8_t start_foc()
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <start_foc+0x58>)
 8004390:	2201      	movs	r2, #1
 8004392:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <start_foc+0x58>)
 8004396:	2203      	movs	r2, #3
 8004398:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <start_foc+0x58>)
 800439c:	2203      	movs	r2, #3
 800439e:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <start_foc+0x58>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <start_foc+0x5c>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2064      	movs	r0, #100	; 0x64
 80043ac:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <start_foc+0x58>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <start_foc+0x58>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <start_foc+0x5c>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2064      	movs	r0, #100	; 0x64
 80043c0:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 80043c2:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <start_foc+0x5c>)
 80043c4:	4907      	ldr	r1, [pc, #28]	; (80043e4 <start_foc+0x60>)
 80043c6:	4805      	ldr	r0, [pc, #20]	; (80043dc <start_foc+0x58>)
 80043c8:	f7fd f848 	bl	800145c <bmi160_start_foc>
 80043cc:	4603      	mov	r3, r0
 80043ce:	71fb      	strb	r3, [r7, #7]

	return rslt;
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200002a8 	.word	0x200002a8
 80043e0:	20000264 	.word	0x20000264
 80043e4:	200002b0 	.word	0x200002b0

080043e8 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <bmi160ReadAccelGyro+0xf4>)
 80043f2:	4a3b      	ldr	r2, [pc, #236]	; (80044e0 <bmi160ReadAccelGyro+0xf8>)
 80043f4:	493b      	ldr	r1, [pc, #236]	; (80044e4 <bmi160ReadAccelGyro+0xfc>)
 80043f6:	2003      	movs	r0, #3
 80043f8:	f7fc ff3d 	bl	8001276 <bmi160_get_sensor_data>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	ax = (float)accel.x / bmi160_aRes;
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <bmi160ReadAccelGyro+0xfc>)
 8004404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <bmi160ReadAccelGyro+0x100>)
 8004412:	ed93 7a00 	vldr	s14, [r3]
 8004416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441a:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <bmi160ReadAccelGyro+0xfc>)
 8004420:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800442c:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <bmi160ReadAccelGyro+0x100>)
 800442e:	ed93 7a00 	vldr	s14, [r3]
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 800443a:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <bmi160ReadAccelGyro+0xfc>)
 800443c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <bmi160ReadAccelGyro+0x100>)
 800444a:	ed93 7a00 	vldr	s14, [r3]
 800444e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004452:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <bmi160ReadAccelGyro+0xf8>)
 8004458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004464:	4b21      	ldr	r3, [pc, #132]	; (80044ec <bmi160ReadAccelGyro+0x104>)
 8004466:	ed93 7a00 	vldr	s14, [r3]
 800446a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446e:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <bmi160ReadAccelGyro+0xf8>)
 8004474:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <bmi160ReadAccelGyro+0x104>)
 8004482:	ed93 7a00 	vldr	s14, [r3]
 8004486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448a:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <bmi160ReadAccelGyro+0xf8>)
 8004490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <bmi160ReadAccelGyro+0x104>)
 800449e:	ed93 7a00 	vldr	s14, [r3]
 80044a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a6:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	615a      	str	r2, [r3, #20]

	return rslt;
 80044ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000264 	.word	0x20000264
 80044e0:	2000029c 	.word	0x2000029c
 80044e4:	20000290 	.word	0x20000290
 80044e8:	200002c8 	.word	0x200002c8
 80044ec:	200002cc 	.word	0x200002cc

080044f0 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <set_bmi160_Ares+0x50>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d81a      	bhi.n	8004534 <set_bmi160_Ares+0x44>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <set_bmi160_Ares+0x14>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004515 	.word	0x08004515
 8004508:	0800451d 	.word	0x0800451d
 800450c:	08004525 	.word	0x08004525
 8004510:	0800452d 	.word	0x0800452d
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <set_bmi160_Ares+0x54>)
 8004516:	2203      	movs	r2, #3
 8004518:	701a      	strb	r2, [r3, #0]
			break;
 800451a:	e00b      	b.n	8004534 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <set_bmi160_Ares+0x54>)
 800451e:	2205      	movs	r2, #5
 8004520:	701a      	strb	r2, [r3, #0]
			break;
 8004522:	e007      	b.n	8004534 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <set_bmi160_Ares+0x54>)
 8004526:	2208      	movs	r2, #8
 8004528:	701a      	strb	r2, [r3, #0]
			break;
 800452a:	e003      	b.n	8004534 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <set_bmi160_Ares+0x54>)
 800452e:	220c      	movs	r2, #12
 8004530:	701a      	strb	r2, [r3, #0]
			break;
 8004532:	bf00      	nop
	}
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000000 	.word	0x20000000
 8004544:	200002c6 	.word	0x200002c6

08004548 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 800454c:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <set_bmi160_Gres+0x5c>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	2b04      	cmp	r3, #4
 8004554:	d820      	bhi.n	8004598 <set_bmi160_Gres+0x50>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <set_bmi160_Gres+0x14>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004571 	.word	0x08004571
 8004560:	08004579 	.word	0x08004579
 8004564:	08004581 	.word	0x08004581
 8004568:	08004589 	.word	0x08004589
 800456c:	08004591 	.word	0x08004591
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <set_bmi160_Gres+0x60>)
 8004572:	2204      	movs	r2, #4
 8004574:	701a      	strb	r2, [r3, #0]
			break;
 8004576:	e00f      	b.n	8004598 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <set_bmi160_Gres+0x60>)
 800457a:	2203      	movs	r2, #3
 800457c:	701a      	strb	r2, [r3, #0]
			break;
 800457e:	e00b      	b.n	8004598 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <set_bmi160_Gres+0x60>)
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
			break;
 8004586:	e007      	b.n	8004598 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <set_bmi160_Gres+0x60>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
			break;
 800458e:	e003      	b.n	8004598 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <set_bmi160_Gres+0x60>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
			break;
 8004596:	bf00      	nop
	}
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000001 	.word	0x20000001
 80045a8:	200002c7 	.word	0x200002c7

080045ac <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <get_bmi160_Ares+0x64>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d826      	bhi.n	8004606 <get_bmi160_Ares+0x5a>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <get_bmi160_Ares+0x14>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d5 	.word	0x080045d5
 80045c4:	080045df 	.word	0x080045df
 80045c8:	080045e9 	.word	0x080045e9
 80045cc:	080045f3 	.word	0x080045f3
 80045d0:	080045fd 	.word	0x080045fd
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <get_bmi160_Ares+0x68>)
 80045d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045da:	601a      	str	r2, [r3, #0]
			break;
 80045dc:	e013      	b.n	8004606 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <get_bmi160_Ares+0x68>)
 80045e0:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80045e4:	601a      	str	r2, [r3, #0]
			break;
 80045e6:	e00e      	b.n	8004606 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <get_bmi160_Ares+0x68>)
 80045ea:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80045ee:	601a      	str	r2, [r3, #0]
			break;
 80045f0:	e009      	b.n	8004606 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <get_bmi160_Ares+0x68>)
 80045f4:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80045f8:	601a      	str	r2, [r3, #0]
			break;
 80045fa:	e004      	b.n	8004606 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <get_bmi160_Ares+0x68>)
 80045fe:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8004602:	601a      	str	r2, [r3, #0]
			break;
 8004604:	bf00      	nop
	}
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000002 	.word	0x20000002
 8004614:	200002c8 	.word	0x200002c8

08004618 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 800461c:	4b18      	ldr	r3, [pc, #96]	; (8004680 <get_bmi160_Gres+0x68>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d828      	bhi.n	8004676 <get_bmi160_Gres+0x5e>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <get_bmi160_Gres+0x14>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004645 	.word	0x08004645
 8004630:	0800464f 	.word	0x0800464f
 8004634:	08004657 	.word	0x08004657
 8004638:	0800465f 	.word	0x0800465f
 800463c:	08004667 	.word	0x08004667
 8004640:	0800466f 	.word	0x0800466f
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <get_bmi160_Gres+0x6c>)
 8004646:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800464a:	601a      	str	r2, [r3, #0]
			break;
 800464c:	e013      	b.n	8004676 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <get_bmi160_Gres+0x70>)
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <get_bmi160_Gres+0x74>)
 8004652:	601a      	str	r2, [r3, #0]
			break;
 8004654:	e00f      	b.n	8004676 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <get_bmi160_Gres+0x70>)
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <get_bmi160_Gres+0x78>)
 800465a:	601a      	str	r2, [r3, #0]
			break;
 800465c:	e00b      	b.n	8004676 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <get_bmi160_Gres+0x70>)
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <get_bmi160_Gres+0x7c>)
 8004662:	601a      	str	r2, [r3, #0]
			break;
 8004664:	e007      	b.n	8004676 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <get_bmi160_Gres+0x70>)
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <get_bmi160_Gres+0x80>)
 800466a:	601a      	str	r2, [r3, #0]
			break;
 800466c:	e003      	b.n	8004676 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <get_bmi160_Gres+0x70>)
 8004670:	4a0a      	ldr	r2, [pc, #40]	; (800469c <get_bmi160_Gres+0x84>)
 8004672:	601a      	str	r2, [r3, #0]
			break;
 8004674:	bf00      	nop
	}
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000003 	.word	0x20000003
 8004684:	200002c8 	.word	0x200002c8
 8004688:	200002cc 	.word	0x200002cc
 800468c:	43833333 	.word	0x43833333
 8004690:	43033333 	.word	0x43033333
 8004694:	42833333 	.word	0x42833333
 8004698:	42033333 	.word	0x42033333
 800469c:	41833333 	.word	0x41833333

080046a0 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	603a      	str	r2, [r7, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
 80046ae:	460b      	mov	r3, r1
 80046b0:	71bb      	strb	r3, [r7, #6]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80046b6:	1dba      	adds	r2, r7, #6
 80046b8:	2364      	movs	r3, #100	; 0x64
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2301      	movs	r3, #1
 80046be:	21d2      	movs	r1, #210	; 0xd2
 80046c0:	4807      	ldr	r0, [pc, #28]	; (80046e0 <SensorAPI_I2Cx_Read+0x40>)
 80046c2:	f003 fe51 	bl	8008368 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80046c6:	88bb      	ldrh	r3, [r7, #4]
 80046c8:	2264      	movs	r2, #100	; 0x64
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	21d2      	movs	r1, #210	; 0xd2
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <SensorAPI_I2Cx_Read+0x40>)
 80046d2:	f003 ff3d 	bl	8008550 <HAL_I2C_Master_Receive>
	return 0;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	200004d4 	.word	0x200004d4

080046e4 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	603a      	str	r2, [r7, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
 80046f2:	460b      	mov	r3, r1
 80046f4:	71bb      	strb	r3, [r7, #6]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 80046fa:	4a0c      	ldr	r2, [pc, #48]	; (800472c <SensorAPI_I2Cx_Write+0x48>)
 80046fc:	79bb      	ldrb	r3, [r7, #6]
 80046fe:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8004700:	88bb      	ldrh	r3, [r7, #4]
 8004702:	461a      	mov	r2, r3
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	480a      	ldr	r0, [pc, #40]	; (8004730 <SensorAPI_I2Cx_Write+0x4c>)
 8004708:	f00c f81f 	bl	801074a <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 800470c:	88bb      	ldrh	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	2264      	movs	r2, #100	; 0x64
 8004714:	9200      	str	r2, [sp, #0]
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <SensorAPI_I2Cx_Write+0x48>)
 8004718:	21d2      	movs	r1, #210	; 0xd2
 800471a:	4806      	ldr	r0, [pc, #24]	; (8004734 <SensorAPI_I2Cx_Write+0x50>)
 800471c:	f003 fe24 	bl	8008368 <HAL_I2C_Master_Transmit>
	return 0;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200002d0 	.word	0x200002d0
 8004730:	200002d1 	.word	0x200002d1
 8004734:	200004d4 	.word	0x200004d4

08004738 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800473c:	2200      	movs	r2, #0
 800473e:	2110      	movs	r1, #16
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <SELECT+0x14>)
 8004742:	f003 fd4d 	bl	80081e0 <HAL_GPIO_WritePin>
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40020000 	.word	0x40020000

08004750 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8004754:	2201      	movs	r2, #1
 8004756:	2110      	movs	r1, #16
 8004758:	4802      	ldr	r0, [pc, #8]	; (8004764 <DESELECT+0x14>)
 800475a:	f003 fd41 	bl	80081e0 <HAL_GPIO_WritePin>
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40020000 	.word	0x40020000

08004768 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004772:	bf00      	nop
 8004774:	4808      	ldr	r0, [pc, #32]	; (8004798 <SPI_TxByte+0x30>)
 8004776:	f006 f923 	bl	800a9c0 <HAL_SPI_GetState>
 800477a:	4603      	mov	r3, r0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d1f9      	bne.n	8004774 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004780:	1df9      	adds	r1, r7, #7
 8004782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004786:	2201      	movs	r2, #1
 8004788:	4803      	ldr	r0, [pc, #12]	; (8004798 <SPI_TxByte+0x30>)
 800478a:	f005 fd98 	bl	800a2be <HAL_SPI_Transmit>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	2001cc7c 	.word	0x2001cc7c

0800479c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80047a2:	23ff      	movs	r3, #255	; 0xff
 80047a4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80047aa:	bf00      	nop
 80047ac:	4809      	ldr	r0, [pc, #36]	; (80047d4 <SPI_RxByte+0x38>)
 80047ae:	f006 f907 	bl	800a9c0 <HAL_SPI_GetState>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d1f9      	bne.n	80047ac <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80047b8:	1dba      	adds	r2, r7, #6
 80047ba:	1df9      	adds	r1, r7, #7
 80047bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2301      	movs	r3, #1
 80047c4:	4803      	ldr	r0, [pc, #12]	; (80047d4 <SPI_RxByte+0x38>)
 80047c6:	f005 fee8 	bl	800a59a <HAL_SPI_TransmitReceive>

  return data;
 80047ca:	79bb      	ldrb	r3, [r7, #6]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2001cc7c 	.word	0x2001cc7c

080047d8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80047e0:	f7ff ffdc 	bl	800479c <SPI_RxByte>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	701a      	strb	r2, [r3, #0]
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <SD_ReadyWait+0x34>)
 80047fc:	2232      	movs	r2, #50	; 0x32
 80047fe:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8004800:	f7ff ffcc 	bl	800479c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8004804:	f7ff ffca 	bl	800479c <SPI_RxByte>
 8004808:	4603      	mov	r3, r0
 800480a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	2bff      	cmp	r3, #255	; 0xff
 8004810:	d004      	beq.n	800481c <SD_ReadyWait+0x28>
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <SD_ReadyWait+0x34>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f3      	bne.n	8004804 <SD_ReadyWait+0x10>

  return res;
 800481c:	79fb      	ldrb	r3, [r7, #7]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	2001cce2 	.word	0x2001cce2

0800482c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8004832:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004836:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8004838:	f7ff ff8a 	bl	8004750 <DESELECT>

  for(int i = 0; i < 10; i++)
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e005      	b.n	800484e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004842:	20ff      	movs	r0, #255	; 0xff
 8004844:	f7ff ff90 	bl	8004768 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3301      	adds	r3, #1
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b09      	cmp	r3, #9
 8004852:	ddf6      	ble.n	8004842 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8004854:	f7ff ff70 	bl	8004738 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800486c:	2395      	movs	r3, #149	; 0x95
 800486e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e009      	b.n	800488a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff ff72 	bl	8004768 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b05      	cmp	r3, #5
 800488e:	ddf2      	ble.n	8004876 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8004890:	e002      	b.n	8004898 <SD_PowerOn+0x6c>
  {
    Count--;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3b01      	subs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8004898:	f7ff ff80 	bl	800479c <SPI_RxByte>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d002      	beq.n	80048a8 <SD_PowerOn+0x7c>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f4      	bne.n	8004892 <SD_PowerOn+0x66>
  }

  DESELECT();
 80048a8:	f7ff ff52 	bl	8004750 <DESELECT>
  SPI_TxByte(0XFF);
 80048ac:	20ff      	movs	r0, #255	; 0xff
 80048ae:	f7ff ff5b 	bl	8004768 <SPI_TxByte>

  PowerFlag = 1;
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <SD_PowerOn+0x94>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
}
 80048b8:	bf00      	nop
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200004d1 	.word	0x200004d1

080048c4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <SD_PowerOff+0x14>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	200004d1 	.word	0x200004d1

080048dc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <SD_CheckPower+0x14>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200004d1 	.word	0x200004d1

080048f4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <SD_RxDataBlock+0x68>)
 8004900:	220a      	movs	r2, #10
 8004902:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8004904:	f7ff ff4a 	bl	800479c <SPI_RxByte>
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2bff      	cmp	r3, #255	; 0xff
 8004910:	d104      	bne.n	800491c <SD_RxDataBlock+0x28>
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <SD_RxDataBlock+0x68>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f3      	bne.n	8004904 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2bfe      	cmp	r3, #254	; 0xfe
 8004920:	d001      	beq.n	8004926 <SD_RxDataBlock+0x32>
    return FALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	e016      	b.n	8004954 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff53 	bl	80047d8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff4d 	bl	80047d8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3b02      	subs	r3, #2
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ed      	bne.n	8004926 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800494a:	f7ff ff27 	bl	800479c <SPI_RxByte>
  SPI_RxByte();
 800494e:	f7ff ff25 	bl	800479c <SPI_RxByte>

  return TRUE;
 8004952:	2301      	movs	r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	2001cce1 	.word	0x2001cce1

08004960 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004970:	f7ff ff40 	bl	80047f4 <SD_ReadyWait>
 8004974:	4603      	mov	r3, r0
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d001      	beq.n	800497e <SD_TxDataBlock+0x1e>
    return FALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	e040      	b.n	8004a00 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fef1 	bl	8004768 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	2bfd      	cmp	r3, #253	; 0xfd
 800498a:	d031      	beq.n	80049f0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fee5 	bl	8004768 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fede 	bl	8004768 <SPI_TxByte>
    } while (--wc);
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	73bb      	strb	r3, [r7, #14]
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1eb      	bne.n	8004990 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80049b8:	f7ff fef0 	bl	800479c <SPI_RxByte>
    SPI_RxByte();
 80049bc:	f7ff feee 	bl	800479c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80049c0:	e00b      	b.n	80049da <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80049c2:	f7ff feeb 	bl	800479c <SPI_RxByte>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d006      	beq.n	80049e2 <SD_TxDataBlock+0x82>
        break;

      i++;
 80049d4:	7b7b      	ldrb	r3, [r7, #13]
 80049d6:	3301      	adds	r3, #1
 80049d8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80049da:	7b7b      	ldrb	r3, [r7, #13]
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d9f0      	bls.n	80049c2 <SD_TxDataBlock+0x62>
 80049e0:	e000      	b.n	80049e4 <SD_TxDataBlock+0x84>
        break;
 80049e2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80049e4:	bf00      	nop
 80049e6:	f7ff fed9 	bl	800479c <SPI_RxByte>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0fa      	beq.n	80049e6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d101      	bne.n	80049fe <SD_TxDataBlock+0x9e>
    return TRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004a14:	f7ff feee 	bl	80047f4 <SD_ReadyWait>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2bff      	cmp	r3, #255	; 0xff
 8004a1c:	d001      	beq.n	8004a22 <SD_SendCmd+0x1a>
    return 0xFF;
 8004a1e:	23ff      	movs	r3, #255	; 0xff
 8004a20:	e040      	b.n	8004aa4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fe9f 	bl	8004768 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fe99 	bl	8004768 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fe93 	bl	8004768 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fe8d 	bl	8004768 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fe88 	bl	8004768 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d101      	bne.n	8004a66 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8004a62:	2395      	movs	r3, #149	; 0x95
 8004a64:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b48      	cmp	r3, #72	; 0x48
 8004a6a:	d101      	bne.n	8004a70 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8004a6c:	2387      	movs	r3, #135	; 0x87
 8004a6e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fe78 	bl	8004768 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b4c      	cmp	r3, #76	; 0x4c
 8004a7c:	d101      	bne.n	8004a82 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8004a7e:	f7ff fe8d 	bl	800479c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8004a82:	230a      	movs	r3, #10
 8004a84:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8004a86:	f7ff fe89 	bl	800479c <SPI_RxByte>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004a8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da05      	bge.n	8004aa2 <SD_SendCmd+0x9a>
 8004a96:	7bbb      	ldrb	r3, [r7, #14]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	73bb      	strb	r3, [r7, #14]
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f1      	bne.n	8004a86 <SD_SendCmd+0x7e>

  return res;
 8004aa2:	7b7b      	ldrb	r3, [r7, #13]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0d5      	b.n	8004c6c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <SD_disk_initialize+0x1c8>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <SD_disk_initialize+0x2a>
    return Stat;
 8004ace:	4b69      	ldr	r3, [pc, #420]	; (8004c74 <SD_disk_initialize+0x1c8>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e0ca      	b.n	8004c6c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8004ad6:	f7ff fea9 	bl	800482c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8004ada:	f7ff fe2d 	bl	8004738 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	2040      	movs	r0, #64	; 0x40
 8004ae6:	f7ff ff8f 	bl	8004a08 <SD_SendCmd>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 80a5 	bne.w	8004c3c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8004af2:	4b61      	ldr	r3, [pc, #388]	; (8004c78 <SD_disk_initialize+0x1cc>)
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004af8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004afc:	2048      	movs	r0, #72	; 0x48
 8004afe:	f7ff ff83 	bl	8004a08 <SD_SendCmd>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d158      	bne.n	8004bba <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e00c      	b.n	8004b28 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8004b0e:	7bfc      	ldrb	r4, [r7, #15]
 8004b10:	f7ff fe44 	bl	800479c <SPI_RxByte>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	f104 0310 	add.w	r3, r4, #16
 8004b1c:	443b      	add	r3, r7
 8004b1e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3301      	adds	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d9ef      	bls.n	8004b0e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004b2e:	7abb      	ldrb	r3, [r7, #10]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 8083 	bne.w	8004c3c <SD_disk_initialize+0x190>
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	2baa      	cmp	r3, #170	; 0xaa
 8004b3a:	d17f      	bne.n	8004c3c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2077      	movs	r0, #119	; 0x77
 8004b40:	f7ff ff62 	bl	8004a08 <SD_SendCmd>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d807      	bhi.n	8004b5a <SD_disk_initialize+0xae>
 8004b4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b4e:	2069      	movs	r0, #105	; 0x69
 8004b50:	f7ff ff5a 	bl	8004a08 <SD_SendCmd>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <SD_disk_initialize+0x1cc>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1eb      	bne.n	8004b3c <SD_disk_initialize+0x90>
 8004b64:	e000      	b.n	8004b68 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8004b66:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <SD_disk_initialize+0x1cc>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d064      	beq.n	8004c3c <SD_disk_initialize+0x190>
 8004b72:	2100      	movs	r1, #0
 8004b74:	207a      	movs	r0, #122	; 0x7a
 8004b76:	f7ff ff47 	bl	8004a08 <SD_SendCmd>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d15d      	bne.n	8004c3c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004b80:	2300      	movs	r3, #0
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e00c      	b.n	8004ba0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8004b86:	7bfc      	ldrb	r4, [r7, #15]
 8004b88:	f7ff fe08 	bl	800479c <SPI_RxByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f104 0310 	add.w	r3, r4, #16
 8004b94:	443b      	add	r3, r7
 8004b96:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d9ef      	bls.n	8004b86 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8004ba6:	7a3b      	ldrb	r3, [r7, #8]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <SD_disk_initialize+0x108>
 8004bb0:	2306      	movs	r3, #6
 8004bb2:	e000      	b.n	8004bb6 <SD_disk_initialize+0x10a>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	73bb      	strb	r3, [r7, #14]
 8004bb8:	e040      	b.n	8004c3c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8004bba:	2100      	movs	r1, #0
 8004bbc:	2077      	movs	r0, #119	; 0x77
 8004bbe:	f7ff ff23 	bl	8004a08 <SD_SendCmd>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d808      	bhi.n	8004bda <SD_disk_initialize+0x12e>
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2069      	movs	r0, #105	; 0x69
 8004bcc:	f7ff ff1c 	bl	8004a08 <SD_SendCmd>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d801      	bhi.n	8004bda <SD_disk_initialize+0x12e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e000      	b.n	8004bdc <SD_disk_initialize+0x130>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d10e      	bne.n	8004c02 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004be4:	2100      	movs	r1, #0
 8004be6:	2077      	movs	r0, #119	; 0x77
 8004be8:	f7ff ff0e 	bl	8004a08 <SD_SendCmd>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d80e      	bhi.n	8004c10 <SD_disk_initialize+0x164>
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2069      	movs	r0, #105	; 0x69
 8004bf6:	f7ff ff07 	bl	8004a08 <SD_SendCmd>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8004c00:	e00d      	b.n	8004c1e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8004c02:	2100      	movs	r1, #0
 8004c04:	2041      	movs	r0, #65	; 0x41
 8004c06:	f7ff feff 	bl	8004a08 <SD_SendCmd>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <SD_disk_initialize+0x1cc>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e1      	bne.n	8004bde <SD_disk_initialize+0x132>
 8004c1a:	e000      	b.n	8004c1e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8004c1c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <SD_disk_initialize+0x1cc>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <SD_disk_initialize+0x18c>
 8004c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c2c:	2050      	movs	r0, #80	; 0x50
 8004c2e:	f7ff feeb 	bl	8004a08 <SD_SendCmd>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8004c3c:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <SD_disk_initialize+0x1d0>)
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8004c42:	f7ff fd85 	bl	8004750 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8004c46:	f7ff fda9 	bl	800479c <SPI_RxByte>

  if (type)
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <SD_disk_initialize+0x1c8>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <SD_disk_initialize+0x1c8>)
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e001      	b.n	8004c66 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8004c62:	f7ff fe2f 	bl	80048c4 <SD_PowerOff>
  }

  return Stat;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <SD_disk_initialize+0x1c8>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	20000004 	.word	0x20000004
 8004c78:	2001cce1 	.word	0x2001cce1
 8004c7c:	200004d0 	.word	0x200004d0

08004c80 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <SD_disk_status+0x14>
    return STA_NOINIT;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e002      	b.n	8004c9a <SD_disk_status+0x1a>

  return Stat;
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <SD_disk_status+0x28>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000004 	.word	0x20000004

08004cac <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <SD_disk_read+0x1c>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <SD_disk_read+0x20>
    return RES_PARERR;
 8004cc8:	2304      	movs	r3, #4
 8004cca:	e051      	b.n	8004d70 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8004ccc:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <SD_disk_read+0xcc>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <SD_disk_read+0x32>
    return RES_NOTRDY;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e048      	b.n	8004d70 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <SD_disk_read+0xd0>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	607b      	str	r3, [r7, #4]

  SELECT();
 8004cf0:	f7ff fd22 	bl	8004738 <SELECT>

  if (count == 1)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d111      	bne.n	8004d1e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	2051      	movs	r0, #81	; 0x51
 8004cfe:	f7ff fe83 	bl	8004a08 <SD_SendCmd>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d129      	bne.n	8004d5c <SD_disk_read+0xb0>
 8004d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d0c:	68b8      	ldr	r0, [r7, #8]
 8004d0e:	f7ff fdf1 	bl	80048f4 <SD_RxDataBlock>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d021      	beq.n	8004d5c <SD_disk_read+0xb0>
      count = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	e01e      	b.n	8004d5c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	2052      	movs	r0, #82	; 0x52
 8004d22:	f7ff fe71 	bl	8004a08 <SD_SendCmd>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d117      	bne.n	8004d5c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8004d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f7ff fddf 	bl	80048f4 <SD_RxDataBlock>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d42:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ed      	bne.n	8004d2c <SD_disk_read+0x80>
 8004d50:	e000      	b.n	8004d54 <SD_disk_read+0xa8>
          break;
 8004d52:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8004d54:	2100      	movs	r1, #0
 8004d56:	204c      	movs	r0, #76	; 0x4c
 8004d58:	f7ff fe56 	bl	8004a08 <SD_SendCmd>
    }
  }

  DESELECT();
 8004d5c:	f7ff fcf8 	bl	8004750 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8004d60:	f7ff fd1c 	bl	800479c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000004 	.word	0x20000004
 8004d7c:	200004d0 	.word	0x200004d0

08004d80 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <SD_disk_write+0x1c>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <SD_disk_write+0x20>
    return RES_PARERR;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	e06b      	b.n	8004e78 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <SD_disk_write+0x100>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e062      	b.n	8004e78 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <SD_disk_write+0x100>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <SD_disk_write+0x44>
    return RES_WRPRT;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e059      	b.n	8004e78 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <SD_disk_write+0x104>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	025b      	lsls	r3, r3, #9
 8004dd4:	607b      	str	r3, [r7, #4]

  SELECT();
 8004dd6:	f7ff fcaf 	bl	8004738 <SELECT>

  if (count == 1)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d110      	bne.n	8004e02 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	2058      	movs	r0, #88	; 0x58
 8004de4:	f7ff fe10 	bl	8004a08 <SD_SendCmd>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13a      	bne.n	8004e64 <SD_disk_write+0xe4>
 8004dee:	21fe      	movs	r1, #254	; 0xfe
 8004df0:	68b8      	ldr	r0, [r7, #8]
 8004df2:	f7ff fdb5 	bl	8004960 <SD_TxDataBlock>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d033      	beq.n	8004e64 <SD_disk_write+0xe4>
      count = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	e030      	b.n	8004e64 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <SD_disk_write+0x104>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2077      	movs	r0, #119	; 0x77
 8004e12:	f7ff fdf9 	bl	8004a08 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	2057      	movs	r0, #87	; 0x57
 8004e1a:	f7ff fdf5 	bl	8004a08 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	2059      	movs	r0, #89	; 0x59
 8004e22:	f7ff fdf1 	bl	8004a08 <SD_SendCmd>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11b      	bne.n	8004e64 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8004e2c:	21fc      	movs	r1, #252	; 0xfc
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7ff fd96 	bl	8004960 <SD_TxDataBlock>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e40:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <SD_disk_write+0xac>
 8004e4e:	e000      	b.n	8004e52 <SD_disk_write+0xd2>
          break;
 8004e50:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8004e52:	21fd      	movs	r1, #253	; 0xfd
 8004e54:	2000      	movs	r0, #0
 8004e56:	f7ff fd83 	bl	8004960 <SD_TxDataBlock>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <SD_disk_write+0xe4>
      {
        count = 1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8004e64:	f7ff fc74 	bl	8004750 <DESELECT>
  SPI_RxByte();
 8004e68:	f7ff fc98 	bl	800479c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000004 	.word	0x20000004
 8004e84:	200004d0 	.word	0x200004d0

08004e88 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b08b      	sub	sp, #44	; 0x2c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	603a      	str	r2, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
 8004e94:	460b      	mov	r3, r1
 8004e96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	e11b      	b.n	80050de <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8004eac:	79bb      	ldrb	r3, [r7, #6]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d129      	bne.n	8004f06 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d017      	beq.n	8004eea <SD_disk_ioctl+0x62>
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	dc1f      	bgt.n	8004efe <SD_disk_ioctl+0x76>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <SD_disk_ioctl+0x40>
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d00b      	beq.n	8004ede <SD_disk_ioctl+0x56>
 8004ec6:	e01a      	b.n	8004efe <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8004ec8:	f7ff fd08 	bl	80048dc <SD_CheckPower>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8004ed2:	f7ff fcf7 	bl	80048c4 <SD_PowerOff>
      res = RES_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004edc:	e0fd      	b.n	80050da <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8004ede:	f7ff fca5 	bl	800482c <SD_PowerOn>
      res = RES_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004ee8:	e0f7      	b.n	80050da <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	1c5c      	adds	r4, r3, #1
 8004eee:	f7ff fcf5 	bl	80048dc <SD_CheckPower>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004efc:	e0ed      	b.n	80050da <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8004efe:	2304      	movs	r3, #4
 8004f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f04:	e0e9      	b.n	80050da <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8004f06:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <SD_disk_ioctl+0x260>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0e2      	b.n	80050de <SD_disk_ioctl+0x256>

    SELECT();
 8004f18:	f7ff fc0e 	bl	8004738 <SELECT>

    switch (ctrl)
 8004f1c:	79bb      	ldrb	r3, [r7, #6]
 8004f1e:	2b0d      	cmp	r3, #13
 8004f20:	f200 80cc 	bhi.w	80050bc <SD_disk_ioctl+0x234>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <SD_disk_ioctl+0xa4>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08005027 	.word	0x08005027
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08005017 	.word	0x08005017
 8004f38:	080050bd 	.word	0x080050bd
 8004f3c:	080050bd 	.word	0x080050bd
 8004f40:	080050bd 	.word	0x080050bd
 8004f44:	080050bd 	.word	0x080050bd
 8004f48:	080050bd 	.word	0x080050bd
 8004f4c:	080050bd 	.word	0x080050bd
 8004f50:	080050bd 	.word	0x080050bd
 8004f54:	080050bd 	.word	0x080050bd
 8004f58:	08005039 	.word	0x08005039
 8004f5c:	0800505d 	.word	0x0800505d
 8004f60:	08005081 	.word	0x08005081
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004f64:	2100      	movs	r1, #0
 8004f66:	2049      	movs	r0, #73	; 0x49
 8004f68:	f7ff fd4e 	bl	8004a08 <SD_SendCmd>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 80a8 	bne.w	80050c4 <SD_disk_ioctl+0x23c>
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	2110      	movs	r1, #16
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fcba 	bl	80048f4 <SD_RxDataBlock>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 809e 	beq.w	80050c4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8004f88:	7b3b      	ldrb	r3, [r7, #12]
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10e      	bne.n	8004fb0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004f92:	7d7b      	ldrb	r3, [r7, #21]
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	7d3b      	ldrb	r3, [r7, #20]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004fa6:	8bfb      	ldrh	r3, [r7, #30]
 8004fa8:	029a      	lsls	r2, r3, #10
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e02e      	b.n	800500e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004fb0:	7c7b      	ldrb	r3, [r7, #17]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	7dbb      	ldrb	r3, [r7, #22]
 8004fba:	09db      	lsrs	r3, r3, #7
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	7d7b      	ldrb	r3, [r7, #21]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0306 	and.w	r3, r3, #6
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004fd8:	7d3b      	ldrb	r3, [r7, #20]
 8004fda:	099b      	lsrs	r3, r3, #6
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	7cbb      	ldrb	r3, [r7, #18]
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005000:	8bfa      	ldrh	r2, [r7, #30]
 8005002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005006:	3b09      	subs	r3, #9
 8005008:	409a      	lsls	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8005014:	e056      	b.n	80050c4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005024:	e055      	b.n	80050d2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8005026:	f7ff fbe5 	bl	80047f4 <SD_ReadyWait>
 800502a:	4603      	mov	r3, r0
 800502c:	2bff      	cmp	r3, #255	; 0xff
 800502e:	d14b      	bne.n	80050c8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005036:	e047      	b.n	80050c8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8005038:	2100      	movs	r1, #0
 800503a:	2049      	movs	r0, #73	; 0x49
 800503c:	f7ff fce4 	bl	8004a08 <SD_SendCmd>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d142      	bne.n	80050cc <SD_disk_ioctl+0x244>
 8005046:	2110      	movs	r1, #16
 8005048:	6a38      	ldr	r0, [r7, #32]
 800504a:	f7ff fc53 	bl	80048f4 <SD_RxDataBlock>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03b      	beq.n	80050cc <SD_disk_ioctl+0x244>
        res = RES_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800505a:	e037      	b.n	80050cc <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800505c:	2100      	movs	r1, #0
 800505e:	204a      	movs	r0, #74	; 0x4a
 8005060:	f7ff fcd2 	bl	8004a08 <SD_SendCmd>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d132      	bne.n	80050d0 <SD_disk_ioctl+0x248>
 800506a:	2110      	movs	r1, #16
 800506c:	6a38      	ldr	r0, [r7, #32]
 800506e:	f7ff fc41 	bl	80048f4 <SD_RxDataBlock>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02b      	beq.n	80050d0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800507e:	e027      	b.n	80050d0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8005080:	2100      	movs	r1, #0
 8005082:	207a      	movs	r0, #122	; 0x7a
 8005084:	f7ff fcc0 	bl	8004a08 <SD_SendCmd>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800508e:	2300      	movs	r3, #0
 8005090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005094:	e00b      	b.n	80050ae <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8005096:	6a3c      	ldr	r4, [r7, #32]
 8005098:	1c63      	adds	r3, r4, #1
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	f7ff fb7e 	bl	800479c <SPI_RxByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80050a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050a8:	3301      	adds	r3, #1
 80050aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d9ef      	bls.n	8005096 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050c2:	e006      	b.n	80050d2 <SD_disk_ioctl+0x24a>
      break;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <SD_disk_ioctl+0x24a>
      break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <SD_disk_ioctl+0x24a>
      break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <SD_disk_ioctl+0x24a>
      break;
 80050d0:	bf00      	nop
    }

    DESELECT();
 80050d2:	f7ff fb3d 	bl	8004750 <DESELECT>
    SPI_RxByte();
 80050d6:	f7ff fb61 	bl	800479c <SPI_RxByte>
  }

  return res;
 80050da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80050de:	4618      	mov	r0, r3
 80050e0:	372c      	adds	r7, #44	; 0x2c
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd90      	pop	{r4, r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000004 	.word	0x20000004

080050ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f2:	f107 031c 	add.w	r3, r7, #28
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005102:	4b68      	ldr	r3, [pc, #416]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a67      	ldr	r2, [pc, #412]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800511a:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	4a61      	ldr	r2, [pc, #388]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	6313      	str	r3, [r2, #48]	; 0x30
 8005126:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a5b      	ldr	r2, [pc, #364]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514a:	4b56      	ldr	r3, [pc, #344]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a55      	ldr	r2, [pc, #340]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005162:	4b50      	ldr	r3, [pc, #320]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a4f      	ldr	r2, [pc, #316]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005168:	f043 0308 	orr.w	r3, r3, #8
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800517a:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	4a49      	ldr	r2, [pc, #292]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005184:	6313      	str	r3, [r2, #48]	; 0x30
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <MX_GPIO_Init+0x1b8>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005192:	2200      	movs	r2, #0
 8005194:	f244 0181 	movw	r1, #16513	; 0x4081
 8005198:	4843      	ldr	r0, [pc, #268]	; (80052a8 <MX_GPIO_Init+0x1bc>)
 800519a:	f003 f821 	bl	80081e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800519e:	2200      	movs	r2, #0
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	4842      	ldr	r0, [pc, #264]	; (80052ac <MX_GPIO_Init+0x1c0>)
 80051a4:	f003 f81c 	bl	80081e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80051a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80051b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80051b8:	f107 031c 	add.w	r3, r7, #28
 80051bc:	4619      	mov	r1, r3
 80051be:	483c      	ldr	r0, [pc, #240]	; (80052b0 <MX_GPIO_Init+0x1c4>)
 80051c0:	f002 fe4a 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80051c4:	2332      	movs	r3, #50	; 0x32
 80051c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d0:	2303      	movs	r3, #3
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051d4:	230b      	movs	r3, #11
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d8:	f107 031c 	add.w	r3, r7, #28
 80051dc:	4619      	mov	r1, r3
 80051de:	4834      	ldr	r0, [pc, #208]	; (80052b0 <MX_GPIO_Init+0x1c4>)
 80051e0:	f002 fe3a 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80051e4:	2386      	movs	r3, #134	; 0x86
 80051e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e8:	2302      	movs	r3, #2
 80051ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f0:	2303      	movs	r3, #3
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051f4:	230b      	movs	r3, #11
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f8:	f107 031c 	add.w	r3, r7, #28
 80051fc:	4619      	mov	r1, r3
 80051fe:	482d      	ldr	r0, [pc, #180]	; (80052b4 <MX_GPIO_Init+0x1c8>)
 8005200:	f002 fe2a 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005204:	f244 0381 	movw	r3, #16513	; 0x4081
 8005208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800520a:	2301      	movs	r3, #1
 800520c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005216:	f107 031c 	add.w	r3, r7, #28
 800521a:	4619      	mov	r1, r3
 800521c:	4822      	ldr	r0, [pc, #136]	; (80052a8 <MX_GPIO_Init+0x1bc>)
 800521e:	f002 fe1b 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	2302      	movs	r3, #2
 800522a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522c:	2300      	movs	r3, #0
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005230:	2303      	movs	r3, #3
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005234:	230b      	movs	r3, #11
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	4619      	mov	r1, r3
 800523e:	481a      	ldr	r0, [pc, #104]	; (80052a8 <MX_GPIO_Init+0x1bc>)
 8005240:	f002 fe0a 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005248:	2301      	movs	r3, #1
 800524a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2300      	movs	r3, #0
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005254:	f107 031c 	add.w	r3, r7, #28
 8005258:	4619      	mov	r1, r3
 800525a:	4814      	ldr	r0, [pc, #80]	; (80052ac <MX_GPIO_Init+0x1c0>)
 800525c:	f002 fdfc 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005264:	2300      	movs	r3, #0
 8005266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800526c:	f107 031c 	add.w	r3, r7, #28
 8005270:	4619      	mov	r1, r3
 8005272:	480e      	ldr	r0, [pc, #56]	; (80052ac <MX_GPIO_Init+0x1c0>)
 8005274:	f002 fdf0 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005278:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800527c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	2302      	movs	r3, #2
 8005280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005286:	2303      	movs	r3, #3
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800528a:	230b      	movs	r3, #11
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800528e:	f107 031c 	add.w	r3, r7, #28
 8005292:	4619      	mov	r1, r3
 8005294:	4805      	ldr	r0, [pc, #20]	; (80052ac <MX_GPIO_Init+0x1c0>)
 8005296:	f002 fddf 	bl	8007e58 <HAL_GPIO_Init>

}
 800529a:	bf00      	nop
 800529c:	3730      	adds	r7, #48	; 0x30
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40021800 	.word	0x40021800
 80052b0:	40020800 	.word	0x40020800
 80052b4:	40020000 	.word	0x40020000

080052b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <MX_I2C1_Init+0x74>)
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <MX_I2C1_Init+0x78>)
 80052c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <MX_I2C1_Init+0x74>)
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <MX_I2C1_Init+0x7c>)
 80052c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052c8:	4b18      	ldr	r3, [pc, #96]	; (800532c <MX_I2C1_Init+0x74>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052ce:	4b17      	ldr	r3, [pc, #92]	; (800532c <MX_I2C1_Init+0x74>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <MX_I2C1_Init+0x74>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052da:	4b14      	ldr	r3, [pc, #80]	; (800532c <MX_I2C1_Init+0x74>)
 80052dc:	2200      	movs	r2, #0
 80052de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <MX_I2C1_Init+0x74>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <MX_I2C1_Init+0x74>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <MX_I2C1_Init+0x74>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052f2:	480e      	ldr	r0, [pc, #56]	; (800532c <MX_I2C1_Init+0x74>)
 80052f4:	f002 ffa8 	bl	8008248 <HAL_I2C_Init>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80052fe:	f001 fff9 	bl	80072f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005302:	2100      	movs	r1, #0
 8005304:	4809      	ldr	r0, [pc, #36]	; (800532c <MX_I2C1_Init+0x74>)
 8005306:	f003 fc85 	bl	8008c14 <HAL_I2CEx_ConfigAnalogFilter>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005310:	f001 fff0 	bl	80072f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005314:	2100      	movs	r1, #0
 8005316:	4805      	ldr	r0, [pc, #20]	; (800532c <MX_I2C1_Init+0x74>)
 8005318:	f003 fcc7 	bl	8008caa <HAL_I2CEx_ConfigDigitalFilter>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005322:	f001 ffe7 	bl	80072f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200004d4 	.word	0x200004d4
 8005330:	40005400 	.word	0x40005400
 8005334:	00808cd2 	.word	0x00808cd2

08005338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b0aa      	sub	sp, #168	; 0xa8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005340:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	2284      	movs	r2, #132	; 0x84
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f00b f976 	bl	801064a <memset>
  if(i2cHandle->Instance==I2C1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_I2C_MspInit+0xb4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d13c      	bne.n	80053e2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800536c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800536e:	2300      	movs	r3, #0
 8005370:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	4618      	mov	r0, r3
 8005378:	f004 fb06 	bl	8009988 <HAL_RCCEx_PeriphCLKConfig>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005382:	f001 ffb7 	bl	80072f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800539e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80053a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053a6:	2312      	movs	r3, #18
 80053a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b2:	2303      	movs	r3, #3
 80053b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053b8:	2304      	movs	r3, #4
 80053ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053c2:	4619      	mov	r1, r3
 80053c4:	480b      	ldr	r0, [pc, #44]	; (80053f4 <HAL_I2C_MspInit+0xbc>)
 80053c6:	f002 fd47 	bl	8007e58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 80053d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d4:	6413      	str	r3, [r2, #64]	; 0x40
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_I2C_MspInit+0xb8>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80053e2:	bf00      	nop
 80053e4:	37a8      	adds	r7, #168	; 0xa8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40005400 	.word	0x40005400
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020400 	.word	0x40020400

080053f8 <filtr_raw_data>:

float32_t iir_state_orientation_low[4]={0., 0., 0., 0.};
arm_biquad_casd_df1_inst_f32 iir_filter_orientation_low;

void filtr_raw_data()
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	for(int i=0; i<sample_number; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e074      	b.n	80054ee <filtr_raw_data+0xf6>
	{
		float actual = gyro_data[0][i];
 8005404:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <filtr_raw_data+0x10c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_gyro_x_low, &actual, &gyro_data[0][i], 1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <filtr_raw_data+0x10c>)
 8005416:	441a      	add	r2, r3
 8005418:	4639      	mov	r1, r7
 800541a:	2301      	movs	r3, #1
 800541c:	483a      	ldr	r0, [pc, #232]	; (8005508 <filtr_raw_data+0x110>)
 800541e:	f00a fa8f 	bl	800f940 <arm_biquad_cascade_df1_f32>
		actual = gyro_data[1][i];
 8005422:	4938      	ldr	r1, [pc, #224]	; (8005504 <filtr_raw_data+0x10c>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	f241 1394 	movw	r3, #4500	; 0x1194
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_gyro_y_low, &actual, &gyro_data[1][i], 1);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	f241 1394 	movw	r3, #4500	; 0x1194
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4a31      	ldr	r2, [pc, #196]	; (8005504 <filtr_raw_data+0x10c>)
 8005440:	441a      	add	r2, r3
 8005442:	4639      	mov	r1, r7
 8005444:	2301      	movs	r3, #1
 8005446:	4831      	ldr	r0, [pc, #196]	; (800550c <filtr_raw_data+0x114>)
 8005448:	f00a fa7a 	bl	800f940 <arm_biquad_cascade_df1_f32>
		actual = gyro_data[2][i];
 800544c:	492d      	ldr	r1, [pc, #180]	; (8005504 <filtr_raw_data+0x10c>)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	f242 3328 	movw	r3, #9000	; 0x2328
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_gyro_z_low, &actual, &gyro_data[2][i], 1);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	f242 3328 	movw	r3, #9000	; 0x2328
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <filtr_raw_data+0x10c>)
 800546a:	441a      	add	r2, r3
 800546c:	4639      	mov	r1, r7
 800546e:	2301      	movs	r3, #1
 8005470:	4827      	ldr	r0, [pc, #156]	; (8005510 <filtr_raw_data+0x118>)
 8005472:	f00a fa65 	bl	800f940 <arm_biquad_cascade_df1_f32>
		actual = acc_data[0][i];
 8005476:	4a27      	ldr	r2, [pc, #156]	; (8005514 <filtr_raw_data+0x11c>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_acc_x_low, &actual, &acc_data[0][i], 1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a23      	ldr	r2, [pc, #140]	; (8005514 <filtr_raw_data+0x11c>)
 8005488:	441a      	add	r2, r3
 800548a:	4639      	mov	r1, r7
 800548c:	2301      	movs	r3, #1
 800548e:	4822      	ldr	r0, [pc, #136]	; (8005518 <filtr_raw_data+0x120>)
 8005490:	f00a fa56 	bl	800f940 <arm_biquad_cascade_df1_f32>
		actual = acc_data[1][i];
 8005494:	491f      	ldr	r1, [pc, #124]	; (8005514 <filtr_raw_data+0x11c>)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	f241 1394 	movw	r3, #4500	; 0x1194
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_acc_y_low, &actual, &acc_data[1][i], 1);
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	f241 1394 	movw	r3, #4500	; 0x1194
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <filtr_raw_data+0x11c>)
 80054b2:	441a      	add	r2, r3
 80054b4:	4639      	mov	r1, r7
 80054b6:	2301      	movs	r3, #1
 80054b8:	4818      	ldr	r0, [pc, #96]	; (800551c <filtr_raw_data+0x124>)
 80054ba:	f00a fa41 	bl	800f940 <arm_biquad_cascade_df1_f32>
		actual = acc_data[2][i];
 80054be:	4915      	ldr	r1, [pc, #84]	; (8005514 <filtr_raw_data+0x11c>)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	f242 3328 	movw	r3, #9000	; 0x2328
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	603b      	str	r3, [r7, #0]
		arm_biquad_cascade_df1_f32(&iir_filter_acc_z_low, &actual, &acc_data[2][i], 1);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	f242 3328 	movw	r3, #9000	; 0x2328
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <filtr_raw_data+0x11c>)
 80054dc:	441a      	add	r2, r3
 80054de:	4639      	mov	r1, r7
 80054e0:	2301      	movs	r3, #1
 80054e2:	480f      	ldr	r0, [pc, #60]	; (8005520 <filtr_raw_data+0x128>)
 80054e4:	f00a fa2c 	bl	800f940 <arm_biquad_cascade_df1_f32>
	for(int i=0; i<sample_number; i++)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3301      	adds	r3, #1
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <filtr_raw_data+0x12c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	db85      	blt.n	8005404 <filtr_raw_data+0xc>
	}
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2000f8ac 	.word	0x2000f8ac
 8005508:	2001cbfc 	.word	0x2001cbfc
 800550c:	2001cc08 	.word	0x2001cc08
 8005510:	2001cc14 	.word	0x2001cc14
 8005514:	200025bc 	.word	0x200025bc
 8005518:	2001cc20 	.word	0x2001cc20
 800551c:	2001cc2c 	.word	0x2001cc2c
 8005520:	2001cc38 	.word	0x2001cc38
 8005524:	200025b8 	.word	0x200025b8

08005528 <calc_total_acc>:

void calc_total_acc(float acc_total[])
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<sample_number; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e050      	b.n	80055d8 <calc_total_acc+0xb0>
	{
		acc_total[i] = sqrt(acc_data[0][i]*acc_data[0][i]+acc_data[1][i]*acc_data[1][i]+acc_data[2][i]*acc_data[2][i]);
 8005536:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <calc_total_acc+0xc4>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	ed93 7a00 	vldr	s14, [r3]
 8005542:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <calc_total_acc+0xc4>)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	edd3 7a00 	vldr	s15, [r3]
 800554e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005552:	4926      	ldr	r1, [pc, #152]	; (80055ec <calc_total_acc+0xc4>)
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f241 1394 	movw	r3, #4500	; 0x1194
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	edd3 6a00 	vldr	s13, [r3]
 8005564:	4921      	ldr	r1, [pc, #132]	; (80055ec <calc_total_acc+0xc4>)
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f241 1394 	movw	r3, #4500	; 0x1194
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	edd3 7a00 	vldr	s15, [r3]
 8005576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800557a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557e:	491b      	ldr	r1, [pc, #108]	; (80055ec <calc_total_acc+0xc4>)
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f242 3328 	movw	r3, #9000	; 0x2328
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	edd3 6a00 	vldr	s13, [r3]
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <calc_total_acc+0xc4>)
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f242 3328 	movw	r3, #9000	; 0x2328
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	edd3 7a00 	vldr	s15, [r3]
 80055a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055aa:	ee17 0a90 	vmov	r0, s15
 80055ae:	f7fa ffeb 	bl	8000588 <__aeabi_f2d>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	ec43 2b10 	vmov	d0, r2, r3
 80055ba:	f00d f941 	bl	8012840 <sqrt>
 80055be:	ec51 0b10 	vmov	r0, r1, d0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	18d4      	adds	r4, r2, r3
 80055ca:	f7fb fb0d 	bl	8000be8 <__aeabi_d2f>
 80055ce:	4603      	mov	r3, r0
 80055d0:	6023      	str	r3, [r4, #0]
	for(int i=0; i<sample_number; i++)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <calc_total_acc+0xc8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	429a      	cmp	r2, r3
 80055e0:	dba9      	blt.n	8005536 <calc_total_acc+0xe>
	}
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}
 80055ec:	200025bc 	.word	0x200025bc
 80055f0:	200025b8 	.word	0x200025b8

080055f4 <calc_mean>:

float calc_mean(float acc_total[], int number_of_samples)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	if(number_of_samples > sample_number)
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <calc_mean+0x78>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	dd02      	ble.n	800560e <calc_mean+0x1a>
	{
		number_of_samples = sample_number;
 8005608:	4b18      	ldr	r3, [pc, #96]	; (800566c <calc_mean+0x78>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	603b      	str	r3, [r7, #0]
	}

	float mean = 0.0;
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<number_of_samples; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	e00e      	b.n	8005638 <calc_mean+0x44>
	{
		mean += acc_total[i];
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	edd3 7a00 	vldr	s15, [r3]
 8005626:	ed97 7a03 	vldr	s14, [r7, #12]
 800562a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0; i<number_of_samples; i++)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	3301      	adds	r3, #1
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	dbec      	blt.n	800561a <calc_mean+0x26>
	}

	mean /= (float)number_of_samples;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800564a:	edd7 6a03 	vldr	s13, [r7, #12]
 800564e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005652:	edc7 7a03 	vstr	s15, [r7, #12]
	return mean;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	ee07 3a90 	vmov	s15, r3
}
 800565c:	eeb0 0a67 	vmov.f32	s0, s15
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	200025b8 	.word	0x200025b8

08005670 <filtr_total_acc>:

void filtr_total_acc(float acc_total[])
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	iir_state_acc_high[0] = calc_mean(acc_total, 100);	//set initial values x[n-1]
 8005678:	2164      	movs	r1, #100	; 0x64
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ffba 	bl	80055f4 <calc_mean>
 8005680:	eef0 7a40 	vmov.f32	s15, s0
 8005684:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <filtr_total_acc+0x64>)
 8005686:	edc3 7a00 	vstr	s15, [r3]
	iir_state_acc_high[1] = iir_state_acc_high[0];	//set initial values x[n-2]
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <filtr_total_acc+0x64>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <filtr_total_acc+0x64>)
 8005690:	6053      	str	r3, [r2, #4]

	for(int i=0; i<sample_number; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e012      	b.n	80056be <filtr_total_acc+0x4e>
	{
		float actual = acc_total[i];
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	4413      	add	r3, r2
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60bb      	str	r3, [r7, #8]
		arm_biquad_cascade_df1_f32(&iir_filter_acc_high, &actual, &acc_total[i], 1);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	441a      	add	r2, r3
 80056ac:	f107 0108 	add.w	r1, r7, #8
 80056b0:	2301      	movs	r3, #1
 80056b2:	4809      	ldr	r0, [pc, #36]	; (80056d8 <filtr_total_acc+0x68>)
 80056b4:	f00a f944 	bl	800f940 <arm_biquad_cascade_df1_f32>
	for(int i=0; i<sample_number; i++)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <filtr_total_acc+0x6c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	dbe7      	blt.n	8005698 <filtr_total_acc+0x28>
	}
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2001cc44 	.word	0x2001cc44
 80056d8:	2001cc54 	.word	0x2001cc54
 80056dc:	200025b8 	.word	0x200025b8

080056e0 <find_no_move>:

void find_no_move(float acc_total[], bool no_move[])
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	int counter_of_no_move = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

	for(int i=0; i<sample_number; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	e03a      	b.n	800576a <find_no_move+0x8a>
	{
		counter_of_no_move = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
		while(fabs(acc_total[i]) < 0.07 && i<sample_number)
 80056f8:	e005      	b.n	8005706 <find_no_move+0x26>
		{
			counter_of_no_move++;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	3301      	adds	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
			i++;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3301      	adds	r3, #1
 8005704:	613b      	str	r3, [r7, #16]
		while(fabs(acc_total[i]) < 0.07 && i<sample_number)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	edd3 7a00 	vldr	s15, [r3]
 8005712:	eef0 7ae7 	vabs.f32	s15, s15
 8005716:	ee17 0a90 	vmov	r0, s15
 800571a:	f7fa ff35 	bl	8000588 <__aeabi_f2d>
 800571e:	a321      	add	r3, pc, #132	; (adr r3, 80057a4 <find_no_move+0xc4>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fb f9fa 	bl	8000b1c <__aeabi_dcmplt>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <find_no_move+0x58>
 800572e:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <find_no_move+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	dbe0      	blt.n	80056fa <find_no_move+0x1a>
		}

		if(counter_of_no_move >= 60)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b3b      	cmp	r3, #59	; 0x3b
 800573c:	dd12      	ble.n	8005764 <find_no_move+0x84>
		{
			for(int j=0; j<counter_of_no_move; j++)
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e00b      	b.n	800575c <find_no_move+0x7c>
			{
				no_move[i-1-j] = 1;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1e5a      	subs	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	461a      	mov	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	4413      	add	r3, r2
 8005752:	2201      	movs	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<counter_of_no_move; j++)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	429a      	cmp	r2, r3
 8005762:	dbef      	blt.n	8005744 <find_no_move+0x64>
	for(int i=0; i<sample_number; i++)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3301      	adds	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <find_no_move+0xc0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	dbbf      	blt.n	80056f4 <find_no_move+0x14>
			}
		}
	}

	for(int i=0; i<250; i++)
 8005774:	2300      	movs	r3, #0
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	e007      	b.n	800578a <find_no_move+0xaa>
	{
		no_move[i] = 1;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	4413      	add	r3, r2
 8005780:	2201      	movs	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<250; i++)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3301      	adds	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2bf9      	cmp	r3, #249	; 0xf9
 800578e:	ddf4      	ble.n	800577a <find_no_move+0x9a>
	}
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	200025b8 	.word	0x200025b8
 80057a4:	1eb851ec 	.word	0x1eb851ec
 80057a8:	3fb1eb85 	.word	0x3fb1eb85
 80057ac:	00000000 	.word	0x00000000

080057b0 <calc_orientation>:

void calc_orientation(float orientation[3][max_sample_number], bool no_move[])
{
 80057b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
void calc_orientation(float orientation[3][max_sample_number], bool no_move[])
 80057bc:	f241 1394 	movw	r3, #4500	; 0x1194
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	f241 1394 	movw	r3, #4500	; 0x1194
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	016b      	lsls	r3, r5, #5
 80057da:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80057de:	0162      	lsls	r2, r4, #5
	orientation[0][0] = 0.0;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
	orientation[1][0] = 0.0;
 80057e8:	f241 1394 	movw	r3, #4500	; 0x1194
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
	orientation[2][0] = 0.0;
 80057f8:	f241 1394 	movw	r3, #4500	; 0x1194
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
	for(int i=1; i<sample_number; i++)
 8005808:	2301      	movs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e101      	b.n	8005a12 <calc_orientation+0x262>
	{
		if(!no_move[i])
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	4413      	add	r3, r2
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d064      	beq.n	80058ea <calc_orientation+0x13a>
		{
			orientation[0][i] = orientation[0][i-1] + gyro_data[0][i]*T;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b01      	subs	r3, #1
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	ed93 7a00 	vldr	s14, [r3]
 800582e:	4a82      	ldr	r2, [pc, #520]	; (8005a38 <calc_orientation+0x288>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	edd3 6a00 	vldr	s13, [r3]
 800583a:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <calc_orientation+0x28c>)
 800583c:	edd3 7a00 	vldr	s15, [r3]
 8005840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	edc3 7a00 	vstr	s15, [r3]
			orientation[1][i] = orientation[1][i-1] + gyro_data[1][i]*T;
 8005854:	f241 1394 	movw	r3, #4500	; 0x1194
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b01      	subs	r3, #1
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	ed93 7a00 	vldr	s14, [r3]
 800586a:	4973      	ldr	r1, [pc, #460]	; (8005a38 <calc_orientation+0x288>)
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f241 1394 	movw	r3, #4500	; 0x1194
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	edd3 6a00 	vldr	s13, [r3]
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <calc_orientation+0x28c>)
 800587e:	edd3 7a00 	vldr	s15, [r3]
 8005882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005886:	f241 1394 	movw	r3, #4500	; 0x1194
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	441a      	add	r2, r3
 8005890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	edc3 7a00 	vstr	s15, [r3]
			orientation[2][i] = orientation[2][i-1] + gyro_data[2][i]*T;
 800589e:	f241 1394 	movw	r3, #4500	; 0x1194
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	441a      	add	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	ed93 7a00 	vldr	s14, [r3]
 80058b4:	4960      	ldr	r1, [pc, #384]	; (8005a38 <calc_orientation+0x288>)
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f242 3328 	movw	r3, #9000	; 0x2328
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	edd3 6a00 	vldr	s13, [r3]
 80058c6:	4b5d      	ldr	r3, [pc, #372]	; (8005a3c <calc_orientation+0x28c>)
 80058c8:	edd3 7a00 	vldr	s15, [r3]
 80058cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d0:	f241 1394 	movw	r3, #4500	; 0x1194
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	441a      	add	r2, r3
 80058da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	edc3 7a00 	vstr	s15, [r3]
 80058e8:	e090      	b.n	8005a0c <calc_orientation+0x25c>
		}
		else
		{
			orientation[0][i] = atan2(acc_data[1][i], acc_data[2][i])*180/M_PI;
 80058ea:	4955      	ldr	r1, [pc, #340]	; (8005a40 <calc_orientation+0x290>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f241 1394 	movw	r3, #4500	; 0x1194
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fa fe44 	bl	8000588 <__aeabi_f2d>
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
 8005904:	494e      	ldr	r1, [pc, #312]	; (8005a40 <calc_orientation+0x290>)
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f242 3328 	movw	r3, #9000	; 0x2328
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fa fe37 	bl	8000588 <__aeabi_f2d>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	ec43 2b11 	vmov	d1, r2, r3
 8005922:	ec45 4b10 	vmov	d0, r4, r5
 8005926:	f00c ff89 	bl	801283c <atan2>
 800592a:	ec51 0b10 	vmov	r0, r1, d0
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <calc_orientation+0x294>)
 8005934:	f7fa fe80 	bl	8000638 <__aeabi_dmul>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	a33b      	add	r3, pc, #236	; (adr r3, 8005a30 <calc_orientation+0x280>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fa ffa1 	bl	800088c <__aeabi_ddiv>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	f7fb f949 	bl	8000be8 <__aeabi_d2f>
 8005956:	4601      	mov	r1, r0
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	6019      	str	r1, [r3, #0]
			orientation[1][i] = -atan2(acc_data[0][i], acc_data[2][i])*180/M_PI;
 8005962:	4a37      	ldr	r2, [pc, #220]	; (8005a40 <calc_orientation+0x290>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fa fe0b 	bl	8000588 <__aeabi_f2d>
 8005972:	4604      	mov	r4, r0
 8005974:	460d      	mov	r5, r1
 8005976:	4932      	ldr	r1, [pc, #200]	; (8005a40 <calc_orientation+0x290>)
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f242 3328 	movw	r3, #9000	; 0x2328
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fa fdfe 	bl	8000588 <__aeabi_f2d>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	ec43 2b11 	vmov	d1, r2, r3
 8005994:	ec45 4b10 	vmov	d0, r4, r5
 8005998:	f00c ff50 	bl	801283c <atan2>
 800599c:	ec53 2b10 	vmov	r2, r3, d0
 80059a0:	4690      	mov	r8, r2
 80059a2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <calc_orientation+0x294>)
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fa fe42 	bl	8000638 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	a31c      	add	r3, pc, #112	; (adr r3, 8005a30 <calc_orientation+0x280>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa ff63 	bl	800088c <__aeabi_ddiv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	f241 1394 	movw	r3, #4500	; 0x1194
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	18d4      	adds	r4, r2, r3
 80059d8:	f7fb f906 	bl	8000be8 <__aeabi_d2f>
 80059dc:	4602      	mov	r2, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4423      	add	r3, r4
 80059e4:	601a      	str	r2, [r3, #0]
			orientation[2][i] = orientation[2][i-1];
 80059e6:	f241 1394 	movw	r3, #4500	; 0x1194
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	f241 1194 	movw	r1, #4500	; 0x1194
 80059f8:	00c9      	lsls	r1, r1, #3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4401      	add	r1, r0
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	601a      	str	r2, [r3, #0]
	for(int i=1; i<sample_number; i++)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <calc_orientation+0x298>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	f6ff aef8 	blt.w	800580e <calc_orientation+0x5e>
		}
	}
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w
 8005a30:	54442d18 	.word	0x54442d18
 8005a34:	400921fb 	.word	0x400921fb
 8005a38:	2000f8ac 	.word	0x2000f8ac
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	200025bc 	.word	0x200025bc
 8005a44:	40668000 	.word	0x40668000
 8005a48:	200025b8 	.word	0x200025b8

08005a4c <filtr_orientation_z>:

void filtr_orientation_z(float orientation[3][max_sample_number])
{
 8005a4c:	b5b0      	push	{r4, r5, r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
void filtr_orientation_z(float orientation[3][max_sample_number])
 8005a54:	f241 1394 	movw	r3, #4500	; 0x1194
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	f241 1394 	movw	r3, #4500	; 0x1194
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	4614      	mov	r4, r2
 8005a66:	461d      	mov	r5, r3
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	016b      	lsls	r3, r5, #5
 8005a72:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005a76:	0162      	lsls	r2, r4, #5
	for(int i=0; i<sample_number; i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e01a      	b.n	8005ab4 <filtr_orientation_z+0x68>
	{
		float actual = orientation[2][i];
 8005a7e:	f241 1394 	movw	r3, #4500	; 0x1194
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	441a      	add	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
		arm_biquad_cascade_df1_f32(&iir_filter_orientation_low, &actual, &orientation[2][i], 1);
 8005a92:	f241 1394 	movw	r3, #4500	; 0x1194
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	441a      	add	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	f107 010c 	add.w	r1, r7, #12
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4807      	ldr	r0, [pc, #28]	; (8005ac8 <filtr_orientation_z+0x7c>)
 8005aaa:	f009 ff49 	bl	800f940 <arm_biquad_cascade_df1_f32>
	for(int i=0; i<sample_number; i++)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <filtr_orientation_z+0x80>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	dbdf      	blt.n	8005a7e <filtr_orientation_z+0x32>
	}
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac8:	2001cc70 	.word	0x2001cc70
 8005acc:	200025b8 	.word	0x200025b8

08005ad0 <rotation_of_axis>:

void rotation_of_axis(float orientation[3][max_sample_number])
{
 8005ad0:	b5b0      	push	{r4, r5, r7, lr}
 8005ad2:	b08e      	sub	sp, #56	; 0x38
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
void rotation_of_axis(float orientation[3][max_sample_number])
 8005ad8:	f241 1394 	movw	r3, #4500	; 0x1194
 8005adc:	3b01      	subs	r3, #1
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae0:	f241 1394 	movw	r3, #4500	; 0x1194
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	016b      	lsls	r3, r5, #5
 8005af6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005afa:	0162      	lsls	r2, r4, #5
	for(int i=0; i<sample_number; i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	e208      	b.n	8005f14 <rotation_of_axis+0x444>
	{
		float s1 = sin(-orientation[0][i]*M_PI/180);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	eef1 7a67 	vneg.f32	s15, s15
 8005b12:	ee17 3a90 	vmov	r3, s15
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fd36 	bl	8000588 <__aeabi_f2d>
 8005b1c:	a3de      	add	r3, pc, #888	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fd89 	bl	8000638 <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	4bdd      	ldr	r3, [pc, #884]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005b34:	f7fa feaa 	bl	800088c <__aeabi_ddiv>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	ec43 2b17 	vmov	d7, r2, r3
 8005b40:	eeb0 0a47 	vmov.f32	s0, s14
 8005b44:	eef0 0a67 	vmov.f32	s1, s15
 8005b48:	f00c fefa 	bl	8012940 <sin>
 8005b4c:	ec53 2b10 	vmov	r2, r3, d0
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f7fb f848 	bl	8000be8 <__aeabi_d2f>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		float c1 = cos(-orientation[0][i]*M_PI/180);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	eef1 7a67 	vneg.f32	s15, s15
 8005b6c:	ee17 3a90 	vmov	r3, s15
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fa fd09 	bl	8000588 <__aeabi_f2d>
 8005b76:	a3c8      	add	r3, pc, #800	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fd5c 	bl	8000638 <__aeabi_dmul>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4610      	mov	r0, r2
 8005b86:	4619      	mov	r1, r3
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	4bc6      	ldr	r3, [pc, #792]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005b8e:	f7fa fe7d 	bl	800088c <__aeabi_ddiv>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	ec43 2b17 	vmov	d7, r2, r3
 8005b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b9e:	eef0 0a67 	vmov.f32	s1, s15
 8005ba2:	f00c fe79 	bl	8012898 <cos>
 8005ba6:	ec53 2b10 	vmov	r2, r3, d0
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	f7fb f81b 	bl	8000be8 <__aeabi_d2f>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
		float s2 = sin(-orientation[1][i]*M_PI/180);
 8005bb6:	f241 1394 	movw	r3, #4500	; 0x1194
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	eef1 7a67 	vneg.f32	s15, s15
 8005bce:	ee17 3a90 	vmov	r3, s15
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fa fcd8 	bl	8000588 <__aeabi_f2d>
 8005bd8:	a3af      	add	r3, pc, #700	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fd2b 	bl	8000638 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	4bae      	ldr	r3, [pc, #696]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005bf0:	f7fa fe4c 	bl	800088c <__aeabi_ddiv>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	ec43 2b17 	vmov	d7, r2, r3
 8005bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8005c00:	eef0 0a67 	vmov.f32	s1, s15
 8005c04:	f00c fe9c 	bl	8012940 <sin>
 8005c08:	ec53 2b10 	vmov	r2, r3, d0
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f7fa ffea 	bl	8000be8 <__aeabi_d2f>
 8005c14:	4603      	mov	r3, r0
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
		float c2 = cos(-orientation[1][i]*M_PI/180);
 8005c18:	f241 1394 	movw	r3, #4500	; 0x1194
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	441a      	add	r2, r3
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	edd3 7a00 	vldr	s15, [r3]
 8005c2c:	eef1 7a67 	vneg.f32	s15, s15
 8005c30:	ee17 3a90 	vmov	r3, s15
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa fca7 	bl	8000588 <__aeabi_f2d>
 8005c3a:	a397      	add	r3, pc, #604	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fcfa 	bl	8000638 <__aeabi_dmul>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	4b95      	ldr	r3, [pc, #596]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005c52:	f7fa fe1b 	bl	800088c <__aeabi_ddiv>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	ec43 2b17 	vmov	d7, r2, r3
 8005c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c62:	eef0 0a67 	vmov.f32	s1, s15
 8005c66:	f00c fe17 	bl	8012898 <cos>
 8005c6a:	ec53 2b10 	vmov	r2, r3, d0
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	f7fa ffb9 	bl	8000be8 <__aeabi_d2f>
 8005c76:	4603      	mov	r3, r0
 8005c78:	623b      	str	r3, [r7, #32]
		float s3 = sin(-orientation[2][i]*M_PI/180);
 8005c7a:	f241 1394 	movw	r3, #4500	; 0x1194
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	441a      	add	r2, r3
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	edd3 7a00 	vldr	s15, [r3]
 8005c8e:	eef1 7a67 	vneg.f32	s15, s15
 8005c92:	ee17 3a90 	vmov	r3, s15
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fc76 	bl	8000588 <__aeabi_f2d>
 8005c9c:	a37e      	add	r3, pc, #504	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f7fa fcc9 	bl	8000638 <__aeabi_dmul>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	4b7d      	ldr	r3, [pc, #500]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005cb4:	f7fa fdea 	bl	800088c <__aeabi_ddiv>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	ec43 2b17 	vmov	d7, r2, r3
 8005cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8005cc4:	eef0 0a67 	vmov.f32	s1, s15
 8005cc8:	f00c fe3a 	bl	8012940 <sin>
 8005ccc:	ec53 2b10 	vmov	r2, r3, d0
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7fa ff88 	bl	8000be8 <__aeabi_d2f>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	61fb      	str	r3, [r7, #28]
		float c3 = cos(-orientation[2][i]*M_PI/180);
 8005cdc:	f241 1394 	movw	r3, #4500	; 0x1194
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	edd3 7a00 	vldr	s15, [r3]
 8005cf0:	eef1 7a67 	vneg.f32	s15, s15
 8005cf4:	ee17 3a90 	vmov	r3, s15
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fa fc45 	bl	8000588 <__aeabi_f2d>
 8005cfe:	a366      	add	r3, pc, #408	; (adr r3, 8005e98 <rotation_of_axis+0x3c8>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fc98 	bl	8000638 <__aeabi_dmul>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	4b64      	ldr	r3, [pc, #400]	; (8005ea8 <rotation_of_axis+0x3d8>)
 8005d16:	f7fa fdb9 	bl	800088c <__aeabi_ddiv>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	ec43 2b17 	vmov	d7, r2, r3
 8005d22:	eeb0 0a47 	vmov.f32	s0, s14
 8005d26:	eef0 0a67 	vmov.f32	s1, s15
 8005d2a:	f00c fdb5 	bl	8012898 <cos>
 8005d2e:	ec53 2b10 	vmov	r2, r3, d0
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fa ff57 	bl	8000be8 <__aeabi_d2f>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	61bb      	str	r3, [r7, #24]

		float accX = acc_data[0][i];
 8005d3e:	4a5b      	ldr	r2, [pc, #364]	; (8005eac <rotation_of_axis+0x3dc>)
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	617b      	str	r3, [r7, #20]
		float accY = acc_data[1][i];
 8005d4a:	4958      	ldr	r1, [pc, #352]	; (8005eac <rotation_of_axis+0x3dc>)
 8005d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4e:	f241 1394 	movw	r3, #4500	; 0x1194
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]
		float accZ = acc_data[2][i];
 8005d5c:	4953      	ldr	r1, [pc, #332]	; (8005eac <rotation_of_axis+0x3dc>)
 8005d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d60:	f242 3328 	movw	r3, #9000	; 0x2328
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]

		//rotation matrix
		acc_data[0][i] = (accX*c2 - accZ*s2)*9.81;
 8005d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d72:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7a:	edd7 6a03 	vldr	s13, [r7, #12]
 8005d7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d8a:	ee17 0a90 	vmov	r0, s15
 8005d8e:	f7fa fbfb 	bl	8000588 <__aeabi_f2d>
 8005d92:	a343      	add	r3, pc, #268	; (adr r3, 8005ea0 <rotation_of_axis+0x3d0>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fc4e 	bl	8000638 <__aeabi_dmul>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	f7fa ff20 	bl	8000be8 <__aeabi_d2f>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4940      	ldr	r1, [pc, #256]	; (8005eac <rotation_of_axis+0x3dc>)
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	601a      	str	r2, [r3, #0]
		acc_data[1][i] = (accY*c1 + accX*s1*s2 + accZ*c2*s1)*9.81;
 8005db4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005db8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dc0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005dc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dd8:	edd7 6a03 	vldr	s13, [r7, #12]
 8005ddc:	edd7 7a08 	vldr	s15, [r7, #32]
 8005de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df0:	ee17 0a90 	vmov	r0, s15
 8005df4:	f7fa fbc8 	bl	8000588 <__aeabi_f2d>
 8005df8:	a329      	add	r3, pc, #164	; (adr r3, 8005ea0 <rotation_of_axis+0x3d0>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f7fa fc1b 	bl	8000638 <__aeabi_dmul>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fa feed 	bl	8000be8 <__aeabi_d2f>
 8005e0e:	4601      	mov	r1, r0
 8005e10:	4826      	ldr	r0, [pc, #152]	; (8005eac <rotation_of_axis+0x3dc>)
 8005e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e14:	f241 1394 	movw	r3, #4500	; 0x1194
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4403      	add	r3, r0
 8005e1e:	6019      	str	r1, [r3, #0]
		acc_data[2][i] = (accX*c1*s2 - accY*s1 + accZ*c1*c2)*9.81 - 9.81;
 8005e20:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e34:	edd7 6a04 	vldr	s13, [r7, #16]
 8005e38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e44:	edd7 6a03 	vldr	s13, [r7, #12]
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e50:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e5c:	ee17 0a90 	vmov	r0, s15
 8005e60:	f7fa fb92 	bl	8000588 <__aeabi_f2d>
 8005e64:	a30e      	add	r3, pc, #56	; (adr r3, 8005ea0 <rotation_of_axis+0x3d0>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa fbe5 	bl	8000638 <__aeabi_dmul>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4610      	mov	r0, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	a30a      	add	r3, pc, #40	; (adr r3, 8005ea0 <rotation_of_axis+0x3d0>)
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f7fa fa24 	bl	80002c8 <__aeabi_dsub>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4610      	mov	r0, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	f7fa feae 	bl	8000be8 <__aeabi_d2f>
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	4807      	ldr	r0, [pc, #28]	; (8005eac <rotation_of_axis+0x3dc>)
 8005e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e92:	e00d      	b.n	8005eb0 <rotation_of_axis+0x3e0>
 8005e94:	f3af 8000 	nop.w
 8005e98:	54442d18 	.word	0x54442d18
 8005e9c:	400921fb 	.word	0x400921fb
 8005ea0:	51eb851f 	.word	0x51eb851f
 8005ea4:	40239eb8 	.word	0x40239eb8
 8005ea8:	40668000 	.word	0x40668000
 8005eac:	200025bc 	.word	0x200025bc
 8005eb0:	f242 3328 	movw	r3, #9000	; 0x2328
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4403      	add	r3, r0
 8005eba:	6019      	str	r1, [r3, #0]

		float total_ax_rotated = fabs(acc_data[0][i])*0.5;
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <rotation_of_axis+0x45c>)
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	eef0 7ae7 	vabs.f32	s15, s15
 8005ecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ed4:	edc7 7a02 	vstr	s15, [r7, #8]

		acc_data[0][i] = s3*total_ax_rotated;
 8005ed8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee4:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <rotation_of_axis+0x45c>)
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	edc3 7a00 	vstr	s15, [r3]
		acc_data[1][i] = c3*total_ax_rotated;
 8005ef0:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efc:	490b      	ldr	r1, [pc, #44]	; (8005f2c <rotation_of_axis+0x45c>)
 8005efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f00:	f241 1394 	movw	r3, #4500	; 0x1194
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<sample_number; i++)
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	3301      	adds	r3, #1
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <rotation_of_axis+0x460>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f6ff adf1 	blt.w	8005b02 <rotation_of_axis+0x32>
	}
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	3738      	adds	r7, #56	; 0x38
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200025bc 	.word	0x200025bc
 8005f30:	200025b8 	.word	0x200025b8

08005f34 <calc_velocity>:

void calc_velocity(float velocity[3][max_sample_number], bool no_move[])
{
 8005f34:	b4b0      	push	{r4, r5, r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
void calc_velocity(float velocity[3][max_sample_number], bool no_move[])
 8005f3e:	f241 1394 	movw	r3, #4500	; 0x1194
 8005f42:	3b01      	subs	r3, #1
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	f241 1394 	movw	r3, #4500	; 0x1194
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4614      	mov	r4, r2
 8005f50:	461d      	mov	r5, r3
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	016b      	lsls	r3, r5, #5
 8005f5c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005f60:	0162      	lsls	r2, r4, #5
	velocity[0][0] = 0.0;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
	velocity[1][0] = 0.0;
 8005f6a:	f241 1394 	movw	r3, #4500	; 0x1194
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
	velocity[2][0] = 0.0;
 8005f7a:	f241 1394 	movw	r3, #4500	; 0x1194
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
	for(int i=1; i<sample_number; i++)
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e08d      	b.n	80060ac <calc_velocity+0x178>
	{
		if(!no_move[i])
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	4413      	add	r3, r2
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f083 0301 	eor.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d064      	beq.n	800606c <calc_velocity+0x138>
		{
			velocity[0][i] = velocity[0][i-1] + acc_data[0][i]*T;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	ed93 7a00 	vldr	s14, [r3]
 8005fb0:	4a44      	ldr	r2, [pc, #272]	; (80060c4 <calc_velocity+0x190>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	edd3 6a00 	vldr	s13, [r3]
 8005fbc:	4b42      	ldr	r3, [pc, #264]	; (80060c8 <calc_velocity+0x194>)
 8005fbe:	edd3 7a00 	vldr	s15, [r3]
 8005fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	edc3 7a00 	vstr	s15, [r3]
			velocity[1][i] = velocity[1][i-1] + acc_data[1][i]*T;
 8005fd6:	f241 1394 	movw	r3, #4500	; 0x1194
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	441a      	add	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	ed93 7a00 	vldr	s14, [r3]
 8005fec:	4935      	ldr	r1, [pc, #212]	; (80060c4 <calc_velocity+0x190>)
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f241 1394 	movw	r3, #4500	; 0x1194
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	edd3 6a00 	vldr	s13, [r3]
 8005ffe:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <calc_velocity+0x194>)
 8006000:	edd3 7a00 	vldr	s15, [r3]
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006008:	f241 1394 	movw	r3, #4500	; 0x1194
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	441a      	add	r2, r3
 8006012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	edc3 7a00 	vstr	s15, [r3]
			velocity[2][i] = velocity[2][i-1] + acc_data[2][i]*T;
 8006020:	f241 1394 	movw	r3, #4500	; 0x1194
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	441a      	add	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b01      	subs	r3, #1
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	ed93 7a00 	vldr	s14, [r3]
 8006036:	4923      	ldr	r1, [pc, #140]	; (80060c4 <calc_velocity+0x190>)
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f242 3328 	movw	r3, #9000	; 0x2328
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	edd3 6a00 	vldr	s13, [r3]
 8006048:	4b1f      	ldr	r3, [pc, #124]	; (80060c8 <calc_velocity+0x194>)
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006052:	f241 1394 	movw	r3, #4500	; 0x1194
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	441a      	add	r2, r3
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	edc3 7a00 	vstr	s15, [r3]
 800606a:	e01c      	b.n	80060a6 <calc_velocity+0x172>
		}
		else
		{
			velocity[0][i] = 0;
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
			velocity[1][i] = 0;
 800607a:	f241 1394 	movw	r3, #4500	; 0x1194
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
			velocity[2][i] = 0;
 8006090:	f241 1394 	movw	r3, #4500	; 0x1194
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	441a      	add	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
	for(int i=1; i<sample_number; i++)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <calc_velocity+0x198>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	f6ff af6c 	blt.w	8005f90 <calc_velocity+0x5c>
		}
	}
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bcb0      	pop	{r4, r5, r7}
 80060c2:	4770      	bx	lr
 80060c4:	200025bc 	.word	0x200025bc
 80060c8:	2000000c 	.word	0x2000000c
 80060cc:	200025b8 	.word	0x200025b8

080060d0 <velocity_compensation>:

void velocity_compensation(float velocity[3][max_sample_number], bool no_move[])
{
 80060d0:	b4b0      	push	{r4, r5, r7}
 80060d2:	b08b      	sub	sp, #44	; 0x2c
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
void velocity_compensation(float velocity[3][max_sample_number], bool no_move[])
 80060da:	f241 1394 	movw	r3, #4500	; 0x1194
 80060de:	3b01      	subs	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	f241 1394 	movw	r3, #4500	; 0x1194
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	4614      	mov	r4, r2
 80060ec:	461d      	mov	r5, r3
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	016b      	lsls	r3, r5, #5
 80060f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80060fc:	0162      	lsls	r2, r4, #5
	int i = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
	int i_first_sample_with_move = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
	int i_last_sample_with_move = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
	float velZ_end_step = 0.0;
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
	int time_of_step = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

	while(i < sample_number-1)
 8006114:	e06f      	b.n	80061f6 <velocity_compensation+0x126>
	{
		while(no_move[i] && i < sample_number-1)
		{
			i++;
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	3301      	adds	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
		while(no_move[i] && i < sample_number-1)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	4413      	add	r3, r2
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <velocity_compensation+0x64>
 8006128:	4b39      	ldr	r3, [pc, #228]	; (8006210 <velocity_compensation+0x140>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	429a      	cmp	r2, r3
 8006132:	dbf0      	blt.n	8006116 <velocity_compensation+0x46>
		}
		i_first_sample_with_move = i;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	61bb      	str	r3, [r7, #24]
		while(!no_move[i] && i < sample_number-1)
 8006138:	e002      	b.n	8006140 <velocity_compensation+0x70>
		{
			i++;
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	3301      	adds	r3, #1
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
		while(!no_move[i] && i < sample_number-1)
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f083 0301 	eor.w	r3, r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <velocity_compensation+0x8e>
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <velocity_compensation+0x140>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615a:	429a      	cmp	r2, r3
 800615c:	dbed      	blt.n	800613a <velocity_compensation+0x6a>
		}
		i_last_sample_with_move = i-1;
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	3b01      	subs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
		velZ_end_step = velocity[2][i_last_sample_with_move]*0.5;
 8006164:	f241 1394 	movw	r3, #4500	; 0x1194
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	441a      	add	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	edd3 7a00 	vldr	s15, [r3]
 8006178:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800617c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006180:	edc7 7a04 	vstr	s15, [r7, #16]
		time_of_step = i_last_sample_with_move-i_first_sample_with_move;
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	60fb      	str	r3, [r7, #12]

		if(time_of_step > 50)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b32      	cmp	r3, #50	; 0x32
 8006190:	dd31      	ble.n	80061f6 <velocity_compensation+0x126>
		{
			for(int j=i_first_sample_with_move; j<=i_last_sample_with_move; j++)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e02a      	b.n	80061ee <velocity_compensation+0x11e>
			{
				velocity[2][j] = velocity[2][j] - (velZ_end_step/time_of_step)*(j-i_first_sample_with_move);
 8006198:	f241 1394 	movw	r3, #4500	; 0x1194
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	441a      	add	r2, r3
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	ed93 7a00 	vldr	s14, [r3]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80061ba:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d0:	f241 1394 	movw	r3, #4500	; 0x1194
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	441a      	add	r2, r3
 80061da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	edc3 7a00 	vstr	s15, [r3]
			for(int j=i_first_sample_with_move; j<=i_last_sample_with_move; j++)
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	3301      	adds	r3, #1
 80061ec:	623b      	str	r3, [r7, #32]
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	ddd0      	ble.n	8006198 <velocity_compensation+0xc8>
	while(i < sample_number-1)
 80061f6:	4b06      	ldr	r3, [pc, #24]	; (8006210 <velocity_compensation+0x140>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	429a      	cmp	r2, r3
 8006200:	db8c      	blt.n	800611c <velocity_compensation+0x4c>
			}
		}
	}
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	372c      	adds	r7, #44	; 0x2c
 8006208:	46bd      	mov	sp, r7
 800620a:	bcb0      	pop	{r4, r5, r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	200025b8 	.word	0x200025b8

08006214 <calc_position>:

void calc_position(float position[3][max_sample_number], float velocity[3][max_sample_number])
{
 8006214:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
void calc_position(float position[3][max_sample_number], float velocity[3][max_sample_number])
 8006220:	f241 1394 	movw	r3, #4500	; 0x1194
 8006224:	3b01      	subs	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	f241 1394 	movw	r3, #4500	; 0x1194
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	4690      	mov	r8, r2
 8006232:	4699      	mov	r9, r3
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006240:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8006244:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8006248:	f241 1394 	movw	r3, #4500	; 0x1194
 800624c:	3b01      	subs	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	f241 1394 	movw	r3, #4500	; 0x1194
 8006254:	461a      	mov	r2, r3
 8006256:	2300      	movs	r3, #0
 8006258:	4614      	mov	r4, r2
 800625a:	461d      	mov	r5, r3
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	016b      	lsls	r3, r5, #5
 8006266:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800626a:	0162      	lsls	r2, r4, #5
	position[0][0] = 0.0;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
	position[1][0] = 0.0;
 8006274:	f241 1394 	movw	r3, #4500	; 0x1194
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
	position[2][0] = 0.0;
 8006284:	f241 1394 	movw	r3, #4500	; 0x1194
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
	for(int i=1; i<sample_number; i++)
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e068      	b.n	800636c <calc_position+0x158>
	{
		position[0][i] = position[0][i-1] + velocity[0][i]*T;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	3b01      	subs	r3, #1
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	ed93 7a00 	vldr	s14, [r3]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	edd3 6a00 	vldr	s13, [r3]
 80062b4:	4b33      	ldr	r3, [pc, #204]	; (8006384 <calc_position+0x170>)
 80062b6:	edd3 7a00 	vldr	s15, [r3]
 80062ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	edc3 7a00 	vstr	s15, [r3]
		position[1][i] = position[1][i-1] + velocity[1][i]*T;
 80062ce:	f241 1394 	movw	r3, #4500	; 0x1194
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	441a      	add	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3b01      	subs	r3, #1
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	ed93 7a00 	vldr	s14, [r3]
 80062e4:	f241 1394 	movw	r3, #4500	; 0x1194
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	441a      	add	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	edd3 6a00 	vldr	s13, [r3]
 80062f8:	4b22      	ldr	r3, [pc, #136]	; (8006384 <calc_position+0x170>)
 80062fa:	edd3 7a00 	vldr	s15, [r3]
 80062fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006302:	f241 1394 	movw	r3, #4500	; 0x1194
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	441a      	add	r2, r3
 800630c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	edc3 7a00 	vstr	s15, [r3]
		position[2][i] = position[2][i-1] + velocity[2][i]*T;
 800631a:	f241 1394 	movw	r3, #4500	; 0x1194
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	441a      	add	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3b01      	subs	r3, #1
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	ed93 7a00 	vldr	s14, [r3]
 8006330:	f241 1394 	movw	r3, #4500	; 0x1194
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	441a      	add	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	edd3 6a00 	vldr	s13, [r3]
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <calc_position+0x170>)
 8006346:	edd3 7a00 	vldr	s15, [r3]
 800634a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800634e:	f241 1394 	movw	r3, #4500	; 0x1194
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	441a      	add	r2, r3
 8006358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	edc3 7a00 	vstr	s15, [r3]
	for(int i=1; i<sample_number; i++)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	3301      	adds	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <calc_position+0x174>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	429a      	cmp	r2, r3
 8006374:	db91      	blt.n	800629a <calc_position+0x86>
	}
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8006382:	4770      	bx	lr
 8006384:	2000000c 	.word	0x2000000c
 8006388:	200025b8 	.word	0x200025b8
 800638c:	00000000 	.word	0x00000000

08006390 <corection_in_flat_move>:

void corection_in_flat_move(float position[3][max_sample_number], float velocity[3][max_sample_number], bool no_move[])
{
 8006390:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006394:	b094      	sub	sp, #80	; 0x50
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
void corection_in_flat_move(float position[3][max_sample_number], float velocity[3][max_sample_number], bool no_move[])
 800639e:	f241 1394 	movw	r3, #4500	; 0x1194
 80063a2:	3b01      	subs	r3, #1
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	f241 1394 	movw	r3, #4500	; 0x1194
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	4690      	mov	r8, r2
 80063b0:	4699      	mov	r9, r3
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80063be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80063c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80063c6:	f241 1394 	movw	r3, #4500	; 0x1194
 80063ca:	3b01      	subs	r3, #1
 80063cc:	633b      	str	r3, [r7, #48]	; 0x30
 80063ce:	f241 1394 	movw	r3, #4500	; 0x1194
 80063d2:	461a      	mov	r2, r3
 80063d4:	2300      	movs	r3, #0
 80063d6:	4614      	mov	r4, r2
 80063d8:	461d      	mov	r5, r3
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	016b      	lsls	r3, r5, #5
 80063e4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80063e8:	0162      	lsls	r2, r4, #5
	int samples_in_step = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	int number_of_steps = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	64bb      	str	r3, [r7, #72]	; 0x48
	int i=0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	647b      	str	r3, [r7, #68]	; 0x44

	while(i < sample_number-1)
 80063f6:	e035      	b.n	8006464 <corection_in_flat_move+0xd4>
	{
		i++;
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	3301      	adds	r3, #1
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
		while(!no_move[i] && i < sample_number-1)
 80063fe:	e005      	b.n	800640c <corection_in_flat_move+0x7c>
		{
			i++;
 8006400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006402:	3301      	adds	r3, #1
 8006404:	647b      	str	r3, [r7, #68]	; 0x44
			samples_in_step++;
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	3301      	adds	r3, #1
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
		while(!no_move[i] && i < sample_number-1)
 800640c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <corection_in_flat_move+0x9a>
 800641e:	4b98      	ldr	r3, [pc, #608]	; (8006680 <corection_in_flat_move+0x2f0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3b01      	subs	r3, #1
 8006424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006426:	429a      	cmp	r2, r3
 8006428:	dbea      	blt.n	8006400 <corection_in_flat_move+0x70>
		}
		if(samples_in_step > f*0.3)
 800642a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800642c:	f7fa f89a 	bl	8000564 <__aeabi_i2d>
 8006430:	4604      	mov	r4, r0
 8006432:	460d      	mov	r5, r1
 8006434:	4b93      	ldr	r3, [pc, #588]	; (8006684 <corection_in_flat_move+0x2f4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7fa f8a5 	bl	8000588 <__aeabi_f2d>
 800643e:	a38a      	add	r3, pc, #552	; (adr r3, 8006668 <corection_in_flat_move+0x2d8>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4620      	mov	r0, r4
 800644e:	4629      	mov	r1, r5
 8006450:	f7fa fb82 	bl	8000b58 <__aeabi_dcmpgt>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <corection_in_flat_move+0xd0>
		{
			number_of_steps++;
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	3301      	adds	r3, #1
 800645e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		samples_in_step = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(i < sample_number-1)
 8006464:	4b86      	ldr	r3, [pc, #536]	; (8006680 <corection_in_flat_move+0x2f0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3b01      	subs	r3, #1
 800646a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646c:	429a      	cmp	r2, r3
 800646e:	dbc3      	blt.n	80063f8 <corection_in_flat_move+0x68>
	}

	int i_last_sample_without_move = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i_next_sample_without_move = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28

	float height = position[2][sample_number-1];
 8006478:	f241 1394 	movw	r3, #4500	; 0x1194
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	441a      	add	r2, r3
 8006482:	4b7f      	ldr	r3, [pc, #508]	; (8006680 <corection_in_flat_move+0x2f0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3b01      	subs	r3, #1
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
	if(fabs(height/number_of_steps) < 0.7)
 8006490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800649a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800649e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a2:	eef0 7ae7 	vabs.f32	s15, s15
 80064a6:	ee17 0a90 	vmov	r0, s15
 80064aa:	f7fa f86d 	bl	8000588 <__aeabi_f2d>
 80064ae:	a370      	add	r3, pc, #448	; (adr r3, 8006670 <corection_in_flat_move+0x2e0>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7fa fb32 	bl	8000b1c <__aeabi_dcmplt>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 80cb 	beq.w	8006656 <corection_in_flat_move+0x2c6>
	{
		i = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	647b      	str	r3, [r7, #68]	; 0x44
		while(i < sample_number-1)
 80064c4:	e0c0      	b.n	8006648 <corection_in_flat_move+0x2b8>
		{
			while(no_move[i] && i < sample_number-1)
			{
				i++;
 80064c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c8:	3301      	adds	r3, #1
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
			while(no_move[i] && i < sample_number-1)
 80064cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <corection_in_flat_move+0x154>
 80064d8:	4b69      	ldr	r3, [pc, #420]	; (8006680 <corection_in_flat_move+0x2f0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e0:	429a      	cmp	r2, r3
 80064e2:	dbf0      	blt.n	80064c6 <corection_in_flat_move+0x136>
			}
			i_last_sample_without_move = i-1;
 80064e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e6:	3b01      	subs	r3, #1
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!no_move[i] && i < sample_number-1)
 80064ea:	e002      	b.n	80064f2 <corection_in_flat_move+0x162>
			{
				i++;
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	3301      	adds	r3, #1
 80064f0:	647b      	str	r3, [r7, #68]	; 0x44
			while(!no_move[i] && i < sample_number-1)
 80064f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <corection_in_flat_move+0x180>
 8006504:	4b5e      	ldr	r3, [pc, #376]	; (8006680 <corection_in_flat_move+0x2f0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3b01      	subs	r3, #1
 800650a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800650c:	429a      	cmp	r2, r3
 800650e:	dbed      	blt.n	80064ec <corection_in_flat_move+0x15c>
			}
			i_next_sample_without_move = i;
 8006510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28

			float dH = position[2][i_next_sample_without_move]-position[2][i_last_sample_without_move];
 8006514:	f241 1394 	movw	r3, #4500	; 0x1194
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	441a      	add	r2, r3
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	ed93 7a00 	vldr	s14, [r3]
 8006528:	f241 1394 	movw	r3, #4500	; 0x1194
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	441a      	add	r2, r3
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	edd3 7a00 	vldr	s15, [r3]
 800653c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006540:	edc7 7a08 	vstr	s15, [r7, #32]
			float all_Z_move = 0.0;
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	643b      	str	r3, [r7, #64]	; 0x40
			for(int j=i_last_sample_without_move; j<i_next_sample_without_move+1;j++)
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654e:	e019      	b.n	8006584 <corection_in_flat_move+0x1f4>
			{
				all_Z_move += fabs(velocity[2][j]*T);
 8006550:	f241 1394 	movw	r3, #4500	; 0x1194
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	441a      	add	r2, r3
 800655a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	ed93 7a00 	vldr	s14, [r3]
 8006564:	4b48      	ldr	r3, [pc, #288]	; (8006688 <corection_in_flat_move+0x2f8>)
 8006566:	edd3 7a00 	vldr	s15, [r3]
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	eef0 7ae7 	vabs.f32	s15, s15
 8006572:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800657a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			for(int j=i_last_sample_without_move; j<i_next_sample_without_move+1;j++)
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	3301      	adds	r3, #1
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	429a      	cmp	r2, r3
 800658a:	dae1      	bge.n	8006550 <corection_in_flat_move+0x1c0>
			}
			float Z_move_down = (all_Z_move-dH)/2.0;
 800658c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006590:	edd7 7a08 	vldr	s15, [r7, #32]
 8006594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006598:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800659c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065a0:	edc7 7a07 	vstr	s15, [r7, #28]
			float Z_move_up = all_Z_move - Z_move_down;
 80065a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80065a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80065ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b0:	edc7 7a06 	vstr	s15, [r7, #24]

			if(fabs(Z_move_down) > 0.00001)
 80065b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80065b8:	eef0 7ae7 	vabs.f32	s15, s15
 80065bc:	ee17 0a90 	vmov	r0, s15
 80065c0:	f7f9 ffe2 	bl	8000588 <__aeabi_f2d>
 80065c4:	a32c      	add	r3, pc, #176	; (adr r3, 8006678 <corection_in_flat_move+0x2e8>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7fa fac5 	bl	8000b58 <__aeabi_dcmpgt>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d100      	bne.n	80065d6 <corection_in_flat_move+0x246>
 80065d4:	e038      	b.n	8006648 <corection_in_flat_move+0x2b8>
			{
				float vel_correction_ratio = Z_move_up/Z_move_down;
 80065d6:	edd7 6a06 	vldr	s13, [r7, #24]
 80065da:	ed97 7a07 	vldr	s14, [r7, #28]
 80065de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e2:	edc7 7a05 	vstr	s15, [r7, #20]

				for(int j=i_last_sample_without_move; j<i_next_sample_without_move+1;j++)
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ea:	e029      	b.n	8006640 <corection_in_flat_move+0x2b0>
				{
					if(velocity[2][j] < 0.0)
 80065ec:	f241 1394 	movw	r3, #4500	; 0x1194
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	441a      	add	r2, r3
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	edd3 7a00 	vldr	s15, [r3]
 8006600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006608:	d517      	bpl.n	800663a <corection_in_flat_move+0x2aa>
					{
						velocity[2][j] = velocity[2][j]*vel_correction_ratio;
 800660a:	f241 1394 	movw	r3, #4500	; 0x1194
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	441a      	add	r2, r3
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	ed93 7a00 	vldr	s14, [r3]
 800661e:	f241 1394 	movw	r3, #4500	; 0x1194
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	441a      	add	r2, r3
 8006628:	edd7 7a05 	vldr	s15, [r7, #20]
 800662c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	edc3 7a00 	vstr	s15, [r3]
				for(int j=i_last_sample_without_move; j<i_next_sample_without_move+1;j++)
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	3301      	adds	r3, #1
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	429a      	cmp	r2, r3
 8006646:	dad1      	bge.n	80065ec <corection_in_flat_move+0x25c>
		while(i < sample_number-1)
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <corection_in_flat_move+0x2f0>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006650:	429a      	cmp	r2, r3
 8006652:	f6ff af3b 	blt.w	80064cc <corection_in_flat_move+0x13c>
			}
		}

	}

	calc_position(position, velocity);
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fddb 	bl	8006214 <calc_position>
}
 800665e:	bf00      	nop
 8006660:	3750      	adds	r7, #80	; 0x50
 8006662:	46bd      	mov	sp, r7
 8006664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006668:	33333333 	.word	0x33333333
 800666c:	3fd33333 	.word	0x3fd33333
 8006670:	66666666 	.word	0x66666666
 8006674:	3fe66666 	.word	0x3fe66666
 8006678:	88e368f1 	.word	0x88e368f1
 800667c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006680:	200025b8 	.word	0x200025b8
 8006684:	20000008 	.word	0x20000008
 8006688:	2000000c 	.word	0x2000000c

0800668c <print>:

void print(float orientation[3][max_sample_number], float position[3][max_sample_number], float acc_total[max_sample_number], float velocity[3][max_sample_number])
{
 800668c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006690:	b0f2      	sub	sp, #456	; 0x1c8
 8006692:	af1e      	add	r7, sp, #120	; 0x78
 8006694:	66f8      	str	r0, [r7, #108]	; 0x6c
 8006696:	66b9      	str	r1, [r7, #104]	; 0x68
 8006698:	667a      	str	r2, [r7, #100]	; 0x64
 800669a:	663b      	str	r3, [r7, #96]	; 0x60
void print(float orientation[3][max_sample_number], float position[3][max_sample_number], float acc_total[max_sample_number], float velocity[3][max_sample_number])
 800669c:	f241 1394 	movw	r3, #4500	; 0x1194
 80066a0:	3b01      	subs	r3, #1
 80066a2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80066a6:	f241 1394 	movw	r3, #4500	; 0x1194
 80066aa:	461a      	mov	r2, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	4692      	mov	sl, r2
 80066b0:	469b      	mov	fp, r3
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80066be:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80066c2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80066c6:	f241 1394 	movw	r3, #4500	; 0x1194
 80066ca:	3b01      	subs	r3, #1
 80066cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80066d0:	f241 1394 	movw	r3, #4500	; 0x1194
 80066d4:	461a      	mov	r2, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	4690      	mov	r8, r2
 80066da:	4699      	mov	r9, r3
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80066e8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80066ec:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80066f0:	f241 1394 	movw	r3, #4500	; 0x1194
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80066fa:	f241 1394 	movw	r3, #4500	; 0x1194
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	4614      	mov	r4, r2
 8006704:	461d      	mov	r5, r3
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	016b      	lsls	r3, r5, #5
 8006710:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006714:	0162      	lsls	r2, r4, #5
	fresult = f_mount(&fs,"",0);
 8006716:	2200      	movs	r2, #0
 8006718:	49ac      	ldr	r1, [pc, #688]	; (80069cc <print+0x340>)
 800671a:	48ad      	ldr	r0, [pc, #692]	; (80069d0 <print+0x344>)
 800671c:	f008 f96e 	bl	800e9fc <f_mount>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	4bab      	ldr	r3, [pc, #684]	; (80069d4 <print+0x348>)
 8006726:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, "dane.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8006728:	2213      	movs	r2, #19
 800672a:	49ab      	ldr	r1, [pc, #684]	; (80069d8 <print+0x34c>)
 800672c:	48ab      	ldr	r0, [pc, #684]	; (80069dc <print+0x350>)
 800672e:	f008 f9ab 	bl	800ea88 <f_open>
 8006732:	4603      	mov	r3, r0
 8006734:	461a      	mov	r2, r3
 8006736:	4ba7      	ldr	r3, [pc, #668]	; (80069d4 <print+0x348>)
 8006738:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sample_number; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006740:	e12b      	b.n	800699a <print+0x30e>
	{
		  char text[200];
		  int length = sprintf(text, "%.2f;%.2f;%.2f;%.4f;%.4f;%.4f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;\r\n", orientation[0][i], orientation[1][i], orientation[2][i], position[0][i], position[1][i], position[2][i], acc_total[i], velocity[0][i], velocity[1][i], velocity[2][i], gyro_data[0][i], gyro_data[1][i], gyro_data[2][i], acc_data[0][i], acc_data[1][i], acc_data[2][i]);
 8006742:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7f9 ff1a 	bl	8000588 <__aeabi_f2d>
 8006754:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8006758:	f241 1394 	movw	r3, #4500	; 0x1194
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006760:	441a      	add	r2, r3
 8006762:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 ff0b 	bl	8000588 <__aeabi_f2d>
 8006772:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8006776:	f241 1394 	movw	r3, #4500	; 0x1194
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800677e:	441a      	add	r2, r3
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7f9 fefc 	bl	8000588 <__aeabi_f2d>
 8006790:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8006794:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7f9 fef1 	bl	8000588 <__aeabi_f2d>
 80067a6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80067aa:	f241 1394 	movw	r3, #4500	; 0x1194
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067b2:	441a      	add	r2, r3
 80067b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 fee2 	bl	8000588 <__aeabi_f2d>
 80067c4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80067c8:	f241 1394 	movw	r3, #4500	; 0x1194
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067d0:	441a      	add	r2, r3
 80067d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7f9 fed3 	bl	8000588 <__aeabi_f2d>
 80067e2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80067e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067ee:	4413      	add	r3, r2
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7f9 fec8 	bl	8000588 <__aeabi_f2d>
 80067f8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80067fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f7f9 febd 	bl	8000588 <__aeabi_f2d>
 800680e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8006812:	f241 1394 	movw	r3, #4500	; 0x1194
 8006816:	009a      	lsls	r2, r3, #2
 8006818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681a:	441a      	add	r2, r3
 800681c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7f9 feae 	bl	8000588 <__aeabi_f2d>
 800682c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8006830:	f241 1394 	movw	r3, #4500	; 0x1194
 8006834:	00da      	lsls	r2, r3, #3
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	441a      	add	r2, r3
 800683a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f7f9 fe9f 	bl	8000588 <__aeabi_f2d>
 800684a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800684e:	4a64      	ldr	r2, [pc, #400]	; (80069e0 <print+0x354>)
 8006850:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7f9 fe94 	bl	8000588 <__aeabi_f2d>
 8006860:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006864:	495e      	ldr	r1, [pc, #376]	; (80069e0 <print+0x354>)
 8006866:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800686a:	f241 1394 	movw	r3, #4500	; 0x1194
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7f9 fe86 	bl	8000588 <__aeabi_f2d>
 800687c:	e9c7 0100 	strd	r0, r1, [r7]
 8006880:	4957      	ldr	r1, [pc, #348]	; (80069e0 <print+0x354>)
 8006882:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006886:	f242 3328 	movw	r3, #9000	; 0x2328
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7f9 fe78 	bl	8000588 <__aeabi_f2d>
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	4a51      	ldr	r2, [pc, #324]	; (80069e4 <print+0x358>)
 800689e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7f9 fe6d 	bl	8000588 <__aeabi_f2d>
 80068ae:	4680      	mov	r8, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	494c      	ldr	r1, [pc, #304]	; (80069e4 <print+0x358>)
 80068b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80068b8:	f241 1394 	movw	r3, #4500	; 0x1194
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7f9 fe5f 	bl	8000588 <__aeabi_f2d>
 80068ca:	4604      	mov	r4, r0
 80068cc:	460d      	mov	r5, r1
 80068ce:	4945      	ldr	r1, [pc, #276]	; (80069e4 <print+0x358>)
 80068d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80068d4:	f242 3328 	movw	r3, #9000	; 0x2328
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7f9 fe51 	bl	8000588 <__aeabi_f2d>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80068ee:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80068f2:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 80068f6:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80068fa:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 80068fe:	ed97 7b00 	vldr	d7, [r7]
 8006902:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006906:	ed97 7b02 	vldr	d7, [r7, #8]
 800690a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800690e:	ed97 7b04 	vldr	d7, [r7, #16]
 8006912:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006916:	ed97 7b06 	vldr	d7, [r7, #24]
 800691a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800691e:	ed97 7b08 	vldr	d7, [r7, #32]
 8006922:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006926:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800692a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800692e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006932:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006936:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800693a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800693e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006942:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006946:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800694a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800694e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006952:	ed8d 7b00 	vstr	d7, [sp]
 8006956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800695a:	4923      	ldr	r1, [pc, #140]	; (80069e8 <print+0x35c>)
 800695c:	f009 fe12 	bl	8010584 <siprintf>
 8006960:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
			//int parametry_len = sprintf (parametry,"Text written from STM32");
			fresult = f_lseek(&fil,f_size(&fil));
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <print+0x350>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4619      	mov	r1, r3
 800696a:	481c      	ldr	r0, [pc, #112]	; (80069dc <print+0x350>)
 800696c:	f008 fc94 	bl	800f298 <f_lseek>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <print+0x348>)
 8006976:	701a      	strb	r2, [r3, #0]
			fresult = f_write(&fil,text,length,&bw);
 8006978:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800697c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <print+0x360>)
 8006982:	4816      	ldr	r0, [pc, #88]	; (80069dc <print+0x350>)
 8006984:	f008 fa4c 	bl	800ee20 <f_write>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <print+0x348>)
 800698e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sample_number; i++)
 8006990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <print+0x364>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80069a2:	429a      	cmp	r2, r3
 80069a4:	f6ff aecd 	blt.w	8006742 <print+0xb6>
		  //HAL_UART_Transmit(&huart3, (uint8_t*)text, length, 1000);
	}
	f_close(&fil);
 80069a8:	480c      	ldr	r0, [pc, #48]	; (80069dc <print+0x350>)
 80069aa:	f008 fc4b 	bl	800f244 <f_close>
	fresult = f_mount(NULL,"",1);
 80069ae:	2201      	movs	r2, #1
 80069b0:	4906      	ldr	r1, [pc, #24]	; (80069cc <print+0x340>)
 80069b2:	2000      	movs	r0, #0
 80069b4:	f008 f822 	bl	800e9fc <f_mount>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <print+0x348>)
 80069be:	701a      	strb	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80069c6:	46bd      	mov	sp, r7
 80069c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069cc:	0801406c 	.word	0x0801406c
 80069d0:	20000544 	.word	0x20000544
 80069d4:	200025ac 	.word	0x200025ac
 80069d8:	08014070 	.word	0x08014070
 80069dc:	2000157c 	.word	0x2000157c
 80069e0:	2000f8ac 	.word	0x2000f8ac
 80069e4:	200025bc 	.word	0x200025bc
 80069e8:	0801407c 	.word	0x0801407c
 80069ec:	200025b0 	.word	0x200025b0
 80069f0:	200025b8 	.word	0x200025b8

080069f4 <calculate>:
{
	HAL_UART_Transmit(&huart3, (uint8_t*)text, length, 1000);
}

void calculate()
{
 80069f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	b0b7      	sub	sp, #220	; 0xdc
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	466b      	mov	r3, sp
 80069fe:	461e      	mov	r6, r3
	float acc_total[max_sample_number];
 8006a00:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a04:	3b01      	subs	r3, #1
 8006a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a0a:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	014b      	lsls	r3, r1, #5
 8006a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a24:	0142      	lsls	r2, r0, #5
 8006a26:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4614      	mov	r4, r2
 8006a30:	461d      	mov	r5, r3
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	016b      	lsls	r3, r5, #5
 8006a3c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006a40:	0162      	lsls	r2, r4, #5
 8006a42:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	3307      	adds	r3, #7
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	ebad 0d03 	sub.w	sp, sp, r3
 8006a52:	466b      	mov	r3, sp
 8006a54:	3303      	adds	r3, #3
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	bool no_move[max_sample_number];
 8006a5e:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a62:	3b01      	subs	r3, #1
 8006a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a68:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4690      	mov	r8, r2
 8006a72:	4699      	mov	r9, r3
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a88:	f241 1394 	movw	r3, #4500	; 0x1194
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4692      	mov	sl, r2
 8006a92:	469b      	mov	fp, r3
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa8:	f241 1394 	movw	r3, #4500	; 0x1194
 8006aac:	3307      	adds	r3, #7
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8006ab6:	466b      	mov	r3, sp
 8006ab8:	3300      	adds	r3, #0
 8006aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	float velocity[3][max_sample_number];
 8006abe:	f241 1394 	movw	r3, #4500	; 0x1194
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac8:	f241 1394 	movw	r3, #4500	; 0x1194
 8006acc:	461a      	mov	r2, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8006ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	014b      	lsls	r3, r1, #5
 8006ae8:	4621      	mov	r1, r4
 8006aea:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006aee:	4621      	mov	r1, r4
 8006af0:	014a      	lsls	r2, r1, #5
 8006af2:	f241 1394 	movw	r3, #4500	; 0x1194
 8006af6:	009d      	lsls	r5, r3, #2
 8006af8:	f241 1394 	movw	r3, #4500	; 0x1194
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8006b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b08:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b14:	415b      	adcs	r3, r3
 8006b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	1851      	adds	r1, r2, r1
 8006b20:	6539      	str	r1, [r7, #80]	; 0x50
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb43 0101 	adc.w	r1, r3, r1
 8006b28:	6579      	str	r1, [r7, #84]	; 0x54
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006b36:	4649      	mov	r1, r9
 8006b38:	014b      	lsls	r3, r1, #5
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006b40:	4641      	mov	r1, r8
 8006b42:	014a      	lsls	r2, r1, #5
 8006b44:	f241 1394 	movw	r3, #4500	; 0x1194
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b54:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b60:	415b      	adcs	r3, r3
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b68:	4641      	mov	r1, r8
 8006b6a:	1851      	adds	r1, r2, r1
 8006b6c:	6439      	str	r1, [r7, #64]	; 0x40
 8006b6e:	4649      	mov	r1, r9
 8006b70:	eb43 0101 	adc.w	r1, r3, r1
 8006b74:	6479      	str	r1, [r7, #68]	; 0x44
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006b82:	4649      	mov	r1, r9
 8006b84:	014b      	lsls	r3, r1, #5
 8006b86:	4641      	mov	r1, r8
 8006b88:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	014a      	lsls	r2, r1, #5
 8006b90:	f241 1394 	movw	r3, #4500	; 0x1194
 8006b94:	461a      	mov	r2, r3
 8006b96:	4613      	mov	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	ebad 0d03 	sub.w	sp, sp, r3
 8006ba8:	466b      	mov	r3, sp
 8006baa:	3303      	adds	r3, #3
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	float position[3][max_sample_number];
 8006bb4:	f241 1394 	movw	r3, #4500	; 0x1194
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bbe:	f241 1394 	movw	r3, #4500	; 0x1194
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bda:	4649      	mov	r1, r9
 8006bdc:	014b      	lsls	r3, r1, #5
 8006bde:	4641      	mov	r1, r8
 8006be0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006be4:	4641      	mov	r1, r8
 8006be6:	014a      	lsls	r2, r1, #5
 8006be8:	f241 1394 	movw	r3, #4500	; 0x1194
 8006bec:	009c      	lsls	r4, r3, #2
 8006bee:	f241 1394 	movw	r3, #4500	; 0x1194
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bfe:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006c02:	4642      	mov	r2, r8
 8006c04:	464b      	mov	r3, r9
 8006c06:	1891      	adds	r1, r2, r2
 8006c08:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c0a:	415b      	adcs	r3, r3
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c12:	4641      	mov	r1, r8
 8006c14:	1851      	adds	r1, r2, r1
 8006c16:	6339      	str	r1, [r7, #48]	; 0x30
 8006c18:	4649      	mov	r1, r9
 8006c1a:	eb43 0101 	adc.w	r1, r3, r1
 8006c1e:	6379      	str	r1, [r7, #52]	; 0x34
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	014b      	lsls	r3, r1, #5
 8006c30:	4641      	mov	r1, r8
 8006c32:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006c36:	4641      	mov	r1, r8
 8006c38:	014a      	lsls	r2, r1, #5
 8006c3a:	f241 1394 	movw	r3, #4500	; 0x1194
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	67ba      	str	r2, [r7, #120]	; 0x78
 8006c44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c46:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	1891      	adds	r1, r2, r2
 8006c50:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c52:	415b      	adcs	r3, r3
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	1851      	adds	r1, r2, r1
 8006c5e:	6239      	str	r1, [r7, #32]
 8006c60:	4649      	mov	r1, r9
 8006c62:	eb43 0101 	adc.w	r1, r3, r1
 8006c66:	6279      	str	r1, [r7, #36]	; 0x24
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c74:	4649      	mov	r1, r9
 8006c76:	014b      	lsls	r3, r1, #5
 8006c78:	4641      	mov	r1, r8
 8006c7a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006c7e:	4641      	mov	r1, r8
 8006c80:	014a      	lsls	r2, r1, #5
 8006c82:	f241 1394 	movw	r3, #4500	; 0x1194
 8006c86:	461a      	mov	r2, r3
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	3307      	adds	r3, #7
 8006c92:	08db      	lsrs	r3, r3, #3
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	ebad 0d03 	sub.w	sp, sp, r3
 8006c9a:	466b      	mov	r3, sp
 8006c9c:	3303      	adds	r3, #3
 8006c9e:	089b      	lsrs	r3, r3, #2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float orientation[3][max_sample_number];
 8006ca6:	f241 1394 	movw	r3, #4500	; 0x1194
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb0:	f241 1394 	movw	r3, #4500	; 0x1194
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	673a      	str	r2, [r7, #112]	; 0x70
 8006cba:	677b      	str	r3, [r7, #116]	; 0x74
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cc8:	4649      	mov	r1, r9
 8006cca:	014b      	lsls	r3, r1, #5
 8006ccc:	4641      	mov	r1, r8
 8006cce:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	014a      	lsls	r2, r1, #5
 8006cd6:	f241 1394 	movw	r3, #4500	; 0x1194
 8006cda:	0098      	lsls	r0, r3, #2
 8006cdc:	f241 1394 	movw	r3, #4500	; 0x1194
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	66ba      	str	r2, [r7, #104]	; 0x68
 8006ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ce8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	61b9      	str	r1, [r7, #24]
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	1851      	adds	r1, r2, r1
 8006d00:	6139      	str	r1, [r7, #16]
 8006d02:	4649      	mov	r1, r9
 8006d04:	eb43 0101 	adc.w	r1, r3, r1
 8006d08:	6179      	str	r1, [r7, #20]
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006d16:	4649      	mov	r1, r9
 8006d18:	014b      	lsls	r3, r1, #5
 8006d1a:	4641      	mov	r1, r8
 8006d1c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006d20:	4641      	mov	r1, r8
 8006d22:	014a      	lsls	r2, r1, #5
 8006d24:	f241 1394 	movw	r3, #4500	; 0x1194
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	663a      	str	r2, [r7, #96]	; 0x60
 8006d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8006d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	1891      	adds	r1, r2, r2
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	415b      	adcs	r3, r3
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d44:	4641      	mov	r1, r8
 8006d46:	1851      	adds	r1, r2, r1
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	eb43 0101 	adc.w	r1, r3, r1
 8006d50:	6079      	str	r1, [r7, #4]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8006d5e:	4649      	mov	r1, r9
 8006d60:	014b      	lsls	r3, r1, #5
 8006d62:	4641      	mov	r1, r8
 8006d64:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006d68:	4641      	mov	r1, r8
 8006d6a:	014a      	lsls	r2, r1, #5
 8006d6c:	f241 1394 	movw	r3, #4500	; 0x1194
 8006d70:	461a      	mov	r2, r3
 8006d72:	4613      	mov	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	3307      	adds	r3, #7
 8006d7c:	08db      	lsrs	r3, r3, #3
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	ebad 0d03 	sub.w	sp, sp, r3
 8006d84:	466b      	mov	r3, sp
 8006d86:	3303      	adds	r3, #3
 8006d88:	089b      	lsrs	r3, r3, #2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


	for(int i=0; i<max_sample_number; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d96:	e074      	b.n	8006e82 <calculate+0x48e>
	{
		acc_total[i] = 0.0;
 8006d98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
		no_move[i] = 0;
 8006daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db2:	4413      	add	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
		velocity[0][i] = 0.0;
 8006db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
		velocity[1][i] = 0.0;
 8006dca:	08a9      	lsrs	r1, r5, #2
 8006dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd4:	440b      	add	r3, r1
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
		velocity[2][i] = 0.0;
 8006de0:	08ab      	lsrs	r3, r5, #2
 8006de2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006de6:	0059      	lsls	r1, r3, #1
 8006de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dec:	440b      	add	r3, r1
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
		position[0][i] = 0.0;
 8006df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
		position[1][i] = 0.0;
 8006e0a:	08a1      	lsrs	r1, r4, #2
 8006e0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e14:	440b      	add	r3, r1
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
		position[2][i] = 0.0;
 8006e20:	08a3      	lsrs	r3, r4, #2
 8006e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e26:	0059      	lsls	r1, r3, #1
 8006e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e2c:	440b      	add	r3, r1
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
		orientation[0][i] = 0.0;
 8006e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
		orientation[1][i] = 0.0;
 8006e4a:	0881      	lsrs	r1, r0, #2
 8006e4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e54:	440b      	add	r3, r1
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
		orientation[2][i] = 0.0;
 8006e60:	0883      	lsrs	r3, r0, #2
 8006e62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e66:	0059      	lsls	r1, r3, #1
 8006e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e6c:	440b      	add	r3, r1
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
	for(int i=0; i<max_sample_number; i++)
 8006e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e82:	f241 1294 	movw	r2, #4500	; 0x1194
 8006e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	db84      	blt.n	8006d98 <calculate+0x3a4>
	}

	filtr_raw_data();
 8006e8e:	f7fe fab3 	bl	80053f8 <filtr_raw_data>

	calc_total_acc(acc_total);
 8006e92:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006e96:	f7fe fb47 	bl	8005528 <calc_total_acc>

	filtr_total_acc(acc_total);
 8006e9a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006e9e:	f7fe fbe7 	bl	8005670 <filtr_total_acc>

	find_no_move(acc_total, no_move);
 8006ea2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006ea6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006eaa:	f7fe fc19 	bl	80056e0 <find_no_move>

	calc_orientation(orientation, no_move);
 8006eae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006eb2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006eb6:	f7fe fc7b 	bl	80057b0 <calc_orientation>

	filtr_orientation_z(orientation);
 8006eba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ebe:	f7fe fdc5 	bl	8005a4c <filtr_orientation_z>

	rotation_of_axis(orientation);
 8006ec2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ec6:	f7fe fe03 	bl	8005ad0 <rotation_of_axis>

	calc_velocity(velocity, no_move);
 8006eca:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006ece:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006ed2:	f7ff f82f 	bl	8005f34 <calc_velocity>

	velocity_compensation(velocity, no_move);
 8006ed6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006eda:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006ede:	f7ff f8f7 	bl	80060d0 <velocity_compensation>

	calc_position(position, velocity);
 8006ee2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006ee6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006eea:	f7ff f993 	bl	8006214 <calc_position>
	corection_in_flat_move(position, velocity, no_move);
 8006eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ef2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006ef6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006efa:	f7ff fa49 	bl	8006390 <corection_in_flat_move>


	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8006efe:	2201      	movs	r2, #1
 8006f00:	2101      	movs	r1, #1
 8006f02:	480f      	ldr	r0, [pc, #60]	; (8006f40 <calculate+0x54c>)
 8006f04:	f001 f96c 	bl	80081e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	480c      	ldr	r0, [pc, #48]	; (8006f40 <calculate+0x54c>)
 8006f0e:	f001 f967 	bl	80081e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f18:	4809      	ldr	r0, [pc, #36]	; (8006f40 <calculate+0x54c>)
 8006f1a:	f001 f961 	bl	80081e0 <HAL_GPIO_WritePin>
	print(orientation, position, acc_total, velocity);
 8006f1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f22:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006f26:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006f2a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006f2e:	f7ff fbad 	bl	800668c <print>
 8006f32:	46b5      	mov	sp, r6

}
 8006f34:	bf00      	nop
 8006f36:	37dc      	adds	r7, #220	; 0xdc
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	bf00      	nop
 8006f40:	40020400 	.word	0x40020400

08006f44 <HAL_TIM_PeriodElapsedCallback>:
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart3, string, len, 2000);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a37      	ldr	r2, [pc, #220]	; (8007030 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d168      	bne.n	8007028 <HAL_TIM_PeriodElapsedCallback+0xe4>
	  {
		  bmi160ReadAccelGyro(&imu_t);
 8006f56:	4837      	ldr	r0, [pc, #220]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006f58:	f7fd fa46 	bl	80043e8 <bmi160ReadAccelGyro>

		  if(sample_number < max_sample_number)
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f241 1294 	movw	r2, #4500	; 0x1194
 8006f64:	4293      	cmp	r3, r2
 8006f66:	da5f      	bge.n	8007028 <HAL_TIM_PeriodElapsedCallback+0xe4>
		  {
			  gyro_data[0][sample_number] = imu_t.BMI160_Gx_f32;
 8006f68:	4b33      	ldr	r3, [pc, #204]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a31      	ldr	r2, [pc, #196]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006f6e:	68d2      	ldr	r2, [r2, #12]
 8006f70:	4932      	ldr	r1, [pc, #200]	; (800703c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	601a      	str	r2, [r3, #0]
			  gyro_data[1][sample_number] = imu_t.BMI160_Gy_f32;
 8006f78:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	4b2d      	ldr	r3, [pc, #180]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	482e      	ldr	r0, [pc, #184]	; (800703c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006f82:	f241 1394 	movw	r3, #4500	; 0x1194
 8006f86:	440b      	add	r3, r1
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4403      	add	r3, r0
 8006f8c:	601a      	str	r2, [r3, #0]
			  gyro_data[2][sample_number] = imu_t.BMI160_Gz_f32;
 8006f8e:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	4b28      	ldr	r3, [pc, #160]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	4829      	ldr	r0, [pc, #164]	; (800703c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006f98:	f242 3328 	movw	r3, #9000	; 0x2328
 8006f9c:	440b      	add	r3, r1
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4403      	add	r3, r0
 8006fa2:	601a      	str	r2, [r3, #0]

			  acc_data[0][sample_number] = imu_t.BMI160_Ax_f32;
 8006fa4:	4b24      	ldr	r3, [pc, #144]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	4924      	ldr	r1, [pc, #144]	; (8007040 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	601a      	str	r2, [r3, #0]
			  acc_data[1][sample_number] = imu_t.BMI160_Ay_f32;
 8006fb4:	4b20      	ldr	r3, [pc, #128]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006fb6:	6819      	ldr	r1, [r3, #0]
 8006fb8:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	4820      	ldr	r0, [pc, #128]	; (8007040 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8006fbe:	f241 1394 	movw	r3, #4500	; 0x1194
 8006fc2:	440b      	add	r3, r1
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4403      	add	r3, r0
 8006fc8:	601a      	str	r2, [r3, #0]
			  acc_data[2][sample_number] = imu_t.BMI160_Az_f32;
 8006fca:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006fcc:	6819      	ldr	r1, [r3, #0]
 8006fce:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	481b      	ldr	r0, [pc, #108]	; (8007040 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8006fd4:	f242 3328 	movw	r3, #9000	; 0x2328
 8006fd8:	440b      	add	r3, r1
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4403      	add	r3, r0
 8006fde:	601a      	str	r2, [r3, #0]

			  sample_number++;
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	4a14      	ldr	r2, [pc, #80]	; (8007038 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006fe8:	6013      	str	r3, [r2, #0]

			  if(counter_led >= f/2)
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8006ff8:	edd3 6a00 	vldr	s13, [r3]
 8006ffc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007000:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	db07      	blt.n	800701e <HAL_TIM_PeriodElapsedCallback+0xda>
			  {
				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800700e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007012:	480e      	ldr	r0, [pc, #56]	; (800704c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8007014:	f001 f8fd 	bl	8008212 <HAL_GPIO_TogglePin>
				  counter_led = 0;
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
			  }

			  counter_led++;
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8007026:	6013      	str	r3, [r2, #0]
		  }
	  }
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40010000 	.word	0x40010000
 8007034:	20000528 	.word	0x20000528
 8007038:	200025b8 	.word	0x200025b8
 800703c:	2000f8ac 	.word	0x2000f8ac
 8007040:	200025bc 	.word	0x200025bc
 8007044:	200025b4 	.word	0x200025b4
 8007048:	20000008 	.word	0x20000008
 800704c:	40020400 	.word	0x40020400

08007050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b085      	sub	sp, #20
 8007054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007056:	f000 fd6c 	bl	8007b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800705a:	f000 f8e3 	bl	8007224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800705e:	f7fe f845 	bl	80050ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8007062:	f000 fc05 	bl	8007870 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007066:	f000 fc93 	bl	8007990 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800706a:	f7fe f925 	bl	80052b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800706e:	f000 fb6d 	bl	800774c <MX_TIM1_Init>
  MX_SPI1_Init();
 8007072:	f000 f945 	bl	8007300 <MX_SPI1_Init>
  MX_FATFS_Init();
 8007076:	f005 fa75 	bl	800c564 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  arm_biquad_cascade_df1_init_f32(&iir_filter_gyro_x_low, 1, coeffs_low, iir_state_gyro_x_low);
 800707a:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <main+0x178>)
 800707c:	4a53      	ldr	r2, [pc, #332]	; (80071cc <main+0x17c>)
 800707e:	2101      	movs	r1, #1
 8007080:	4853      	ldr	r0, [pc, #332]	; (80071d0 <main+0x180>)
 8007082:	f008 fc4f 	bl	800f924 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_filter_gyro_y_low, 1, coeffs_low, iir_state_gyro_y_low);
 8007086:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <main+0x184>)
 8007088:	4a50      	ldr	r2, [pc, #320]	; (80071cc <main+0x17c>)
 800708a:	2101      	movs	r1, #1
 800708c:	4852      	ldr	r0, [pc, #328]	; (80071d8 <main+0x188>)
 800708e:	f008 fc49 	bl	800f924 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_filter_gyro_z_low, 1, coeffs_low, iir_state_gyro_z_low);
 8007092:	4b52      	ldr	r3, [pc, #328]	; (80071dc <main+0x18c>)
 8007094:	4a4d      	ldr	r2, [pc, #308]	; (80071cc <main+0x17c>)
 8007096:	2101      	movs	r1, #1
 8007098:	4851      	ldr	r0, [pc, #324]	; (80071e0 <main+0x190>)
 800709a:	f008 fc43 	bl	800f924 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_filter_acc_x_low, 1, coeffs_low, iir_state_acc_x_low);
 800709e:	4b51      	ldr	r3, [pc, #324]	; (80071e4 <main+0x194>)
 80070a0:	4a4a      	ldr	r2, [pc, #296]	; (80071cc <main+0x17c>)
 80070a2:	2101      	movs	r1, #1
 80070a4:	4850      	ldr	r0, [pc, #320]	; (80071e8 <main+0x198>)
 80070a6:	f008 fc3d 	bl	800f924 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_filter_acc_y_low, 1, coeffs_low, iir_state_acc_y_low);
 80070aa:	4b50      	ldr	r3, [pc, #320]	; (80071ec <main+0x19c>)
 80070ac:	4a47      	ldr	r2, [pc, #284]	; (80071cc <main+0x17c>)
 80070ae:	2101      	movs	r1, #1
 80070b0:	484f      	ldr	r0, [pc, #316]	; (80071f0 <main+0x1a0>)
 80070b2:	f008 fc37 	bl	800f924 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_filter_acc_z_low, 1, coeffs_low, iir_state_acc_z_low);
 80070b6:	4b4f      	ldr	r3, [pc, #316]	; (80071f4 <main+0x1a4>)
 80070b8:	4a44      	ldr	r2, [pc, #272]	; (80071cc <main+0x17c>)
 80070ba:	2101      	movs	r1, #1
 80070bc:	484e      	ldr	r0, [pc, #312]	; (80071f8 <main+0x1a8>)
 80070be:	f008 fc31 	bl	800f924 <arm_biquad_cascade_df1_init_f32>

  arm_biquad_cascade_df1_init_f32(&iir_filter_acc_high, 1, coeffs_acc_high, iir_state_acc_high);
 80070c2:	4b4e      	ldr	r3, [pc, #312]	; (80071fc <main+0x1ac>)
 80070c4:	4a4e      	ldr	r2, [pc, #312]	; (8007200 <main+0x1b0>)
 80070c6:	2101      	movs	r1, #1
 80070c8:	484e      	ldr	r0, [pc, #312]	; (8007204 <main+0x1b4>)
 80070ca:	f008 fc2b 	bl	800f924 <arm_biquad_cascade_df1_init_f32>

  arm_biquad_cascade_df1_init_f32(&iir_filter_orientation_low, 1, coeffs_orientation_low, iir_state_orientation_low);
 80070ce:	4b4e      	ldr	r3, [pc, #312]	; (8007208 <main+0x1b8>)
 80070d0:	4a4e      	ldr	r2, [pc, #312]	; (800720c <main+0x1bc>)
 80070d2:	2101      	movs	r1, #1
 80070d4:	484e      	ldr	r0, [pc, #312]	; (8007210 <main+0x1c0>)
 80070d6:	f008 fc25 	bl	800f924 <arm_biquad_cascade_df1_init_f32>

  while(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 80070da:	e002      	b.n	80070e2 <main+0x92>
  {
	  HAL_Delay(100);
 80070dc:	2064      	movs	r0, #100	; 0x64
 80070de:	f000 fd85 	bl	8007bec <HAL_Delay>
  while(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 80070e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070e6:	484b      	ldr	r0, [pc, #300]	; (8007214 <main+0x1c4>)
 80070e8:	f001 f862 	bl	80081b0 <HAL_GPIO_ReadPin>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f4      	beq.n	80070dc <main+0x8c>
  }

  HAL_Delay(100);
 80070f2:	2064      	movs	r0, #100	; 0x64
 80070f4:	f000 fd7a 	bl	8007bec <HAL_Delay>


  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80070f8:	2201      	movs	r2, #1
 80070fa:	2101      	movs	r1, #1
 80070fc:	4846      	ldr	r0, [pc, #280]	; (8007218 <main+0x1c8>)
 80070fe:	f001 f86f 	bl	80081e0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8007102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007106:	f000 fd71 	bl	8007bec <HAL_Delay>

  //calibration
  while (BMI160_init(imu_t) == 1){;}
 800710a:	bf00      	nop
 800710c:	4b43      	ldr	r3, [pc, #268]	; (800721c <main+0x1cc>)
 800710e:	466c      	mov	r4, sp
 8007110:	f103 0210 	add.w	r2, r3, #16
 8007114:	ca07      	ldmia	r2, {r0, r1, r2}
 8007116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800711a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800711c:	f7fd f872 	bl	8004204 <BMI160_init>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d0f2      	beq.n	800710c <main+0xbc>

//    if (imu_t.INIT_OK_i8 != TRUE)
//    {
//  	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
//    }
    HAL_Delay(5000);
 8007126:	f241 3088 	movw	r0, #5000	; 0x1388
 800712a:	f000 fd5f 	bl	8007bec <HAL_Delay>

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800712e:	2201      	movs	r2, #1
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	4839      	ldr	r0, [pc, #228]	; (8007218 <main+0x1c8>)
 8007134:	f001 f854 	bl	80081e0 <HAL_GPIO_WritePin>
    //end of calibration

    while(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 8007138:	e002      	b.n	8007140 <main+0xf0>
    {
	    HAL_Delay(100);
 800713a:	2064      	movs	r0, #100	; 0x64
 800713c:	f000 fd56 	bl	8007bec <HAL_Delay>
    while(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET)
 8007140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007144:	4833      	ldr	r0, [pc, #204]	; (8007214 <main+0x1c4>)
 8007146:	f001 f833 	bl	80081b0 <HAL_GPIO_ReadPin>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0f4      	beq.n	800713a <main+0xea>
    }

    HAL_Delay(1000);
 8007150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007154:	f000 fd4a 	bl	8007bec <HAL_Delay>

    HAL_TIM_Base_Start_IT(&htim1);
 8007158:	4831      	ldr	r0, [pc, #196]	; (8007220 <main+0x1d0>)
 800715a:	f003 fe1f 	bl	800ad9c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 800715e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007162:	482c      	ldr	r0, [pc, #176]	; (8007214 <main+0x1c4>)
 8007164:	f001 f824 	bl	80081b0 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d127      	bne.n	80071be <main+0x16e>
	  {
		  HAL_TIM_Base_Stop_IT(&htim1);
 800716e:	482c      	ldr	r0, [pc, #176]	; (8007220 <main+0x1d0>)
 8007170:	f003 fe8c 	bl	800ae8c <HAL_TIM_Base_Stop_IT>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8007174:	2200      	movs	r2, #0
 8007176:	2101      	movs	r1, #1
 8007178:	4827      	ldr	r0, [pc, #156]	; (8007218 <main+0x1c8>)
 800717a:	f001 f831 	bl	80081e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800717e:	2200      	movs	r2, #0
 8007180:	2180      	movs	r1, #128	; 0x80
 8007182:	4825      	ldr	r0, [pc, #148]	; (8007218 <main+0x1c8>)
 8007184:	f001 f82c 	bl	80081e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8007188:	2200      	movs	r2, #0
 800718a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800718e:	4822      	ldr	r0, [pc, #136]	; (8007218 <main+0x1c8>)
 8007190:	f001 f826 	bl	80081e0 <HAL_GPIO_WritePin>

		  HAL_Delay(100);
 8007194:	2064      	movs	r0, #100	; 0x64
 8007196:	f000 fd29 	bl	8007bec <HAL_Delay>


		  calculate();
 800719a:	f7ff fc2b 	bl	80069f4 <calculate>

		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800719e:	2200      	movs	r2, #0
 80071a0:	2101      	movs	r1, #1
 80071a2:	481d      	ldr	r0, [pc, #116]	; (8007218 <main+0x1c8>)
 80071a4:	f001 f81c 	bl	80081e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80071a8:	2201      	movs	r2, #1
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	481a      	ldr	r0, [pc, #104]	; (8007218 <main+0x1c8>)
 80071ae:	f001 f817 	bl	80081e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80071b2:	2201      	movs	r2, #1
 80071b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071b8:	4817      	ldr	r0, [pc, #92]	; (8007218 <main+0x1c8>)
 80071ba:	f001 f811 	bl	80081e0 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(500);
 80071be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071c2:	f000 fd13 	bl	8007bec <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 80071c6:	e7ca      	b.n	800715e <main+0x10e>
 80071c8:	2001cb9c 	.word	0x2001cb9c
 80071cc:	20000010 	.word	0x20000010
 80071d0:	2001cbfc 	.word	0x2001cbfc
 80071d4:	2001cbac 	.word	0x2001cbac
 80071d8:	2001cc08 	.word	0x2001cc08
 80071dc:	2001cbbc 	.word	0x2001cbbc
 80071e0:	2001cc14 	.word	0x2001cc14
 80071e4:	2001cbcc 	.word	0x2001cbcc
 80071e8:	2001cc20 	.word	0x2001cc20
 80071ec:	2001cbdc 	.word	0x2001cbdc
 80071f0:	2001cc2c 	.word	0x2001cc2c
 80071f4:	2001cbec 	.word	0x2001cbec
 80071f8:	2001cc38 	.word	0x2001cc38
 80071fc:	2001cc44 	.word	0x2001cc44
 8007200:	20000024 	.word	0x20000024
 8007204:	2001cc54 	.word	0x2001cc54
 8007208:	2001cc60 	.word	0x2001cc60
 800720c:	20000038 	.word	0x20000038
 8007210:	2001cc70 	.word	0x2001cc70
 8007214:	40020800 	.word	0x40020800
 8007218:	40020400 	.word	0x40020400
 800721c:	20000528 	.word	0x20000528
 8007220:	2001cce8 	.word	0x2001cce8

08007224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b094      	sub	sp, #80	; 0x50
 8007228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800722a:	f107 0320 	add.w	r3, r7, #32
 800722e:	2230      	movs	r2, #48	; 0x30
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f009 fa09 	bl	801064a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007248:	f001 fec4 	bl	8008fd4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800724c:	4b27      	ldr	r3, [pc, #156]	; (80072ec <SystemClock_Config+0xc8>)
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	4a26      	ldr	r2, [pc, #152]	; (80072ec <SystemClock_Config+0xc8>)
 8007252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007256:	6413      	str	r3, [r2, #64]	; 0x40
 8007258:	4b24      	ldr	r3, [pc, #144]	; (80072ec <SystemClock_Config+0xc8>)
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007264:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <SystemClock_Config+0xcc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <SystemClock_Config+0xcc>)
 800726e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <SystemClock_Config+0xcc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007280:	2301      	movs	r3, #1
 8007282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007284:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800728a:	2302      	movs	r3, #2
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800728e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007294:	2304      	movs	r3, #4
 8007296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007298:	2348      	movs	r3, #72	; 0x48
 800729a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800729c:	2302      	movs	r3, #2
 800729e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80072a0:	2303      	movs	r3, #3
 80072a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072a4:	f107 0320 	add.w	r3, r7, #32
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fea3 	bl	8008ff4 <HAL_RCC_OscConfig>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80072b4:	f000 f81e 	bl	80072f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072b8:	230f      	movs	r3, #15
 80072ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072bc:	2302      	movs	r3, #2
 80072be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80072c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	2102      	movs	r1, #2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 f931 	bl	800953c <HAL_RCC_ClockConfig>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80072e0:	f000 f808 	bl	80072f4 <Error_Handler>
  }
}
 80072e4:	bf00      	nop
 80072e6:	3750      	adds	r7, #80	; 0x50
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40007000 	.word	0x40007000

080072f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072f8:	b672      	cpsid	i
}
 80072fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80072fc:	e7fe      	b.n	80072fc <Error_Handler+0x8>
	...

08007300 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007304:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <MX_SPI1_Init+0x74>)
 8007306:	4a1c      	ldr	r2, [pc, #112]	; (8007378 <MX_SPI1_Init+0x78>)
 8007308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <MX_SPI1_Init+0x74>)
 800730c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007312:	4b18      	ldr	r3, [pc, #96]	; (8007374 <MX_SPI1_Init+0x74>)
 8007314:	2200      	movs	r2, #0
 8007316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007318:	4b16      	ldr	r3, [pc, #88]	; (8007374 <MX_SPI1_Init+0x74>)
 800731a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800731e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <MX_SPI1_Init+0x74>)
 8007322:	2200      	movs	r2, #0
 8007324:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007326:	4b13      	ldr	r3, [pc, #76]	; (8007374 <MX_SPI1_Init+0x74>)
 8007328:	2200      	movs	r2, #0
 800732a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <MX_SPI1_Init+0x74>)
 800732e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007332:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <MX_SPI1_Init+0x74>)
 8007336:	2200      	movs	r2, #0
 8007338:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <MX_SPI1_Init+0x74>)
 800733c:	2200      	movs	r2, #0
 800733e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <MX_SPI1_Init+0x74>)
 8007342:	2200      	movs	r2, #0
 8007344:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <MX_SPI1_Init+0x74>)
 8007348:	2200      	movs	r2, #0
 800734a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <MX_SPI1_Init+0x74>)
 800734e:	2207      	movs	r2, #7
 8007350:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <MX_SPI1_Init+0x74>)
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <MX_SPI1_Init+0x74>)
 800735a:	2208      	movs	r2, #8
 800735c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800735e:	4805      	ldr	r0, [pc, #20]	; (8007374 <MX_SPI1_Init+0x74>)
 8007360:	f002 ff02 	bl	800a168 <HAL_SPI_Init>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800736a:	f7ff ffc3 	bl	80072f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	2001cc7c 	.word	0x2001cc7c
 8007378:	40013000 	.word	0x40013000

0800737c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	609a      	str	r2, [r3, #8]
 8007390:	60da      	str	r2, [r3, #12]
 8007392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a25      	ldr	r2, [pc, #148]	; (8007430 <HAL_SPI_MspInit+0xb4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d143      	bne.n	8007426 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800739e:	4b25      	ldr	r3, [pc, #148]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	4a24      	ldr	r2, [pc, #144]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073a8:	6453      	str	r3, [r2, #68]	; 0x44
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b6:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6313      	str	r3, [r2, #48]	; 0x30
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ce:	4b19      	ldr	r3, [pc, #100]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	4a18      	ldr	r2, [pc, #96]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	6313      	str	r3, [r2, #48]	; 0x30
 80073da:	4b16      	ldr	r3, [pc, #88]	; (8007434 <HAL_SPI_MspInit+0xb8>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80073e6:	2360      	movs	r3, #96	; 0x60
 80073e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ea:	2302      	movs	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f2:	2303      	movs	r3, #3
 80073f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80073f6:	2305      	movs	r3, #5
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	4619      	mov	r1, r3
 8007400:	480d      	ldr	r0, [pc, #52]	; (8007438 <HAL_SPI_MspInit+0xbc>)
 8007402:	f000 fd29 	bl	8007e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007406:	2320      	movs	r3, #32
 8007408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740a:	2302      	movs	r3, #2
 800740c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007412:	2303      	movs	r3, #3
 8007414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007416:	2305      	movs	r3, #5
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	4619      	mov	r1, r3
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <HAL_SPI_MspInit+0xc0>)
 8007422:	f000 fd19 	bl	8007e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007426:	bf00      	nop
 8007428:	3728      	adds	r7, #40	; 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40013000 	.word	0x40013000
 8007434:	40023800 	.word	0x40023800
 8007438:	40020000 	.word	0x40020000
 800743c:	40020400 	.word	0x40020400

08007440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <HAL_MspInit+0x44>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	4a0e      	ldr	r2, [pc, #56]	; (8007484 <HAL_MspInit+0x44>)
 800744c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007450:	6413      	str	r3, [r2, #64]	; 0x40
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <HAL_MspInit+0x44>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_MspInit+0x44>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	4a08      	ldr	r2, [pc, #32]	; (8007484 <HAL_MspInit+0x44>)
 8007464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007468:	6453      	str	r3, [r2, #68]	; 0x44
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <HAL_MspInit+0x44>)
 800746c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40023800 	.word	0x40023800

08007488 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <SDTimer_Handler+0x40>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d006      	beq.n	80074a4 <SDTimer_Handler+0x1c>
    Timer1--;
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <SDTimer_Handler+0x40>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <SDTimer_Handler+0x40>)
 80074a2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <SDTimer_Handler+0x44>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <SDTimer_Handler+0x34>
    Timer2--;
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <SDTimer_Handler+0x44>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <SDTimer_Handler+0x44>)
 80074ba:	701a      	strb	r2, [r3, #0]
}
 80074bc:	bf00      	nop
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	2001cce1 	.word	0x2001cce1
 80074cc:	2001cce2 	.word	0x2001cce2

080074d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074d4:	e7fe      	b.n	80074d4 <NMI_Handler+0x4>

080074d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074d6:	b480      	push	{r7}
 80074d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074da:	e7fe      	b.n	80074da <HardFault_Handler+0x4>

080074dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074e0:	e7fe      	b.n	80074e0 <MemManage_Handler+0x4>

080074e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074e6:	e7fe      	b.n	80074e6 <BusFault_Handler+0x4>

080074e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074ec:	e7fe      	b.n	80074ec <UsageFault_Handler+0x4>

080074ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074ee:	b480      	push	{r7}
 80074f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800750a:	b480      	push	{r7}
 800750c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <SysTick_Handler+0x30>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3301      	adds	r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <SysTick_Handler+0x30>)
 8007528:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800752a:	4b07      	ldr	r3, [pc, #28]	; (8007548 <SysTick_Handler+0x30>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b09      	cmp	r3, #9
 8007532:	d904      	bls.n	800753e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <SysTick_Handler+0x30>)
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800753a:	f7ff ffa5 	bl	8007488 <SDTimer_Handler>
	  }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800753e:	f000 fb35 	bl	8007bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	2001cce0 	.word	0x2001cce0

0800754c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007550:	4802      	ldr	r0, [pc, #8]	; (800755c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8007552:	f003 fcca 	bl	800aeea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	2001cce8 	.word	0x2001cce8

08007560 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007564:	4802      	ldr	r0, [pc, #8]	; (8007570 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007566:	f003 fcc0 	bl	800aeea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	2001cce8 	.word	0x2001cce8

08007574 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007578:	4802      	ldr	r0, [pc, #8]	; (8007584 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800757a:	f003 fcb6 	bl	800aeea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	2001cce8 	.word	0x2001cce8

08007588 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800758c:	4802      	ldr	r0, [pc, #8]	; (8007598 <TIM1_CC_IRQHandler+0x10>)
 800758e:	f003 fcac 	bl	800aeea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8007592:	bf00      	nop
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2001cce8 	.word	0x2001cce8

0800759c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  return 1;
 80075a0:	2301      	movs	r3, #1
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <_kill>:

int _kill(int pid, int sig)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80075b6:	f009 f89b 	bl	80106f0 <__errno>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2216      	movs	r2, #22
 80075be:	601a      	str	r2, [r3, #0]
  return -1;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <_exit>:

void _exit (int status)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80075d4:	f04f 31ff 	mov.w	r1, #4294967295
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ffe7 	bl	80075ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80075de:	e7fe      	b.n	80075de <_exit+0x12>

080075e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e00a      	b.n	8007608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80075f2:	f3af 8000 	nop.w
 80075f6:	4601      	mov	r1, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	60ba      	str	r2, [r7, #8]
 80075fe:	b2ca      	uxtb	r2, r1
 8007600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	3301      	adds	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	dbf0      	blt.n	80075f2 <_read+0x12>
  }

  return len;
 8007610:	687b      	ldr	r3, [r7, #4]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e009      	b.n	8007640 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	60ba      	str	r2, [r7, #8]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	3301      	adds	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	dbf1      	blt.n	800762c <_write+0x12>
  }
  return len;
 8007648:	687b      	ldr	r3, [r7, #4]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_close>:

int _close(int file)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800767a:	605a      	str	r2, [r3, #4]
  return 0;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <_isatty>:

int _isatty(int file)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007692:	2301      	movs	r3, #1
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <_sbrk+0x5c>)
 80076c6:	4b15      	ldr	r3, [pc, #84]	; (800771c <_sbrk+0x60>)
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076d0:	4b13      	ldr	r3, [pc, #76]	; (8007720 <_sbrk+0x64>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <_sbrk+0x64>)
 80076da:	4a12      	ldr	r2, [pc, #72]	; (8007724 <_sbrk+0x68>)
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076de:	4b10      	ldr	r3, [pc, #64]	; (8007720 <_sbrk+0x64>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4413      	add	r3, r2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d207      	bcs.n	80076fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076ec:	f009 f800 	bl	80106f0 <__errno>
 80076f0:	4603      	mov	r3, r0
 80076f2:	220c      	movs	r2, #12
 80076f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e009      	b.n	8007710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076fc:	4b08      	ldr	r3, [pc, #32]	; (8007720 <_sbrk+0x64>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <_sbrk+0x64>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4413      	add	r3, r2
 800770a:	4a05      	ldr	r2, [pc, #20]	; (8007720 <_sbrk+0x64>)
 800770c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800770e:	68fb      	ldr	r3, [r7, #12]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20050000 	.word	0x20050000
 800771c:	00000400 	.word	0x00000400
 8007720:	2001cce4 	.word	0x2001cce4
 8007724:	2001d650 	.word	0x2001d650

08007728 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <SystemInit+0x20>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	4a05      	ldr	r2, [pc, #20]	; (8007748 <SystemInit+0x20>)
 8007734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007752:	f107 0310 	add.w	r3, r7, #16
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800776a:	4b20      	ldr	r3, [pc, #128]	; (80077ec <MX_TIM1_Init+0xa0>)
 800776c:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <MX_TIM1_Init+0xa4>)
 800776e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8007770:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <MX_TIM1_Init+0xa0>)
 8007772:	2247      	movs	r2, #71	; 0x47
 8007774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007776:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <MX_TIM1_Init+0xa0>)
 8007778:	2200      	movs	r2, #0
 800777a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800777c:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <MX_TIM1_Init+0xa0>)
 800777e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8007782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007784:	4b19      	ldr	r3, [pc, #100]	; (80077ec <MX_TIM1_Init+0xa0>)
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800778a:	4b18      	ldr	r3, [pc, #96]	; (80077ec <MX_TIM1_Init+0xa0>)
 800778c:	2200      	movs	r2, #0
 800778e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007790:	4b16      	ldr	r3, [pc, #88]	; (80077ec <MX_TIM1_Init+0xa0>)
 8007792:	2200      	movs	r2, #0
 8007794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007796:	4815      	ldr	r0, [pc, #84]	; (80077ec <MX_TIM1_Init+0xa0>)
 8007798:	f003 faa8 	bl	800acec <HAL_TIM_Base_Init>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80077a2:	f7ff fda7 	bl	80072f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80077ac:	f107 0310 	add.w	r3, r7, #16
 80077b0:	4619      	mov	r1, r3
 80077b2:	480e      	ldr	r0, [pc, #56]	; (80077ec <MX_TIM1_Init+0xa0>)
 80077b4:	f003 fcb8 	bl	800b128 <HAL_TIM_ConfigClockSource>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80077be:	f7ff fd99 	bl	80072f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4806      	ldr	r0, [pc, #24]	; (80077ec <MX_TIM1_Init+0xa0>)
 80077d4:	f003 fed4 	bl	800b580 <HAL_TIMEx_MasterConfigSynchronization>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80077de:	f7ff fd89 	bl	80072f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80077e2:	bf00      	nop
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	2001cce8 	.word	0x2001cce8
 80077f0:	40010000 	.word	0x40010000

080077f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a19      	ldr	r2, [pc, #100]	; (8007868 <HAL_TIM_Base_MspInit+0x74>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d12b      	bne.n	800785e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <HAL_TIM_Base_MspInit+0x78>)
 8007808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780a:	4a18      	ldr	r2, [pc, #96]	; (800786c <HAL_TIM_Base_MspInit+0x78>)
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	6453      	str	r3, [r2, #68]	; 0x44
 8007812:	4b16      	ldr	r3, [pc, #88]	; (800786c <HAL_TIM_Base_MspInit+0x78>)
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	2018      	movs	r0, #24
 8007824:	f000 fae1 	bl	8007dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007828:	2018      	movs	r0, #24
 800782a:	f000 fafa 	bl	8007e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800782e:	2200      	movs	r2, #0
 8007830:	2100      	movs	r1, #0
 8007832:	2019      	movs	r0, #25
 8007834:	f000 fad9 	bl	8007dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007838:	2019      	movs	r0, #25
 800783a:	f000 faf2 	bl	8007e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800783e:	2200      	movs	r2, #0
 8007840:	2100      	movs	r1, #0
 8007842:	201a      	movs	r0, #26
 8007844:	f000 fad1 	bl	8007dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007848:	201a      	movs	r0, #26
 800784a:	f000 faea 	bl	8007e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	201b      	movs	r0, #27
 8007854:	f000 fac9 	bl	8007dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007858:	201b      	movs	r0, #27
 800785a:	f000 fae2 	bl	8007e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	40023800 	.word	0x40023800

08007870 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007874:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 8007876:	4a15      	ldr	r2, [pc, #84]	; (80078cc <MX_USART3_UART_Init+0x5c>)
 8007878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800787a:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 800787c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 8007884:	2200      	movs	r2, #0
 8007886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 800788a:	2200      	movs	r2, #0
 800788c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 8007890:	2200      	movs	r2, #0
 8007892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007894:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 8007896:	220c      	movs	r2, #12
 8007898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80078a0:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80078b2:	4805      	ldr	r0, [pc, #20]	; (80078c8 <MX_USART3_UART_Init+0x58>)
 80078b4:	f003 ff10 	bl	800b6d8 <HAL_UART_Init>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80078be:	f7ff fd19 	bl	80072f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80078c2:	bf00      	nop
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2001cd34 	.word	0x2001cd34
 80078cc:	40004800 	.word	0x40004800

080078d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b0aa      	sub	sp, #168	; 0xa8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078e8:	f107 0310 	add.w	r3, r7, #16
 80078ec:	2284      	movs	r2, #132	; 0x84
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f008 feaa 	bl	801064a <memset>
  if(uartHandle->Instance==USART3)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a22      	ldr	r2, [pc, #136]	; (8007984 <HAL_UART_MspInit+0xb4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d13c      	bne.n	800797a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007904:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007906:	2300      	movs	r3, #0
 8007908:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800790a:	f107 0310 	add.w	r3, r7, #16
 800790e:	4618      	mov	r0, r3
 8007910:	f002 f83a 	bl	8009988 <HAL_RCCEx_PeriphCLKConfig>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800791a:	f7ff fceb 	bl	80072f4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800791e:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <HAL_UART_MspInit+0xb8>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	4a19      	ldr	r2, [pc, #100]	; (8007988 <HAL_UART_MspInit+0xb8>)
 8007924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007928:	6413      	str	r3, [r2, #64]	; 0x40
 800792a:	4b17      	ldr	r3, [pc, #92]	; (8007988 <HAL_UART_MspInit+0xb8>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <HAL_UART_MspInit+0xb8>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	4a13      	ldr	r2, [pc, #76]	; (8007988 <HAL_UART_MspInit+0xb8>)
 800793c:	f043 0308 	orr.w	r3, r3, #8
 8007940:	6313      	str	r3, [r2, #48]	; 0x30
 8007942:	4b11      	ldr	r3, [pc, #68]	; (8007988 <HAL_UART_MspInit+0xb8>)
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800794e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007956:	2302      	movs	r3, #2
 8007958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800795c:	2301      	movs	r3, #1
 800795e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007962:	2303      	movs	r3, #3
 8007964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007968:	2307      	movs	r3, #7
 800796a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800796e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007972:	4619      	mov	r1, r3
 8007974:	4805      	ldr	r0, [pc, #20]	; (800798c <HAL_UART_MspInit+0xbc>)
 8007976:	f000 fa6f 	bl	8007e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800797a:	bf00      	nop
 800797c:	37a8      	adds	r7, #168	; 0xa8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	40004800 	.word	0x40004800
 8007988:	40023800 	.word	0x40023800
 800798c:	40020c00 	.word	0x40020c00

08007990 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007994:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800799a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800799c:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800799e:	2206      	movs	r2, #6
 80079a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079a2:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079a4:	2202      	movs	r2, #2
 80079a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079a8:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079b0:	2202      	movs	r2, #2
 80079b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80079b4:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079b6:	2201      	movs	r2, #1
 80079b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079bc:	2200      	movs	r2, #0
 80079be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079d2:	4805      	ldr	r0, [pc, #20]	; (80079e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80079d4:	f001 f9b5 	bl	8008d42 <HAL_PCD_Init>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80079de:	f7ff fc89 	bl	80072f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	2001cdbc 	.word	0x2001cdbc

080079ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b0ac      	sub	sp, #176	; 0xb0
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a04:	f107 0318 	add.w	r3, r7, #24
 8007a08:	2284      	movs	r2, #132	; 0x84
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f008 fe1c 	bl	801064a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a1a:	d159      	bne.n	8007ad0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a28:	f107 0318 	add.w	r3, r7, #24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 ffab 	bl	8009988 <HAL_RCCEx_PeriphCLKConfig>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007a38:	f7ff fc5c 	bl	80072f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a3c:	4b26      	ldr	r3, [pc, #152]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	4a25      	ldr	r2, [pc, #148]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	6313      	str	r3, [r2, #48]	; 0x30
 8007a48:	4b23      	ldr	r3, [pc, #140]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007a54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a6e:	230a      	movs	r3, #10
 8007a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4818      	ldr	r0, [pc, #96]	; (8007adc <HAL_PCD_MspInit+0xf0>)
 8007a7c:	f000 f9ec 	bl	8007e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4810      	ldr	r0, [pc, #64]	; (8007adc <HAL_PCD_MspInit+0xf0>)
 8007a9c:	f000 f9dc 	bl	8007e58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	4a0c      	ldr	r2, [pc, #48]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aaa:	6353      	str	r3, [r2, #52]	; 0x34
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abc:	4a06      	ldr	r2, [pc, #24]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <HAL_PCD_MspInit+0xec>)
 8007ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	37b0      	adds	r7, #176	; 0xb0
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	40020000 	.word	0x40020000

08007ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ae4:	480d      	ldr	r0, [pc, #52]	; (8007b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007ae6:	490e      	ldr	r1, [pc, #56]	; (8007b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007ae8:	4a0e      	ldr	r2, [pc, #56]	; (8007b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007aec:	e002      	b.n	8007af4 <LoopCopyDataInit>

08007aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007af2:	3304      	adds	r3, #4

08007af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007af8:	d3f9      	bcc.n	8007aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007afa:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007afc:	4c0b      	ldr	r4, [pc, #44]	; (8007b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8007afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b00:	e001      	b.n	8007b06 <LoopFillZerobss>

08007b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b04:	3204      	adds	r2, #4

08007b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b08:	d3fb      	bcc.n	8007b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b0a:	f7ff fe0d 	bl	8007728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b0e:	f008 fdf5 	bl	80106fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b12:	f7ff fa9d 	bl	8007050 <main>
  bx  lr    
 8007b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b20:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8007b24:	08014b78 	.word	0x08014b78
  ldr r2, =_sbss
 8007b28:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8007b2c:	2001d650 	.word	0x2001d650

08007b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b30:	e7fe      	b.n	8007b30 <ADC_IRQHandler>

08007b32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b36:	2003      	movs	r0, #3
 8007b38:	f000 f94c 	bl	8007dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f000 f805 	bl	8007b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b42:	f7ff fc7d 	bl	8007440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <HAL_InitTick+0x54>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <HAL_InitTick+0x58>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f967 	bl	8007e3e <HAL_SYSTICK_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e00e      	b.n	8007b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b0f      	cmp	r3, #15
 8007b7e:	d80a      	bhi.n	8007b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b80:	2200      	movs	r2, #0
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	f000 f92f 	bl	8007dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b8c:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <HAL_InitTick+0x5c>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e000      	b.n	8007b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	2000004c 	.word	0x2000004c
 8007ba4:	20000054 	.word	0x20000054
 8007ba8:	20000050 	.word	0x20000050

08007bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <HAL_IncTick+0x20>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <HAL_IncTick+0x24>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4413      	add	r3, r2
 8007bbc:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <HAL_IncTick+0x24>)
 8007bbe:	6013      	str	r3, [r2, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000054 	.word	0x20000054
 8007bd0:	2001d2c4 	.word	0x2001d2c4

08007bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <HAL_GetTick+0x14>)
 8007bda:	681b      	ldr	r3, [r3, #0]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2001d2c4 	.word	0x2001d2c4

08007bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bf4:	f7ff ffee 	bl	8007bd4 <HAL_GetTick>
 8007bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d005      	beq.n	8007c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <HAL_Delay+0x44>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c12:	bf00      	nop
 8007c14:	f7ff ffde 	bl	8007bd4 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d8f7      	bhi.n	8007c14 <HAL_Delay+0x28>
  {
  }
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000054 	.word	0x20000054

08007c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c44:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <__NVIC_SetPriorityGrouping+0x40>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c50:	4013      	ands	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <__NVIC_SetPriorityGrouping+0x44>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c62:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <__NVIC_SetPriorityGrouping+0x40>)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	60d3      	str	r3, [r2, #12]
}
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	e000ed00 	.word	0xe000ed00
 8007c78:	05fa0000 	.word	0x05fa0000

08007c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <__NVIC_GetPriorityGrouping+0x18>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	f003 0307 	and.w	r3, r3, #7
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	e000ed00 	.word	0xe000ed00

08007c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	db0b      	blt.n	8007cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	f003 021f 	and.w	r2, r3, #31
 8007cb0:	4907      	ldr	r1, [pc, #28]	; (8007cd0 <__NVIC_EnableIRQ+0x38>)
 8007cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	2001      	movs	r0, #1
 8007cba:	fa00 f202 	lsl.w	r2, r0, r2
 8007cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e100 	.word	0xe000e100

08007cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6039      	str	r1, [r7, #0]
 8007cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db0a      	blt.n	8007cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	490c      	ldr	r1, [pc, #48]	; (8007d20 <__NVIC_SetPriority+0x4c>)
 8007cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf2:	0112      	lsls	r2, r2, #4
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cfc:	e00a      	b.n	8007d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4908      	ldr	r1, [pc, #32]	; (8007d24 <__NVIC_SetPriority+0x50>)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	3b04      	subs	r3, #4
 8007d0c:	0112      	lsls	r2, r2, #4
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	440b      	add	r3, r1
 8007d12:	761a      	strb	r2, [r3, #24]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	e000e100 	.word	0xe000e100
 8007d24:	e000ed00 	.word	0xe000ed00

08007d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b089      	sub	sp, #36	; 0x24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f1c3 0307 	rsb	r3, r3, #7
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	bf28      	it	cs
 8007d46:	2304      	movcs	r3, #4
 8007d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d902      	bls.n	8007d58 <NVIC_EncodePriority+0x30>
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	3b03      	subs	r3, #3
 8007d56:	e000      	b.n	8007d5a <NVIC_EncodePriority+0x32>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	43da      	mvns	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	401a      	ands	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d70:	f04f 31ff 	mov.w	r1, #4294967295
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	43d9      	mvns	r1, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d80:	4313      	orrs	r3, r2
         );
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3724      	adds	r7, #36	; 0x24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007da0:	d301      	bcc.n	8007da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007da2:	2301      	movs	r3, #1
 8007da4:	e00f      	b.n	8007dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007da6:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <SysTick_Config+0x40>)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007dae:	210f      	movs	r1, #15
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	f7ff ff8e 	bl	8007cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <SysTick_Config+0x40>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <SysTick_Config+0x40>)
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000e010 	.word	0xe000e010

08007dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff ff29 	bl	8007c34 <__NVIC_SetPriorityGrouping>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	4603      	mov	r3, r0
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007dfc:	f7ff ff3e 	bl	8007c7c <__NVIC_GetPriorityGrouping>
 8007e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	6978      	ldr	r0, [r7, #20]
 8007e08:	f7ff ff8e 	bl	8007d28 <NVIC_EncodePriority>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff ff5d 	bl	8007cd4 <__NVIC_SetPriority>
}
 8007e1a:	bf00      	nop
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4603      	mov	r3, r0
 8007e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff ff31 	bl	8007c98 <__NVIC_EnableIRQ>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff ffa2 	bl	8007d90 <SysTick_Config>
 8007e4c:	4603      	mov	r3, r0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e175      	b.n	8008164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e78:	2201      	movs	r2, #1
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	f040 8164 	bne.w	800815e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d005      	beq.n	8007eae <HAL_GPIO_Init+0x56>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d130      	bne.n	8007f10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	2203      	movs	r2, #3
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 0201 	and.w	r2, r3, #1
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d017      	beq.n	8007f4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	2203      	movs	r2, #3
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4013      	ands	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d123      	bne.n	8007fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	08da      	lsrs	r2, r3, #3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3208      	adds	r2, #8
 8007f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	220f      	movs	r2, #15
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	08da      	lsrs	r2, r3, #3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3208      	adds	r2, #8
 8007f9a:	69b9      	ldr	r1, [r7, #24]
 8007f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	2203      	movs	r2, #3
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f003 0203 	and.w	r2, r3, #3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80be 	beq.w	800815e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fe2:	4b66      	ldr	r3, [pc, #408]	; (800817c <HAL_GPIO_Init+0x324>)
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe6:	4a65      	ldr	r2, [pc, #404]	; (800817c <HAL_GPIO_Init+0x324>)
 8007fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fec:	6453      	str	r3, [r2, #68]	; 0x44
 8007fee:	4b63      	ldr	r3, [pc, #396]	; (800817c <HAL_GPIO_Init+0x324>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007ffa:	4a61      	ldr	r2, [pc, #388]	; (8008180 <HAL_GPIO_Init+0x328>)
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	089b      	lsrs	r3, r3, #2
 8008000:	3302      	adds	r3, #2
 8008002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	220f      	movs	r2, #15
 8008012:	fa02 f303 	lsl.w	r3, r2, r3
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a58      	ldr	r2, [pc, #352]	; (8008184 <HAL_GPIO_Init+0x32c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d037      	beq.n	8008096 <HAL_GPIO_Init+0x23e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a57      	ldr	r2, [pc, #348]	; (8008188 <HAL_GPIO_Init+0x330>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d031      	beq.n	8008092 <HAL_GPIO_Init+0x23a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a56      	ldr	r2, [pc, #344]	; (800818c <HAL_GPIO_Init+0x334>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d02b      	beq.n	800808e <HAL_GPIO_Init+0x236>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a55      	ldr	r2, [pc, #340]	; (8008190 <HAL_GPIO_Init+0x338>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d025      	beq.n	800808a <HAL_GPIO_Init+0x232>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a54      	ldr	r2, [pc, #336]	; (8008194 <HAL_GPIO_Init+0x33c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01f      	beq.n	8008086 <HAL_GPIO_Init+0x22e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a53      	ldr	r2, [pc, #332]	; (8008198 <HAL_GPIO_Init+0x340>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d019      	beq.n	8008082 <HAL_GPIO_Init+0x22a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a52      	ldr	r2, [pc, #328]	; (800819c <HAL_GPIO_Init+0x344>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <HAL_GPIO_Init+0x226>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a51      	ldr	r2, [pc, #324]	; (80081a0 <HAL_GPIO_Init+0x348>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00d      	beq.n	800807a <HAL_GPIO_Init+0x222>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a50      	ldr	r2, [pc, #320]	; (80081a4 <HAL_GPIO_Init+0x34c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d007      	beq.n	8008076 <HAL_GPIO_Init+0x21e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a4f      	ldr	r2, [pc, #316]	; (80081a8 <HAL_GPIO_Init+0x350>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d101      	bne.n	8008072 <HAL_GPIO_Init+0x21a>
 800806e:	2309      	movs	r3, #9
 8008070:	e012      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008072:	230a      	movs	r3, #10
 8008074:	e010      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008076:	2308      	movs	r3, #8
 8008078:	e00e      	b.n	8008098 <HAL_GPIO_Init+0x240>
 800807a:	2307      	movs	r3, #7
 800807c:	e00c      	b.n	8008098 <HAL_GPIO_Init+0x240>
 800807e:	2306      	movs	r3, #6
 8008080:	e00a      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008082:	2305      	movs	r3, #5
 8008084:	e008      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008086:	2304      	movs	r3, #4
 8008088:	e006      	b.n	8008098 <HAL_GPIO_Init+0x240>
 800808a:	2303      	movs	r3, #3
 800808c:	e004      	b.n	8008098 <HAL_GPIO_Init+0x240>
 800808e:	2302      	movs	r3, #2
 8008090:	e002      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <HAL_GPIO_Init+0x240>
 8008096:	2300      	movs	r3, #0
 8008098:	69fa      	ldr	r2, [r7, #28]
 800809a:	f002 0203 	and.w	r2, r2, #3
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	4093      	lsls	r3, r2
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80080a8:	4935      	ldr	r1, [pc, #212]	; (8008180 <HAL_GPIO_Init+0x328>)
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	089b      	lsrs	r3, r3, #2
 80080ae:	3302      	adds	r3, #2
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080b6:	4b3d      	ldr	r3, [pc, #244]	; (80081ac <HAL_GPIO_Init+0x354>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	43db      	mvns	r3, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080da:	4a34      	ldr	r2, [pc, #208]	; (80081ac <HAL_GPIO_Init+0x354>)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080e0:	4b32      	ldr	r3, [pc, #200]	; (80081ac <HAL_GPIO_Init+0x354>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	4013      	ands	r3, r2
 80080ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008104:	4a29      	ldr	r2, [pc, #164]	; (80081ac <HAL_GPIO_Init+0x354>)
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800810a:	4b28      	ldr	r3, [pc, #160]	; (80081ac <HAL_GPIO_Init+0x354>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	43db      	mvns	r3, r3
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	4013      	ands	r3, r2
 8008118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800812e:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <HAL_GPIO_Init+0x354>)
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008134:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <HAL_GPIO_Init+0x354>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	43db      	mvns	r3, r3
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	4013      	ands	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008158:	4a14      	ldr	r2, [pc, #80]	; (80081ac <HAL_GPIO_Init+0x354>)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	3301      	adds	r3, #1
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b0f      	cmp	r3, #15
 8008168:	f67f ae86 	bls.w	8007e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	3724      	adds	r7, #36	; 0x24
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40023800 	.word	0x40023800
 8008180:	40013800 	.word	0x40013800
 8008184:	40020000 	.word	0x40020000
 8008188:	40020400 	.word	0x40020400
 800818c:	40020800 	.word	0x40020800
 8008190:	40020c00 	.word	0x40020c00
 8008194:	40021000 	.word	0x40021000
 8008198:	40021400 	.word	0x40021400
 800819c:	40021800 	.word	0x40021800
 80081a0:	40021c00 	.word	0x40021c00
 80081a4:	40022000 	.word	0x40022000
 80081a8:	40022400 	.word	0x40022400
 80081ac:	40013c00 	.word	0x40013c00

080081b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	887b      	ldrh	r3, [r7, #2]
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
 80081cc:	e001      	b.n	80081d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	807b      	strh	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081f0:	787b      	ldrb	r3, [r7, #1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081f6:	887a      	ldrh	r2, [r7, #2]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80081fc:	e003      	b.n	8008206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80081fe:	887b      	ldrh	r3, [r7, #2]
 8008200:	041a      	lsls	r2, r3, #16
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	619a      	str	r2, [r3, #24]
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008224:	887a      	ldrh	r2, [r7, #2]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4013      	ands	r3, r2
 800822a:	041a      	lsls	r2, r3, #16
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	43d9      	mvns	r1, r3
 8008230:	887b      	ldrh	r3, [r7, #2]
 8008232:	400b      	ands	r3, r1
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	619a      	str	r2, [r3, #24]
}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e07f      	b.n	800835a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fd f862 	bl	8005338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008298:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d107      	bne.n	80082c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	e006      	b.n	80082d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80082ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d104      	bne.n	80082e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6859      	ldr	r1, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_I2C_Init+0x11c>)
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69d9      	ldr	r1, [r3, #28]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1a      	ldr	r2, [r3, #32]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	02008000 	.word	0x02008000

08008368 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	817b      	strh	r3, [r7, #10]
 8008378:	4613      	mov	r3, r2
 800837a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b20      	cmp	r3, #32
 8008386:	f040 80da 	bne.w	800853e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_I2C_Master_Transmit+0x30>
 8008394:	2302      	movs	r3, #2
 8008396:	e0d3      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083a0:	f7ff fc18 	bl	8007bd4 <HAL_GetTick>
 80083a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2319      	movs	r3, #25
 80083ac:	2201      	movs	r2, #1
 80083ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 f9e6 	bl	8008784 <I2C_WaitOnFlagUntilTimeout>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e0be      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2221      	movs	r2, #33	; 0x21
 80083c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2210      	movs	r2, #16
 80083ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	893a      	ldrh	r2, [r7, #8]
 80083e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2bff      	cmp	r3, #255	; 0xff
 80083f2:	d90e      	bls.n	8008412 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	22ff      	movs	r2, #255	; 0xff
 80083f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	8979      	ldrh	r1, [r7, #10]
 8008402:	4b51      	ldr	r3, [pc, #324]	; (8008548 <HAL_I2C_Master_Transmit+0x1e0>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fbd0 	bl	8008bb0 <I2C_TransferConfig>
 8008410:	e06c      	b.n	80084ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008420:	b2da      	uxtb	r2, r3
 8008422:	8979      	ldrh	r1, [r7, #10]
 8008424:	4b48      	ldr	r3, [pc, #288]	; (8008548 <HAL_I2C_Master_Transmit+0x1e0>)
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fbbf 	bl	8008bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008432:	e05b      	b.n	80084ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	6a39      	ldr	r1, [r7, #32]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f9e3 	bl	8008804 <I2C_WaitOnTXISFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e07b      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d034      	beq.n	80084ec <HAL_I2C_Master_Transmit+0x184>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d130      	bne.n	80084ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2200      	movs	r2, #0
 8008492:	2180      	movs	r1, #128	; 0x80
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f975 	bl	8008784 <I2C_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04d      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2bff      	cmp	r3, #255	; 0xff
 80084ac:	d90e      	bls.n	80084cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	22ff      	movs	r2, #255	; 0xff
 80084b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	8979      	ldrh	r1, [r7, #10]
 80084bc:	2300      	movs	r3, #0
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fb73 	bl	8008bb0 <I2C_TransferConfig>
 80084ca:	e00f      	b.n	80084ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	8979      	ldrh	r1, [r7, #10]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fb62 	bl	8008bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d19e      	bne.n	8008434 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f9c2 	bl	8008884 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e01a      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2220      	movs	r2, #32
 8008510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6859      	ldr	r1, [r3, #4]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <HAL_I2C_Master_Transmit+0x1e4>)
 800851e:	400b      	ands	r3, r1
 8008520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	e000      	b.n	8008540 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800853e:	2302      	movs	r3, #2
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	80002000 	.word	0x80002000
 800854c:	fe00e800 	.word	0xfe00e800

08008550 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	461a      	mov	r2, r3
 800855c:	460b      	mov	r3, r1
 800855e:	817b      	strh	r3, [r7, #10]
 8008560:	4613      	mov	r3, r2
 8008562:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b20      	cmp	r3, #32
 800856e:	f040 80db 	bne.w	8008728 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_I2C_Master_Receive+0x30>
 800857c:	2302      	movs	r3, #2
 800857e:	e0d4      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008588:	f7ff fb24 	bl	8007bd4 <HAL_GetTick>
 800858c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	2319      	movs	r3, #25
 8008594:	2201      	movs	r2, #1
 8008596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 f8f2 	bl	8008784 <I2C_WaitOnFlagUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e0bf      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2222      	movs	r2, #34	; 0x22
 80085ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2210      	movs	r2, #16
 80085b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	893a      	ldrh	r2, [r7, #8]
 80085ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	2bff      	cmp	r3, #255	; 0xff
 80085da:	d90e      	bls.n	80085fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	22ff      	movs	r2, #255	; 0xff
 80085e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	8979      	ldrh	r1, [r7, #10]
 80085ea:	4b52      	ldr	r3, [pc, #328]	; (8008734 <HAL_I2C_Master_Receive+0x1e4>)
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fadc 	bl	8008bb0 <I2C_TransferConfig>
 80085f8:	e06d      	b.n	80086d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008608:	b2da      	uxtb	r2, r3
 800860a:	8979      	ldrh	r1, [r7, #10]
 800860c:	4b49      	ldr	r3, [pc, #292]	; (8008734 <HAL_I2C_Master_Receive+0x1e4>)
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 facb 	bl	8008bb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800861a:	e05c      	b.n	80086d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	6a39      	ldr	r1, [r7, #32]
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f96b 	bl	80088fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e07c      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d034      	beq.n	80086d6 <HAL_I2C_Master_Receive+0x186>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008670:	2b00      	cmp	r3, #0
 8008672:	d130      	bne.n	80086d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	2200      	movs	r2, #0
 800867c:	2180      	movs	r1, #128	; 0x80
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f880 	bl	8008784 <I2C_WaitOnFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e04d      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008692:	b29b      	uxth	r3, r3
 8008694:	2bff      	cmp	r3, #255	; 0xff
 8008696:	d90e      	bls.n	80086b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	22ff      	movs	r2, #255	; 0xff
 800869c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	8979      	ldrh	r1, [r7, #10]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fa7e 	bl	8008bb0 <I2C_TransferConfig>
 80086b4:	e00f      	b.n	80086d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	8979      	ldrh	r1, [r7, #10]
 80086c8:	2300      	movs	r3, #0
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fa6d 	bl	8008bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d19d      	bne.n	800861c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	6a39      	ldr	r1, [r7, #32]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f8cd 	bl	8008884 <I2C_WaitOnSTOPFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e01a      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2220      	movs	r2, #32
 80086fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6859      	ldr	r1, [r3, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <HAL_I2C_Master_Receive+0x1e8>)
 8008708:	400b      	ands	r3, r1
 800870a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008728:	2302      	movs	r3, #2
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	80002400 	.word	0x80002400
 8008738:	fe00e800 	.word	0xfe00e800

0800873c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	d103      	bne.n	800875a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b01      	cmp	r3, #1
 8008766:	d007      	beq.n	8008778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	619a      	str	r2, [r3, #24]
  }
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	4613      	mov	r3, r2
 8008792:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008794:	e022      	b.n	80087dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879c:	d01e      	beq.n	80087dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879e:	f7ff fa19 	bl	8007bd4 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d302      	bcc.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d113      	bne.n	80087dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	f043 0220 	orr.w	r2, r3, #32
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e00f      	b.n	80087fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	4013      	ands	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	461a      	mov	r2, r3
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d0cd      	beq.n	8008796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008810:	e02c      	b.n	800886c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f8ea 	bl	80089f0 <I2C_IsErrorOccurred>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e02a      	b.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d01e      	beq.n	800886c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882e:	f7ff f9d1 	bl	8007bd4 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d113      	bne.n	800886c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e007      	b.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b02      	cmp	r3, #2
 8008878:	d1cb      	bne.n	8008812 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008890:	e028      	b.n	80088e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f8aa 	bl	80089f0 <I2C_IsErrorOccurred>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e026      	b.n	80088f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a6:	f7ff f995 	bl	8007bd4 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d113      	bne.n	80088e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	f043 0220 	orr.w	r2, r3, #32
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e007      	b.n	80088f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d1cf      	bne.n	8008892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008908:	e064      	b.n	80089d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f86e 	bl	80089f0 <I2C_IsErrorOccurred>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e062      	b.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0320 	and.w	r3, r3, #32
 8008928:	2b20      	cmp	r3, #32
 800892a:	d138      	bne.n	800899e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d105      	bne.n	8008946 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	e04e      	b.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b10      	cmp	r3, #16
 8008952:	d107      	bne.n	8008964 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2210      	movs	r2, #16
 800895a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2204      	movs	r2, #4
 8008960:	645a      	str	r2, [r3, #68]	; 0x44
 8008962:	e002      	b.n	800896a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2220      	movs	r2, #32
 8008970:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6859      	ldr	r1, [r3, #4]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800897e:	400b      	ands	r3, r1
 8008980:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e022      	b.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899e:	f7ff f919 	bl	8007bd4 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d302      	bcc.n	80089b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10f      	bne.n	80089d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	f043 0220 	orr.w	r2, r3, #32
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e007      	b.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d193      	bne.n	800890a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	fe00e800 	.word	0xfe00e800

080089f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d068      	beq.n	8008aee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2210      	movs	r2, #16
 8008a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a24:	e049      	b.n	8008aba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d045      	beq.n	8008aba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a2e:	f7ff f8d1 	bl	8007bd4 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d302      	bcc.n	8008a44 <I2C_IsErrorOccurred+0x54>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d13a      	bne.n	8008aba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a66:	d121      	bne.n	8008aac <I2C_IsErrorOccurred+0xbc>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a6e:	d01d      	beq.n	8008aac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a70:	7cfb      	ldrb	r3, [r7, #19]
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d01a      	beq.n	8008aac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a86:	f7ff f8a5 	bl	8007bd4 <HAL_GetTick>
 8008a8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a8c:	e00e      	b.n	8008aac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a8e:	f7ff f8a1 	bl	8007bd4 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	2b19      	cmp	r3, #25
 8008a9a:	d907      	bls.n	8008aac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f043 0320 	orr.w	r3, r3, #32
 8008aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008aaa:	e006      	b.n	8008aba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d1e9      	bne.n	8008a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d003      	beq.n	8008ad0 <I2C_IsErrorOccurred+0xe0>
 8008ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0aa      	beq.n	8008a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d103      	bne.n	8008ae0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2220      	movs	r2, #32
 8008ade:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	f043 0304 	orr.w	r3, r3, #4
 8008ae6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f043 0308 	orr.w	r3, r3, #8
 8008b28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	f043 0302 	orr.w	r3, r3, #2
 8008b4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01c      	beq.n	8008b9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fde9 	bl	800873c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6859      	ldr	r1, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <I2C_IsErrorOccurred+0x1bc>)
 8008b76:	400b      	ands	r3, r1
 8008b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	431a      	orrs	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3728      	adds	r7, #40	; 0x28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	fe00e800 	.word	0xfe00e800

08008bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	817b      	strh	r3, [r7, #10]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bc2:	897b      	ldrh	r3, [r7, #10]
 8008bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bc8:	7a7b      	ldrb	r3, [r7, #9]
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	0d5b      	lsrs	r3, r3, #21
 8008bea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008bee:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <I2C_TransferConfig+0x60>)
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	ea02 0103 	and.w	r1, r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	03ff63ff 	.word	0x03ff63ff

08008c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d138      	bne.n	8008c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e032      	b.n	8008c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2224      	movs	r2, #36	; 0x24
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e000      	b.n	8008c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d139      	bne.n	8008d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e033      	b.n	8008d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	; 0x24
 8008cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d44:	b08f      	sub	sp, #60	; 0x3c
 8008d46:	af0a      	add	r7, sp, #40	; 0x28
 8008d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e116      	b.n	8008f82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d106      	bne.n	8008d74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fe fe3c 	bl	80079ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2203      	movs	r2, #3
 8008d78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f003 f94a 	bl	800c02c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	603b      	str	r3, [r7, #0]
 8008d9e:	687e      	ldr	r6, [r7, #4]
 8008da0:	466d      	mov	r5, sp
 8008da2:	f106 0410 	add.w	r4, r6, #16
 8008da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8008db6:	1d33      	adds	r3, r6, #4
 8008db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dba:	6838      	ldr	r0, [r7, #0]
 8008dbc:	f003 f8de 	bl	800bf7c <USB_CoreInit>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e0d7      	b.n	8008f82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f003 f938 	bl	800c04e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
 8008de2:	e04a      	b.n	8008e7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	333d      	adds	r3, #61	; 0x3d
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008df8:	7bfa      	ldrb	r2, [r7, #15]
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	333c      	adds	r3, #60	; 0x3c
 8008e08:	7bfa      	ldrb	r2, [r7, #15]
 8008e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008e0c:	7bfa      	ldrb	r2, [r7, #15]
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	b298      	uxth	r0, r3
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3344      	adds	r3, #68	; 0x44
 8008e20:	4602      	mov	r2, r0
 8008e22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e24:	7bfa      	ldrb	r2, [r7, #15]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3340      	adds	r3, #64	; 0x40
 8008e34:	2200      	movs	r2, #0
 8008e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008e38:	7bfa      	ldrb	r2, [r7, #15]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	3348      	adds	r3, #72	; 0x48
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	334c      	adds	r3, #76	; 0x4c
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3354      	adds	r3, #84	; 0x54
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	3301      	adds	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
 8008e7a:	7bfa      	ldrb	r2, [r7, #15]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d3af      	bcc.n	8008de4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e044      	b.n	8008f14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e8a:	7bfa      	ldrb	r2, [r7, #15]
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008ea0:	7bfa      	ldrb	r2, [r7, #15]
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008eb2:	7bfa      	ldrb	r2, [r7, #15]
 8008eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008eb6:	7bfa      	ldrb	r2, [r7, #15]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ecc:	7bfa      	ldrb	r2, [r7, #15]
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ee2:	7bfa      	ldrb	r2, [r7, #15]
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ef8:	7bfa      	ldrb	r2, [r7, #15]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3301      	adds	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	7bfa      	ldrb	r2, [r7, #15]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d3b5      	bcc.n	8008e8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	687e      	ldr	r6, [r7, #4]
 8008f26:	466d      	mov	r5, sp
 8008f28:	f106 0410 	add.w	r4, r6, #16
 8008f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f3c:	1d33      	adds	r3, r6, #4
 8008f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f40:	6838      	ldr	r0, [r7, #0]
 8008f42:	f003 f8d1 	bl	800c0e8 <USB_DevInit>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e014      	b.n	8008f82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d102      	bne.n	8008f76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f80b 	bl	8008f8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f003 fa8f 	bl	800c49e <USB_DevDisconnect>

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008f8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	10000003 	.word	0x10000003

08008fd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a04      	ldr	r2, [pc, #16]	; (8008ff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe2:	6013      	str	r3, [r2, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40007000 	.word	0x40007000

08008ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e291      	b.n	800952e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8087 	beq.w	8009126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009018:	4b96      	ldr	r3, [pc, #600]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 030c 	and.w	r3, r3, #12
 8009020:	2b04      	cmp	r3, #4
 8009022:	d00c      	beq.n	800903e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009024:	4b93      	ldr	r3, [pc, #588]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 030c 	and.w	r3, r3, #12
 800902c:	2b08      	cmp	r3, #8
 800902e:	d112      	bne.n	8009056 <HAL_RCC_OscConfig+0x62>
 8009030:	4b90      	ldr	r3, [pc, #576]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800903c:	d10b      	bne.n	8009056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903e:	4b8d      	ldr	r3, [pc, #564]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d06c      	beq.n	8009124 <HAL_RCC_OscConfig+0x130>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d168      	bne.n	8009124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e26b      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905e:	d106      	bne.n	800906e <HAL_RCC_OscConfig+0x7a>
 8009060:	4b84      	ldr	r3, [pc, #528]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a83      	ldr	r2, [pc, #524]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e02e      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <HAL_RCC_OscConfig+0x9c>
 8009076:	4b7f      	ldr	r3, [pc, #508]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a7e      	ldr	r2, [pc, #504]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800907c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4b7c      	ldr	r3, [pc, #496]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a7b      	ldr	r2, [pc, #492]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e01d      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009098:	d10c      	bne.n	80090b4 <HAL_RCC_OscConfig+0xc0>
 800909a:	4b76      	ldr	r3, [pc, #472]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a75      	ldr	r2, [pc, #468]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4b73      	ldr	r3, [pc, #460]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a72      	ldr	r2, [pc, #456]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	e00b      	b.n	80090cc <HAL_RCC_OscConfig+0xd8>
 80090b4:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a6e      	ldr	r2, [pc, #440]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4b6c      	ldr	r3, [pc, #432]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a6b      	ldr	r2, [pc, #428]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d013      	beq.n	80090fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d4:	f7fe fd7e 	bl	8007bd4 <HAL_GetTick>
 80090d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090da:	e008      	b.n	80090ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090dc:	f7fe fd7a 	bl	8007bd4 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b64      	cmp	r3, #100	; 0x64
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e21f      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	4b61      	ldr	r3, [pc, #388]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f0      	beq.n	80090dc <HAL_RCC_OscConfig+0xe8>
 80090fa:	e014      	b.n	8009126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fc:	f7fe fd6a 	bl	8007bd4 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009104:	f7fe fd66 	bl	8007bd4 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	; 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e20b      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009116:	4b57      	ldr	r3, [pc, #348]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCC_OscConfig+0x110>
 8009122:	e000      	b.n	8009126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d069      	beq.n	8009206 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009132:	4b50      	ldr	r3, [pc, #320]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 030c 	and.w	r3, r3, #12
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800913e:	4b4d      	ldr	r3, [pc, #308]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 030c 	and.w	r3, r3, #12
 8009146:	2b08      	cmp	r3, #8
 8009148:	d11c      	bne.n	8009184 <HAL_RCC_OscConfig+0x190>
 800914a:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d116      	bne.n	8009184 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009156:	4b47      	ldr	r3, [pc, #284]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_RCC_OscConfig+0x17a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d001      	beq.n	800916e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e1df      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800916e:	4b41      	ldr	r3, [pc, #260]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	493d      	ldr	r1, [pc, #244]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800917e:	4313      	orrs	r3, r2
 8009180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009182:	e040      	b.n	8009206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d023      	beq.n	80091d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800918c:	4b39      	ldr	r3, [pc, #228]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a38      	ldr	r2, [pc, #224]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009192:	f043 0301 	orr.w	r3, r3, #1
 8009196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fe fd1c 	bl	8007bd4 <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091a0:	f7fe fd18 	bl	8007bd4 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e1bd      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091be:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4929      	ldr	r1, [pc, #164]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	e018      	b.n	8009206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091d4:	4b27      	ldr	r3, [pc, #156]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a26      	ldr	r2, [pc, #152]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e0:	f7fe fcf8 	bl	8007bd4 <HAL_GetTick>
 80091e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091e8:	f7fe fcf4 	bl	8007bd4 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e199      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f0      	bne.n	80091e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d038      	beq.n	8009284 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d019      	beq.n	800924e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800921a:	4b16      	ldr	r3, [pc, #88]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 800921c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921e:	4a15      	ldr	r2, [pc, #84]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009220:	f043 0301 	orr.w	r3, r3, #1
 8009224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009226:	f7fe fcd5 	bl	8007bd4 <HAL_GetTick>
 800922a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800922e:	f7fe fcd1 	bl	8007bd4 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e176      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0f0      	beq.n	800922e <HAL_RCC_OscConfig+0x23a>
 800924c:	e01a      	b.n	8009284 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009252:	4a08      	ldr	r2, [pc, #32]	; (8009274 <HAL_RCC_OscConfig+0x280>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800925a:	f7fe fcbb 	bl	8007bd4 <HAL_GetTick>
 800925e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009260:	e00a      	b.n	8009278 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009262:	f7fe fcb7 	bl	8007bd4 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d903      	bls.n	8009278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e15c      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
 8009274:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009278:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800927a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1ee      	bne.n	8009262 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80a4 	beq.w	80093da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009292:	4b8b      	ldr	r3, [pc, #556]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10d      	bne.n	80092ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800929e:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	4a87      	ldr	r2, [pc, #540]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a8:	6413      	str	r3, [r2, #64]	; 0x40
 80092aa:	4b85      	ldr	r3, [pc, #532]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ba:	4b82      	ldr	r3, [pc, #520]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d118      	bne.n	80092f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80092c6:	4b7f      	ldr	r3, [pc, #508]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a7e      	ldr	r2, [pc, #504]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d2:	f7fe fc7f 	bl	8007bd4 <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092da:	f7fe fc7b 	bl	8007bd4 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b64      	cmp	r3, #100	; 0x64
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e120      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ec:	4b75      	ldr	r3, [pc, #468]	; (80094c4 <HAL_RCC_OscConfig+0x4d0>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d106      	bne.n	800930e <HAL_RCC_OscConfig+0x31a>
 8009300:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	4a6e      	ldr	r2, [pc, #440]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6713      	str	r3, [r2, #112]	; 0x70
 800930c:	e02d      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <HAL_RCC_OscConfig+0x33c>
 8009316:	4b6a      	ldr	r3, [pc, #424]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931a:	4a69      	ldr	r2, [pc, #420]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	6713      	str	r3, [r2, #112]	; 0x70
 8009322:	4b67      	ldr	r3, [pc, #412]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	4a66      	ldr	r2, [pc, #408]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009328:	f023 0304 	bic.w	r3, r3, #4
 800932c:	6713      	str	r3, [r2, #112]	; 0x70
 800932e:	e01c      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b05      	cmp	r3, #5
 8009336:	d10c      	bne.n	8009352 <HAL_RCC_OscConfig+0x35e>
 8009338:	4b61      	ldr	r3, [pc, #388]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933c:	4a60      	ldr	r2, [pc, #384]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800933e:	f043 0304 	orr.w	r3, r3, #4
 8009342:	6713      	str	r3, [r2, #112]	; 0x70
 8009344:	4b5e      	ldr	r3, [pc, #376]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	4a5d      	ldr	r2, [pc, #372]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	6713      	str	r3, [r2, #112]	; 0x70
 8009350:	e00b      	b.n	800936a <HAL_RCC_OscConfig+0x376>
 8009352:	4b5b      	ldr	r3, [pc, #364]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	4a5a      	ldr	r2, [pc, #360]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	6713      	str	r3, [r2, #112]	; 0x70
 800935e:	4b58      	ldr	r3, [pc, #352]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	4a57      	ldr	r2, [pc, #348]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009364:	f023 0304 	bic.w	r3, r3, #4
 8009368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d015      	beq.n	800939e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009372:	f7fe fc2f 	bl	8007bd4 <HAL_GetTick>
 8009376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009378:	e00a      	b.n	8009390 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800937a:	f7fe fc2b 	bl	8007bd4 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	f241 3288 	movw	r2, #5000	; 0x1388
 8009388:	4293      	cmp	r3, r2
 800938a:	d901      	bls.n	8009390 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e0ce      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009390:	4b4b      	ldr	r3, [pc, #300]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0ee      	beq.n	800937a <HAL_RCC_OscConfig+0x386>
 800939c:	e014      	b.n	80093c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800939e:	f7fe fc19 	bl	8007bd4 <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093a4:	e00a      	b.n	80093bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a6:	f7fe fc15 	bl	8007bd4 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e0b8      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093bc:	4b40      	ldr	r3, [pc, #256]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ee      	bne.n	80093a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d105      	bne.n	80093da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ce:	4b3c      	ldr	r3, [pc, #240]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a4 	beq.w	800952c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093e4:	4b36      	ldr	r3, [pc, #216]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 030c 	and.w	r3, r3, #12
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d06b      	beq.n	80094c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d149      	bne.n	800948c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093f8:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a30      	ldr	r2, [pc, #192]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80093fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009404:	f7fe fbe6 	bl	8007bd4 <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800940c:	f7fe fbe2 	bl	8007bd4 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e087      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941e:	4b28      	ldr	r3, [pc, #160]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f0      	bne.n	800940c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69da      	ldr	r2, [r3, #28]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	019b      	lsls	r3, r3, #6
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	085b      	lsrs	r3, r3, #1
 8009442:	3b01      	subs	r3, #1
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	061b      	lsls	r3, r3, #24
 800944e:	4313      	orrs	r3, r2
 8009450:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009456:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009458:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800945e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fe fbb6 	bl	8007bd4 <HAL_GetTick>
 8009468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800946c:	f7fe fbb2 	bl	8007bd4 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e057      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0f0      	beq.n	800946c <HAL_RCC_OscConfig+0x478>
 800948a:	e04f      	b.n	800952c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0b      	ldr	r2, [pc, #44]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 8009492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009498:	f7fe fb9c 	bl	8007bd4 <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a0:	f7fe fb98 	bl	8007bd4 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e03d      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b2:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <HAL_RCC_OscConfig+0x4cc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4ac>
 80094be:	e035      	b.n	800952c <HAL_RCC_OscConfig+0x538>
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80094c8:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <HAL_RCC_OscConfig+0x544>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d028      	beq.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d121      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d11a      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094f8:	4013      	ands	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009500:	4293      	cmp	r3, r2
 8009502:	d111      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	3b01      	subs	r3, #1
 8009512:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009514:	429a      	cmp	r2, r3
 8009516:	d107      	bne.n	8009528 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	40023800 	.word	0x40023800

0800953c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e0d0      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009554:	4b6a      	ldr	r3, [pc, #424]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d910      	bls.n	8009584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009562:	4b67      	ldr	r3, [pc, #412]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 020f 	bic.w	r2, r3, #15
 800956a:	4965      	ldr	r1, [pc, #404]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4313      	orrs	r3, r2
 8009570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b63      	ldr	r3, [pc, #396]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0b8      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d020      	beq.n	80095d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800959c:	4b59      	ldr	r3, [pc, #356]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4a58      	ldr	r2, [pc, #352]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095b4:	4b53      	ldr	r3, [pc, #332]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4a52      	ldr	r2, [pc, #328]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c0:	4b50      	ldr	r3, [pc, #320]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	494d      	ldr	r1, [pc, #308]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d040      	beq.n	8009660 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d107      	bne.n	80095f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095e6:	4b47      	ldr	r3, [pc, #284]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d115      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e07f      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d107      	bne.n	800960e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095fe:	4b41      	ldr	r3, [pc, #260]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e073      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800960e:	4b3d      	ldr	r3, [pc, #244]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e06b      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800961e:	4b39      	ldr	r3, [pc, #228]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f023 0203 	bic.w	r2, r3, #3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	4936      	ldr	r1, [pc, #216]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800962c:	4313      	orrs	r3, r2
 800962e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009630:	f7fe fad0 	bl	8007bd4 <HAL_GetTick>
 8009634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009636:	e00a      	b.n	800964e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009638:	f7fe facc 	bl	8007bd4 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	f241 3288 	movw	r2, #5000	; 0x1388
 8009646:	4293      	cmp	r3, r2
 8009648:	d901      	bls.n	800964e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e053      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964e:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 020c 	and.w	r2, r3, #12
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	429a      	cmp	r2, r3
 800965e:	d1eb      	bne.n	8009638 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d210      	bcs.n	8009690 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f023 020f 	bic.w	r2, r3, #15
 8009676:	4922      	ldr	r1, [pc, #136]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	4313      	orrs	r3, r2
 800967c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b20      	ldr	r3, [pc, #128]	; (8009700 <HAL_RCC_ClockConfig+0x1c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e032      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800969c:	4b19      	ldr	r3, [pc, #100]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4916      	ldr	r1, [pc, #88]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80096ba:	4b12      	ldr	r3, [pc, #72]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	490e      	ldr	r1, [pc, #56]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80096ce:	f000 f821 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <HAL_RCC_ClockConfig+0x1c8>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	091b      	lsrs	r3, r3, #4
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	490a      	ldr	r1, [pc, #40]	; (8009708 <HAL_RCC_ClockConfig+0x1cc>)
 80096e0:	5ccb      	ldrb	r3, [r1, r3]
 80096e2:	fa22 f303 	lsr.w	r3, r2, r3
 80096e6:	4a09      	ldr	r2, [pc, #36]	; (800970c <HAL_RCC_ClockConfig+0x1d0>)
 80096e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80096ea:	4b09      	ldr	r3, [pc, #36]	; (8009710 <HAL_RCC_ClockConfig+0x1d4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fa2c 	bl	8007b4c <HAL_InitTick>

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40023c00 	.word	0x40023c00
 8009704:	40023800 	.word	0x40023800
 8009708:	08014154 	.word	0x08014154
 800970c:	2000004c 	.word	0x2000004c
 8009710:	20000050 	.word	0x20000050

08009714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009718:	b094      	sub	sp, #80	; 0x50
 800971a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	647b      	str	r3, [r7, #68]	; 0x44
 8009720:	2300      	movs	r3, #0
 8009722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009724:	2300      	movs	r3, #0
 8009726:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800972c:	4b79      	ldr	r3, [pc, #484]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	2b08      	cmp	r3, #8
 8009736:	d00d      	beq.n	8009754 <HAL_RCC_GetSysClockFreq+0x40>
 8009738:	2b08      	cmp	r3, #8
 800973a:	f200 80e1 	bhi.w	8009900 <HAL_RCC_GetSysClockFreq+0x1ec>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_RCC_GetSysClockFreq+0x34>
 8009742:	2b04      	cmp	r3, #4
 8009744:	d003      	beq.n	800974e <HAL_RCC_GetSysClockFreq+0x3a>
 8009746:	e0db      	b.n	8009900 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009748:	4b73      	ldr	r3, [pc, #460]	; (8009918 <HAL_RCC_GetSysClockFreq+0x204>)
 800974a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800974c:	e0db      	b.n	8009906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800974e:	4b73      	ldr	r3, [pc, #460]	; (800991c <HAL_RCC_GetSysClockFreq+0x208>)
 8009750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009752:	e0d8      	b.n	8009906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009754:	4b6f      	ldr	r3, [pc, #444]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800975c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800975e:	4b6d      	ldr	r3, [pc, #436]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d063      	beq.n	8009832 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976a:	4b6a      	ldr	r3, [pc, #424]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	099b      	lsrs	r3, r3, #6
 8009770:	2200      	movs	r2, #0
 8009772:	63bb      	str	r3, [r7, #56]	; 0x38
 8009774:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
 800977e:	2300      	movs	r3, #0
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
 8009782:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009786:	4622      	mov	r2, r4
 8009788:	462b      	mov	r3, r5
 800978a:	f04f 0000 	mov.w	r0, #0
 800978e:	f04f 0100 	mov.w	r1, #0
 8009792:	0159      	lsls	r1, r3, #5
 8009794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009798:	0150      	lsls	r0, r2, #5
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4621      	mov	r1, r4
 80097a0:	1a51      	subs	r1, r2, r1
 80097a2:	6139      	str	r1, [r7, #16]
 80097a4:	4629      	mov	r1, r5
 80097a6:	eb63 0301 	sbc.w	r3, r3, r1
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	f04f 0300 	mov.w	r3, #0
 80097b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097b8:	4659      	mov	r1, fp
 80097ba:	018b      	lsls	r3, r1, #6
 80097bc:	4651      	mov	r1, sl
 80097be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80097c2:	4651      	mov	r1, sl
 80097c4:	018a      	lsls	r2, r1, #6
 80097c6:	4651      	mov	r1, sl
 80097c8:	ebb2 0801 	subs.w	r8, r2, r1
 80097cc:	4659      	mov	r1, fp
 80097ce:	eb63 0901 	sbc.w	r9, r3, r1
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	f04f 0300 	mov.w	r3, #0
 80097da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097e6:	4690      	mov	r8, r2
 80097e8:	4699      	mov	r9, r3
 80097ea:	4623      	mov	r3, r4
 80097ec:	eb18 0303 	adds.w	r3, r8, r3
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	462b      	mov	r3, r5
 80097f4:	eb49 0303 	adc.w	r3, r9, r3
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009806:	4629      	mov	r1, r5
 8009808:	024b      	lsls	r3, r1, #9
 800980a:	4621      	mov	r1, r4
 800980c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009810:	4621      	mov	r1, r4
 8009812:	024a      	lsls	r2, r1, #9
 8009814:	4610      	mov	r0, r2
 8009816:	4619      	mov	r1, r3
 8009818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981a:	2200      	movs	r2, #0
 800981c:	62bb      	str	r3, [r7, #40]	; 0x28
 800981e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009820:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009824:	f7f7 fa30 	bl	8000c88 <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4613      	mov	r3, r2
 800982e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009830:	e058      	b.n	80098e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009832:	4b38      	ldr	r3, [pc, #224]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	099b      	lsrs	r3, r3, #6
 8009838:	2200      	movs	r2, #0
 800983a:	4618      	mov	r0, r3
 800983c:	4611      	mov	r1, r2
 800983e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009842:	623b      	str	r3, [r7, #32]
 8009844:	2300      	movs	r3, #0
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
 8009848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800984c:	4642      	mov	r2, r8
 800984e:	464b      	mov	r3, r9
 8009850:	f04f 0000 	mov.w	r0, #0
 8009854:	f04f 0100 	mov.w	r1, #0
 8009858:	0159      	lsls	r1, r3, #5
 800985a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800985e:	0150      	lsls	r0, r2, #5
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4641      	mov	r1, r8
 8009866:	ebb2 0a01 	subs.w	sl, r2, r1
 800986a:	4649      	mov	r1, r9
 800986c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800987c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009884:	ebb2 040a 	subs.w	r4, r2, sl
 8009888:	eb63 050b 	sbc.w	r5, r3, fp
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	f04f 0300 	mov.w	r3, #0
 8009894:	00eb      	lsls	r3, r5, #3
 8009896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800989a:	00e2      	lsls	r2, r4, #3
 800989c:	4614      	mov	r4, r2
 800989e:	461d      	mov	r5, r3
 80098a0:	4643      	mov	r3, r8
 80098a2:	18e3      	adds	r3, r4, r3
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	464b      	mov	r3, r9
 80098a8:	eb45 0303 	adc.w	r3, r5, r3
 80098ac:	607b      	str	r3, [r7, #4]
 80098ae:	f04f 0200 	mov.w	r2, #0
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098ba:	4629      	mov	r1, r5
 80098bc:	028b      	lsls	r3, r1, #10
 80098be:	4621      	mov	r1, r4
 80098c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098c4:	4621      	mov	r1, r4
 80098c6:	028a      	lsls	r2, r1, #10
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ce:	2200      	movs	r2, #0
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	61fa      	str	r2, [r7, #28]
 80098d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098d8:	f7f7 f9d6 	bl	8000c88 <__aeabi_uldivmod>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4613      	mov	r3, r2
 80098e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCC_GetSysClockFreq+0x200>)
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	0c1b      	lsrs	r3, r3, #16
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	3301      	adds	r3, #1
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80098f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80098fe:	e002      	b.n	8009906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009900:	4b05      	ldr	r3, [pc, #20]	; (8009918 <HAL_RCC_GetSysClockFreq+0x204>)
 8009902:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009908:	4618      	mov	r0, r3
 800990a:	3750      	adds	r7, #80	; 0x50
 800990c:	46bd      	mov	sp, r7
 800990e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009912:	bf00      	nop
 8009914:	40023800 	.word	0x40023800
 8009918:	00f42400 	.word	0x00f42400
 800991c:	007a1200 	.word	0x007a1200

08009920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009924:	4b03      	ldr	r3, [pc, #12]	; (8009934 <HAL_RCC_GetHCLKFreq+0x14>)
 8009926:	681b      	ldr	r3, [r3, #0]
}
 8009928:	4618      	mov	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2000004c 	.word	0x2000004c

08009938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800993c:	f7ff fff0 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009940:	4602      	mov	r2, r0
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	0a9b      	lsrs	r3, r3, #10
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	4903      	ldr	r1, [pc, #12]	; (800995c <HAL_RCC_GetPCLK1Freq+0x24>)
 800994e:	5ccb      	ldrb	r3, [r1, r3]
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40023800 	.word	0x40023800
 800995c:	08014164 	.word	0x08014164

08009960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009964:	f7ff ffdc 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009968:	4602      	mov	r2, r0
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	0b5b      	lsrs	r3, r3, #13
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	4903      	ldr	r1, [pc, #12]	; (8009984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009976:	5ccb      	ldrb	r3, [r1, r3]
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800997c:	4618      	mov	r0, r3
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40023800 	.word	0x40023800
 8009984:	08014164 	.word	0x08014164

08009988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d012      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80099b0:	4b69      	ldr	r3, [pc, #420]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	4a68      	ldr	r2, [pc, #416]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099ba:	6093      	str	r3, [r2, #8]
 80099bc:	4b66      	ldr	r3, [pc, #408]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	4964      	ldr	r1, [pc, #400]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d017      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099e2:	4b5d      	ldr	r3, [pc, #372]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f0:	4959      	ldr	r1, [pc, #356]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a00:	d101      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009a02:	2301      	movs	r3, #1
 8009a04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d017      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a1e:	4b4e      	ldr	r3, [pc, #312]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	494a      	ldr	r1, [pc, #296]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a3c:	d101      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 808b 	beq.w	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a6c:	4b3a      	ldr	r3, [pc, #232]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	4a39      	ldr	r2, [pc, #228]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a76:	6413      	str	r3, [r2, #64]	; 0x40
 8009a78:	4b37      	ldr	r3, [pc, #220]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a80:	60bb      	str	r3, [r7, #8]
 8009a82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a84:	4b35      	ldr	r3, [pc, #212]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a34      	ldr	r2, [pc, #208]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a90:	f7fe f8a0 	bl	8007bd4 <HAL_GetTick>
 8009a94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a96:	e008      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a98:	f7fe f89c 	bl	8007bd4 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2b64      	cmp	r3, #100	; 0x64
 8009aa4:	d901      	bls.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e357      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009aaa:	4b2c      	ldr	r3, [pc, #176]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0f0      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ab6:	4b28      	ldr	r3, [pc, #160]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009abe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d035      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d02e      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ad4:	4b20      	ldr	r3, [pc, #128]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009adc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ade:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	4a1d      	ldr	r2, [pc, #116]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009aea:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aee:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009af6:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009afc:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d114      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b08:	f7fe f864 	bl	8007bd4 <HAL_GetTick>
 8009b0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b0e:	e00a      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b10:	f7fe f860 	bl	8007bd4 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d901      	bls.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e319      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b26:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0ee      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3e:	d111      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009b4e:	400b      	ands	r3, r1
 8009b50:	4901      	ldr	r1, [pc, #4]	; (8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	608b      	str	r3, [r1, #8]
 8009b56:	e00b      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	40007000 	.word	0x40007000
 8009b60:	0ffffcff 	.word	0x0ffffcff
 8009b64:	4baa      	ldr	r3, [pc, #680]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	4aa9      	ldr	r2, [pc, #676]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009b6e:	6093      	str	r3, [r2, #8]
 8009b70:	4ba7      	ldr	r3, [pc, #668]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b7c:	49a4      	ldr	r1, [pc, #656]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d010      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b8e:	4ba0      	ldr	r3, [pc, #640]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b94:	4a9e      	ldr	r2, [pc, #632]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009b9e:	4b9c      	ldr	r3, [pc, #624]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ba0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	4999      	ldr	r1, [pc, #612]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009bbc:	4b94      	ldr	r3, [pc, #592]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bca:	4991      	ldr	r1, [pc, #580]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bde:	4b8c      	ldr	r3, [pc, #560]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bec:	4988      	ldr	r1, [pc, #544]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c00:	4b83      	ldr	r3, [pc, #524]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0e:	4980      	ldr	r1, [pc, #512]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c22:	4b7b      	ldr	r3, [pc, #492]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c30:	4977      	ldr	r1, [pc, #476]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00a      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c44:	4b72      	ldr	r3, [pc, #456]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c4a:	f023 0203 	bic.w	r2, r3, #3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c52:	496f      	ldr	r1, [pc, #444]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c66:	4b6a      	ldr	r3, [pc, #424]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6c:	f023 020c 	bic.w	r2, r3, #12
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c74:	4966      	ldr	r1, [pc, #408]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c88:	4b61      	ldr	r3, [pc, #388]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	495e      	ldr	r1, [pc, #376]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009caa:	4b59      	ldr	r3, [pc, #356]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	4955      	ldr	r1, [pc, #340]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ccc:	4b50      	ldr	r3, [pc, #320]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cda:	494d      	ldr	r1, [pc, #308]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009cee:	4b48      	ldr	r3, [pc, #288]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfc:	4944      	ldr	r1, [pc, #272]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009d10:	4b3f      	ldr	r3, [pc, #252]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d1e:	493c      	ldr	r1, [pc, #240]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009d32:	4b37      	ldr	r3, [pc, #220]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d40:	4933      	ldr	r1, [pc, #204]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00a      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d54:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d62:	492b      	ldr	r1, [pc, #172]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d011      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009d76:	4b26      	ldr	r3, [pc, #152]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d84:	4922      	ldr	r1, [pc, #136]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d94:	d101      	bne.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009d96:	2301      	movs	r3, #1
 8009d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0308 	and.w	r3, r3, #8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc4:	4912      	ldr	r1, [pc, #72]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de8:	4909      	ldr	r1, [pc, #36]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d006      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 80d9 	beq.w	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009e04:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a01      	ldr	r2, [pc, #4]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e0e:	e001      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009e10:	40023800 	.word	0x40023800
 8009e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e16:	f7fd fedd 	bl	8007bd4 <HAL_GetTick>
 8009e1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e1c:	e008      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e1e:	f7fd fed9 	bl	8007bd4 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b64      	cmp	r3, #100	; 0x64
 8009e2a:	d901      	bls.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e194      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e30:	4b6c      	ldr	r3, [pc, #432]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1f0      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d021      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11d      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e50:	4b64      	ldr	r3, [pc, #400]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e5e:	4b61      	ldr	r3, [pc, #388]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e64:	0e1b      	lsrs	r3, r3, #24
 8009e66:	f003 030f 	and.w	r3, r3, #15
 8009e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	019a      	lsls	r2, r3, #6
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	041b      	lsls	r3, r3, #16
 8009e76:	431a      	orrs	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	061b      	lsls	r3, r3, #24
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	071b      	lsls	r3, r3, #28
 8009e84:	4957      	ldr	r1, [pc, #348]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea0:	d00a      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d02e      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eb6:	d129      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009eb8:	4b4a      	ldr	r3, [pc, #296]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ebe:	0c1b      	lsrs	r3, r3, #16
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ec6:	4b47      	ldr	r3, [pc, #284]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ecc:	0f1b      	lsrs	r3, r3, #28
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	019a      	lsls	r2, r3, #6
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	041b      	lsls	r3, r3, #16
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	061b      	lsls	r3, r3, #24
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	071b      	lsls	r3, r3, #28
 8009eec:	493d      	ldr	r1, [pc, #244]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ef4:	4b3b      	ldr	r3, [pc, #236]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efa:	f023 021f 	bic.w	r2, r3, #31
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	3b01      	subs	r3, #1
 8009f04:	4937      	ldr	r1, [pc, #220]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01d      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f18:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f1e:	0e1b      	lsrs	r3, r3, #24
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f26:	4b2f      	ldr	r3, [pc, #188]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f2c:	0f1b      	lsrs	r3, r3, #28
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	019a      	lsls	r2, r3, #6
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	041b      	lsls	r3, r3, #16
 8009f40:	431a      	orrs	r2, r3
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	061b      	lsls	r3, r3, #24
 8009f46:	431a      	orrs	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	071b      	lsls	r3, r3, #28
 8009f4c:	4925      	ldr	r1, [pc, #148]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d011      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	019a      	lsls	r2, r3, #6
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	061b      	lsls	r3, r3, #24
 8009f74:	431a      	orrs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	071b      	lsls	r3, r3, #28
 8009f7c:	4919      	ldr	r1, [pc, #100]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f84:	4b17      	ldr	r3, [pc, #92]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f90:	f7fd fe20 	bl	8007bd4 <HAL_GetTick>
 8009f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f96:	e008      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009f98:	f7fd fe1c 	bl	8007bd4 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b64      	cmp	r3, #100	; 0x64
 8009fa4:	d901      	bls.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e0d7      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009faa:	4b0e      	ldr	r3, [pc, #56]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f0      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f040 80cd 	bne.w	800a158 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fca:	f7fd fe03 	bl	8007bd4 <HAL_GetTick>
 8009fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fd0:	e00a      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009fd2:	f7fd fdff 	bl	8007bd4 <HAL_GetTick>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	2b64      	cmp	r3, #100	; 0x64
 8009fde:	d903      	bls.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e0ba      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009fe4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fe8:	4b5e      	ldr	r3, [pc, #376]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff4:	d0ed      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a012:	2b00      	cmp	r3, #0
 800a014:	d02e      	beq.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d12a      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a01e:	4b51      	ldr	r3, [pc, #324]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a024:	0c1b      	lsrs	r3, r3, #16
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a02c:	4b4d      	ldr	r3, [pc, #308]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	0f1b      	lsrs	r3, r3, #28
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	019a      	lsls	r2, r3, #6
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	061b      	lsls	r3, r3, #24
 800a04c:	431a      	orrs	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	071b      	lsls	r3, r3, #28
 800a052:	4944      	ldr	r1, [pc, #272]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a054:	4313      	orrs	r3, r2
 800a056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a05a:	4b42      	ldr	r3, [pc, #264]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a060:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	3b01      	subs	r3, #1
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	493d      	ldr	r1, [pc, #244]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d022      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a088:	d11d      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a08a:	4b36      	ldr	r3, [pc, #216]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a090:	0e1b      	lsrs	r3, r3, #24
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a098:	4b32      	ldr	r3, [pc, #200]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	0f1b      	lsrs	r3, r3, #28
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	019a      	lsls	r2, r3, #6
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	041b      	lsls	r3, r3, #16
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	061b      	lsls	r3, r3, #24
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	071b      	lsls	r3, r3, #28
 800a0be:	4929      	ldr	r1, [pc, #164]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d028      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d8:	0e1b      	lsrs	r3, r3, #24
 800a0da:	f003 030f 	and.w	r3, r3, #15
 800a0de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a0e0:	4b20      	ldr	r3, [pc, #128]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	019a      	lsls	r2, r3, #6
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	061b      	lsls	r3, r3, #24
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	071b      	lsls	r3, r3, #28
 800a106:	4917      	ldr	r1, [pc, #92]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a10e:	4b15      	ldr	r3, [pc, #84]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	4911      	ldr	r1, [pc, #68]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a124:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a0e      	ldr	r2, [pc, #56]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a12a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a12e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a130:	f7fd fd50 	bl	8007bd4 <HAL_GetTick>
 800a134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a136:	e008      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a138:	f7fd fd4c 	bl	8007bd4 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b64      	cmp	r3, #100	; 0x64
 800a144:	d901      	bls.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e007      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a156:	d1ef      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3720      	adds	r7, #32
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40023800 	.word	0x40023800

0800a168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e09d      	b.n	800a2b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d108      	bne.n	800a194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a18a:	d009      	beq.n	800a1a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	61da      	str	r2, [r3, #28]
 800a192:	e005      	b.n	800a1a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fd f8de 	bl	800737c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1e0:	d902      	bls.n	800a1e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e002      	b.n	800a1ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1f6:	d007      	beq.n	800a208 <HAL_SPI_Init+0xa0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a200:	d002      	beq.n	800a208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	ea42 0103 	orr.w	r1, r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	f003 0204 	and.w	r2, r3, #4
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a284:	ea42 0103 	orr.w	r1, r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69da      	ldr	r2, [r3, #28]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b088      	sub	sp, #32
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <HAL_SPI_Transmit+0x22>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e158      	b.n	800a592 <HAL_SPI_Transmit+0x2d4>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2e8:	f7fd fc74 	bl	8007bd4 <HAL_GetTick>
 800a2ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a2ee:	88fb      	ldrh	r3, [r7, #6]
 800a2f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d002      	beq.n	800a304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
 800a300:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a302:	e13d      	b.n	800a580 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_SPI_Transmit+0x52>
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a314:	e134      	b.n	800a580 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2203      	movs	r2, #3
 800a31a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a360:	d10f      	bne.n	800a382 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38c:	2b40      	cmp	r3, #64	; 0x40
 800a38e:	d007      	beq.n	800a3a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a39e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3a8:	d94b      	bls.n	800a442 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_SPI_Transmit+0xfa>
 800a3b2:	8afb      	ldrh	r3, [r7, #22]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d13e      	bne.n	800a436 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3bc:	881a      	ldrh	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	1c9a      	adds	r2, r3, #2
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3dc:	e02b      	b.n	800a436 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d112      	bne.n	800a412 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	881a      	ldrh	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	1c9a      	adds	r2, r3, #2
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a406:	b29b      	uxth	r3, r3
 800a408:	3b01      	subs	r3, #1
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a410:	e011      	b.n	800a436 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a412:	f7fd fbdf 	bl	8007bd4 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d803      	bhi.n	800a42a <HAL_SPI_Transmit+0x16c>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d102      	bne.n	800a430 <HAL_SPI_Transmit+0x172>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d102      	bne.n	800a436 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a434:	e0a4      	b.n	800a580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1ce      	bne.n	800a3de <HAL_SPI_Transmit+0x120>
 800a440:	e07c      	b.n	800a53c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <HAL_SPI_Transmit+0x192>
 800a44a:	8afb      	ldrh	r3, [r7, #22]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d170      	bne.n	800a532 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b01      	cmp	r3, #1
 800a458:	d912      	bls.n	800a480 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45e:	881a      	ldrh	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	1c9a      	adds	r2, r3, #2
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a474:	b29b      	uxth	r3, r3
 800a476:	3b02      	subs	r3, #2
 800a478:	b29a      	uxth	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a47e:	e058      	b.n	800a532 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	330c      	adds	r3, #12
 800a48a:	7812      	ldrb	r2, [r2, #0]
 800a48c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a4a6:	e044      	b.n	800a532 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d12b      	bne.n	800a50e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d912      	bls.n	800a4e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	881a      	ldrh	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d0:	1c9a      	adds	r2, r3, #2
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b02      	subs	r3, #2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4e4:	e025      	b.n	800a532 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	330c      	adds	r3, #12
 800a4f0:	7812      	ldrb	r2, [r2, #0]
 800a4f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a502:	b29b      	uxth	r3, r3
 800a504:	3b01      	subs	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a50c:	e011      	b.n	800a532 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a50e:	f7fd fb61 	bl	8007bd4 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d803      	bhi.n	800a526 <HAL_SPI_Transmit+0x268>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a524:	d102      	bne.n	800a52c <HAL_SPI_Transmit+0x26e>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a530:	e026      	b.n	800a580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a536:	b29b      	uxth	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1b5      	bne.n	800a4a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a53c:	69ba      	ldr	r2, [r7, #24]
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fb69 	bl	800ac18 <SPI_EndRxTxTransaction>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2220      	movs	r2, #32
 800a550:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10a      	bne.n	800a570 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	613b      	str	r3, [r7, #16]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	77fb      	strb	r3, [r7, #31]
 800a57c:	e000      	b.n	800a580 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a57e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a590:	7ffb      	ldrb	r3, [r7, #31]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3720      	adds	r7, #32
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b08a      	sub	sp, #40	; 0x28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d101      	bne.n	800a5c0 <HAL_SPI_TransmitReceive+0x26>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e1fb      	b.n	800a9b8 <HAL_SPI_TransmitReceive+0x41e>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5c8:	f7fd fb04 	bl	8007bd4 <HAL_GetTick>
 800a5cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a5dc:	887b      	ldrh	r3, [r7, #2]
 800a5de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a5e0:	887b      	ldrh	r3, [r7, #2]
 800a5e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a5e4:	7efb      	ldrb	r3, [r7, #27]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d00e      	beq.n	800a608 <HAL_SPI_TransmitReceive+0x6e>
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5f0:	d106      	bne.n	800a600 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <HAL_SPI_TransmitReceive+0x66>
 800a5fa:	7efb      	ldrb	r3, [r7, #27]
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d003      	beq.n	800a608 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a600:	2302      	movs	r3, #2
 800a602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a606:	e1cd      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <HAL_SPI_TransmitReceive+0x80>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <HAL_SPI_TransmitReceive+0x80>
 800a614:	887b      	ldrh	r3, [r7, #2]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a620:	e1c0      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d003      	beq.n	800a636 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2205      	movs	r2, #5
 800a632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	887a      	ldrh	r2, [r7, #2]
 800a646:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	887a      	ldrh	r2, [r7, #2]
 800a64e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	887a      	ldrh	r2, [r7, #2]
 800a65c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	887a      	ldrh	r2, [r7, #2]
 800a662:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a678:	d802      	bhi.n	800a680 <HAL_SPI_TransmitReceive+0xe6>
 800a67a:	8a3b      	ldrh	r3, [r7, #16]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d908      	bls.n	800a692 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a68e:	605a      	str	r2, [r3, #4]
 800a690:	e007      	b.n	800a6a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a6a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d007      	beq.n	800a6c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6c8:	d97c      	bls.n	800a7c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <HAL_SPI_TransmitReceive+0x13e>
 800a6d2:	8a7b      	ldrh	r3, [r7, #18]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d169      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6dc:	881a      	ldrh	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	1c9a      	adds	r2, r3, #2
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6fc:	e056      	b.n	800a7ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d11b      	bne.n	800a744 <HAL_SPI_TransmitReceive+0x1aa>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a710:	b29b      	uxth	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d016      	beq.n	800a744 <HAL_SPI_TransmitReceive+0x1aa>
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d113      	bne.n	800a744 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	881a      	ldrh	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72c:	1c9a      	adds	r2, r3, #2
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d11c      	bne.n	800a78c <HAL_SPI_TransmitReceive+0x1f2>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d016      	beq.n	800a78c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	b292      	uxth	r2, r2
 800a76a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	1c9a      	adds	r2, r3, #2
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	3b01      	subs	r3, #1
 800a780:	b29a      	uxth	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a788:	2301      	movs	r3, #1
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a78c:	f7fd fa22 	bl	8007bd4 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a798:	429a      	cmp	r2, r3
 800a79a:	d807      	bhi.n	800a7ac <HAL_SPI_TransmitReceive+0x212>
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d003      	beq.n	800a7ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a7aa:	e0fb      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1a3      	bne.n	800a6fe <HAL_SPI_TransmitReceive+0x164>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d19d      	bne.n	800a6fe <HAL_SPI_TransmitReceive+0x164>
 800a7c2:	e0df      	b.n	800a984 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <HAL_SPI_TransmitReceive+0x23a>
 800a7cc:	8a7b      	ldrh	r3, [r7, #18]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	f040 80cb 	bne.w	800a96a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d912      	bls.n	800a804 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e2:	881a      	ldrh	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ee:	1c9a      	adds	r2, r3, #2
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	3b02      	subs	r3, #2
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a802:	e0b2      	b.n	800a96a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	330c      	adds	r3, #12
 800a80e:	7812      	ldrb	r2, [r2, #0]
 800a810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a82a:	e09e      	b.n	800a96a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b02      	cmp	r3, #2
 800a838:	d134      	bne.n	800a8a4 <HAL_SPI_TransmitReceive+0x30a>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d02f      	beq.n	800a8a4 <HAL_SPI_TransmitReceive+0x30a>
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	2b01      	cmp	r3, #1
 800a848:	d12c      	bne.n	800a8a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	d912      	bls.n	800a87a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	881a      	ldrh	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a864:	1c9a      	adds	r2, r3, #2
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3b02      	subs	r3, #2
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a878:	e012      	b.n	800a8a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	330c      	adds	r3, #12
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a896:	b29b      	uxth	r3, r3
 800a898:	3b01      	subs	r3, #1
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d148      	bne.n	800a944 <HAL_SPI_TransmitReceive+0x3aa>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d042      	beq.n	800a944 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d923      	bls.n	800a912 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	b292      	uxth	r2, r2
 800a8d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8dc:	1c9a      	adds	r2, r3, #2
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b02      	subs	r3, #2
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d81f      	bhi.n	800a940 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a90e:	605a      	str	r2, [r3, #4]
 800a910:	e016      	b.n	800a940 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f103 020c 	add.w	r2, r3, #12
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	b2d2      	uxtb	r2, r2
 800a922:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	b29a      	uxth	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a940:	2301      	movs	r3, #1
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a944:	f7fd f946 	bl	8007bd4 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a950:	429a      	cmp	r2, r3
 800a952:	d803      	bhi.n	800a95c <HAL_SPI_TransmitReceive+0x3c2>
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d102      	bne.n	800a962 <HAL_SPI_TransmitReceive+0x3c8>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a968:	e01c      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	f47f af5b 	bne.w	800a82c <HAL_SPI_TransmitReceive+0x292>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f47f af54 	bne.w	800a82c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a984:	69fa      	ldr	r2, [r7, #28]
 800a986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f945 	bl	800ac18 <SPI_EndRxTxTransaction>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2220      	movs	r2, #32
 800a99e:	661a      	str	r2, [r3, #96]	; 0x60
 800a9a0:	e000      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a9a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a9b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	; 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9ce:	b2db      	uxtb	r3, r3
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9ec:	f7fd f8f2 	bl	8007bd4 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	1a9b      	subs	r3, r3, r2
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a9fc:	f7fd f8ea 	bl	8007bd4 <HAL_GetTick>
 800aa00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aa02:	4b39      	ldr	r3, [pc, #228]	; (800aae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	015b      	lsls	r3, r3, #5
 800aa08:	0d1b      	lsrs	r3, r3, #20
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	fb02 f303 	mul.w	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa12:	e054      	b.n	800aabe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d050      	beq.n	800aabe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa1c:	f7fd f8da 	bl	8007bd4 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d902      	bls.n	800aa32 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d13d      	bne.n	800aaae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa4a:	d111      	bne.n	800aa70 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa54:	d004      	beq.n	800aa60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa5e:	d107      	bne.n	800aa70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa78:	d10f      	bne.n	800aa9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e017      	b.n	800aade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4013      	ands	r3, r2
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	bf0c      	ite	eq
 800aace:	2301      	moveq	r3, #1
 800aad0:	2300      	movne	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d19b      	bne.n	800aa14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3720      	adds	r7, #32
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	2000004c 	.word	0x2000004c

0800aaec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	; 0x28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aafe:	f7fd f869 	bl	8007bd4 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ab0e:	f7fd f861 	bl	8007bd4 <HAL_GetTick>
 800ab12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ab1c:	4b3d      	ldr	r3, [pc, #244]	; (800ac14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	00da      	lsls	r2, r3, #3
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	0d1b      	lsrs	r3, r3, #20
 800ab2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2e:	fb02 f303 	mul.w	r3, r2, r3
 800ab32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ab34:	e060      	b.n	800abf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab3c:	d107      	bne.n	800ab4e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d104      	bne.n	800ab4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab54:	d050      	beq.n	800abf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab56:	f7fd f83d 	bl	8007bd4 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d902      	bls.n	800ab6c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d13d      	bne.n	800abe8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab84:	d111      	bne.n	800abaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab8e:	d004      	beq.n	800ab9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab98:	d107      	bne.n	800abaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aba8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb2:	d10f      	bne.n	800abd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e010      	b.n	800ac0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689a      	ldr	r2, [r3, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4013      	ands	r3, r2
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d196      	bne.n	800ab36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3728      	adds	r7, #40	; 0x28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	2000004c 	.word	0x2000004c

0800ac18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff ff5b 	bl	800aaec <SPI_WaitFifoStateUntilTimeout>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d007      	beq.n	800ac4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac40:	f043 0220 	orr.w	r2, r3, #32
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e046      	b.n	800acda <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac4c:	4b25      	ldr	r3, [pc, #148]	; (800ace4 <SPI_EndRxTxTransaction+0xcc>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a25      	ldr	r2, [pc, #148]	; (800ace8 <SPI_EndRxTxTransaction+0xd0>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	0d5b      	lsrs	r3, r3, #21
 800ac58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac5c:	fb02 f303 	mul.w	r3, r2, r3
 800ac60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac6a:	d112      	bne.n	800ac92 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2200      	movs	r2, #0
 800ac74:	2180      	movs	r1, #128	; 0x80
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7ff feb0 	bl	800a9dc <SPI_WaitFlagStateUntilTimeout>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d016      	beq.n	800acb0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac86:	f043 0220 	orr.w	r2, r3, #32
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e023      	b.n	800acda <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca8:	2b80      	cmp	r3, #128	; 0x80
 800acaa:	d0f2      	beq.n	800ac92 <SPI_EndRxTxTransaction+0x7a>
 800acac:	e000      	b.n	800acb0 <SPI_EndRxTxTransaction+0x98>
        break;
 800acae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff15 	bl	800aaec <SPI_WaitFifoStateUntilTimeout>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800accc:	f043 0220 	orr.w	r2, r3, #32
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e000      	b.n	800acda <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	2000004c 	.word	0x2000004c
 800ace8:	165e9f81 	.word	0x165e9f81

0800acec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e049      	b.n	800ad92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7fc fd6e 	bl	80077f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f000 faee 	bl	800b30c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b01      	cmp	r3, #1
 800adae:	d001      	beq.n	800adb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e054      	b.n	800ae5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0201 	orr.w	r2, r2, #1
 800adca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a26      	ldr	r2, [pc, #152]	; (800ae6c <HAL_TIM_Base_Start_IT+0xd0>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d022      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adde:	d01d      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a22      	ldr	r2, [pc, #136]	; (800ae70 <HAL_TIM_Base_Start_IT+0xd4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d018      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <HAL_TIM_Base_Start_IT+0xd8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d013      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a1f      	ldr	r2, [pc, #124]	; (800ae78 <HAL_TIM_Base_Start_IT+0xdc>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00e      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a1e      	ldr	r2, [pc, #120]	; (800ae7c <HAL_TIM_Base_Start_IT+0xe0>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d009      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <HAL_TIM_Base_Start_IT+0xe4>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d004      	beq.n	800ae1c <HAL_TIM_Base_Start_IT+0x80>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a1b      	ldr	r2, [pc, #108]	; (800ae84 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d115      	bne.n	800ae48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <HAL_TIM_Base_Start_IT+0xec>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b06      	cmp	r3, #6
 800ae2c:	d015      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0xbe>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae34:	d011      	beq.n	800ae5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f042 0201 	orr.w	r2, r2, #1
 800ae44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae46:	e008      	b.n	800ae5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f042 0201 	orr.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e000      	b.n	800ae5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	40010000 	.word	0x40010000
 800ae70:	40000400 	.word	0x40000400
 800ae74:	40000800 	.word	0x40000800
 800ae78:	40000c00 	.word	0x40000c00
 800ae7c:	40010400 	.word	0x40010400
 800ae80:	40014000 	.word	0x40014000
 800ae84:	40001800 	.word	0x40001800
 800ae88:	00010007 	.word	0x00010007

0800ae8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 0201 	bic.w	r2, r2, #1
 800aea2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6a1a      	ldr	r2, [r3, #32]
 800aeaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800aeae:	4013      	ands	r3, r2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10f      	bne.n	800aed4 <HAL_TIM_Base_Stop_IT+0x48>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6a1a      	ldr	r2, [r3, #32]
 800aeba:	f240 4344 	movw	r3, #1092	; 0x444
 800aebe:	4013      	ands	r3, r2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d107      	bne.n	800aed4 <HAL_TIM_Base_Stop_IT+0x48>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d122      	bne.n	800af46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d11b      	bne.n	800af46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f06f 0202 	mvn.w	r2, #2
 800af16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f9cf 	bl	800b2d0 <HAL_TIM_IC_CaptureCallback>
 800af32:	e005      	b.n	800af40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f9c1 	bl	800b2bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9d2 	bl	800b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b04      	cmp	r3, #4
 800af52:	d122      	bne.n	800af9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d11b      	bne.n	800af9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f06f 0204 	mvn.w	r2, #4
 800af6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f9a5 	bl	800b2d0 <HAL_TIM_IC_CaptureCallback>
 800af86:	e005      	b.n	800af94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f997 	bl	800b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f9a8 	bl	800b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	f003 0308 	and.w	r3, r3, #8
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d122      	bne.n	800afee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f003 0308 	and.w	r3, r3, #8
 800afb2:	2b08      	cmp	r3, #8
 800afb4:	d11b      	bne.n	800afee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f06f 0208 	mvn.w	r2, #8
 800afbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2204      	movs	r2, #4
 800afc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f97b 	bl	800b2d0 <HAL_TIM_IC_CaptureCallback>
 800afda:	e005      	b.n	800afe8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f96d 	bl	800b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f97e 	bl	800b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b10      	cmp	r3, #16
 800affa:	d122      	bne.n	800b042 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	f003 0310 	and.w	r3, r3, #16
 800b006:	2b10      	cmp	r3, #16
 800b008:	d11b      	bne.n	800b042 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f06f 0210 	mvn.w	r2, #16
 800b012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2208      	movs	r2, #8
 800b018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b024:	2b00      	cmp	r3, #0
 800b026:	d003      	beq.n	800b030 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f951 	bl	800b2d0 <HAL_TIM_IC_CaptureCallback>
 800b02e:	e005      	b.n	800b03c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f943 	bl	800b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f954 	bl	800b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10e      	bne.n	800b06e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d107      	bne.n	800b06e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f06f 0201 	mvn.w	r2, #1
 800b066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fb ff6b 	bl	8006f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b078:	2b80      	cmp	r3, #128	; 0x80
 800b07a:	d10e      	bne.n	800b09a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b086:	2b80      	cmp	r3, #128	; 0x80
 800b088:	d107      	bne.n	800b09a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fb0b 	bl	800b6b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a8:	d10e      	bne.n	800b0c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b4:	2b80      	cmp	r3, #128	; 0x80
 800b0b6:	d107      	bne.n	800b0c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fafe 	bl	800b6c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d2:	2b40      	cmp	r3, #64	; 0x40
 800b0d4:	d10e      	bne.n	800b0f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e0:	2b40      	cmp	r3, #64	; 0x40
 800b0e2:	d107      	bne.n	800b0f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f902 	bl	800b2f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	d10e      	bne.n	800b120 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b20      	cmp	r3, #32
 800b10e:	d107      	bne.n	800b120 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f06f 0220 	mvn.w	r2, #32
 800b118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fabe 	bl	800b69c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b120:	bf00      	nop
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIM_ConfigClockSource+0x1c>
 800b140:	2302      	movs	r3, #2
 800b142:	e0b4      	b.n	800b2ae <HAL_TIM_ConfigClockSource+0x186>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	4b56      	ldr	r3, [pc, #344]	; (800b2b8 <HAL_TIM_ConfigClockSource+0x190>)
 800b160:	4013      	ands	r3, r2
 800b162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b16a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b17c:	d03e      	beq.n	800b1fc <HAL_TIM_ConfigClockSource+0xd4>
 800b17e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b182:	f200 8087 	bhi.w	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b18a:	f000 8086 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x172>
 800b18e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b192:	d87f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b194:	2b70      	cmp	r3, #112	; 0x70
 800b196:	d01a      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0xa6>
 800b198:	2b70      	cmp	r3, #112	; 0x70
 800b19a:	d87b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b19c:	2b60      	cmp	r3, #96	; 0x60
 800b19e:	d050      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x11a>
 800b1a0:	2b60      	cmp	r3, #96	; 0x60
 800b1a2:	d877      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a4:	2b50      	cmp	r3, #80	; 0x50
 800b1a6:	d03c      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0xfa>
 800b1a8:	2b50      	cmp	r3, #80	; 0x50
 800b1aa:	d873      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ac:	2b40      	cmp	r3, #64	; 0x40
 800b1ae:	d058      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x13a>
 800b1b0:	2b40      	cmp	r3, #64	; 0x40
 800b1b2:	d86f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b4:	2b30      	cmp	r3, #48	; 0x30
 800b1b6:	d064      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1b8:	2b30      	cmp	r3, #48	; 0x30
 800b1ba:	d86b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d060      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d867      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d05c      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d05a      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1cc:	e062      	b.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1de:	f000 f9af 	bl	800b540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	609a      	str	r2, [r3, #8]
      break;
 800b1fa:	e04f      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b20c:	f000 f998 	bl	800b540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689a      	ldr	r2, [r3, #8]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b21e:	609a      	str	r2, [r3, #8]
      break;
 800b220:	e03c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 f90c 	bl	800b44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2150      	movs	r1, #80	; 0x50
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f965 	bl	800b50a <TIM_ITRx_SetConfig>
      break;
 800b240:	e02c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 f92b 	bl	800b4aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2160      	movs	r1, #96	; 0x60
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f955 	bl	800b50a <TIM_ITRx_SetConfig>
      break;
 800b260:	e01c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26e:	461a      	mov	r2, r3
 800b270:	f000 f8ec 	bl	800b44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2140      	movs	r1, #64	; 0x40
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 f945 	bl	800b50a <TIM_ITRx_SetConfig>
      break;
 800b280:	e00c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f000 f93c 	bl	800b50a <TIM_ITRx_SetConfig>
      break;
 800b292:	e003      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	73fb      	strb	r3, [r7, #15]
      break;
 800b298:	e000      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	fffeff88 	.word	0xfffeff88

0800b2bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a40      	ldr	r2, [pc, #256]	; (800b420 <TIM_Base_SetConfig+0x114>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d013      	beq.n	800b34c <TIM_Base_SetConfig+0x40>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b32a:	d00f      	beq.n	800b34c <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a3d      	ldr	r2, [pc, #244]	; (800b424 <TIM_Base_SetConfig+0x118>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00b      	beq.n	800b34c <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3c      	ldr	r2, [pc, #240]	; (800b428 <TIM_Base_SetConfig+0x11c>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d007      	beq.n	800b34c <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a3b      	ldr	r2, [pc, #236]	; (800b42c <TIM_Base_SetConfig+0x120>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3a      	ldr	r2, [pc, #232]	; (800b430 <TIM_Base_SetConfig+0x124>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d108      	bne.n	800b35e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a2f      	ldr	r2, [pc, #188]	; (800b420 <TIM_Base_SetConfig+0x114>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d02b      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36c:	d027      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a2c      	ldr	r2, [pc, #176]	; (800b424 <TIM_Base_SetConfig+0x118>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d023      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a2b      	ldr	r2, [pc, #172]	; (800b428 <TIM_Base_SetConfig+0x11c>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d01f      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a2a      	ldr	r2, [pc, #168]	; (800b42c <TIM_Base_SetConfig+0x120>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d01b      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a29      	ldr	r2, [pc, #164]	; (800b430 <TIM_Base_SetConfig+0x124>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d017      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a28      	ldr	r2, [pc, #160]	; (800b434 <TIM_Base_SetConfig+0x128>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d013      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a27      	ldr	r2, [pc, #156]	; (800b438 <TIM_Base_SetConfig+0x12c>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00f      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a26      	ldr	r2, [pc, #152]	; (800b43c <TIM_Base_SetConfig+0x130>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00b      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a25      	ldr	r2, [pc, #148]	; (800b440 <TIM_Base_SetConfig+0x134>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d007      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a24      	ldr	r2, [pc, #144]	; (800b444 <TIM_Base_SetConfig+0x138>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d003      	beq.n	800b3be <TIM_Base_SetConfig+0xb2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a23      	ldr	r2, [pc, #140]	; (800b448 <TIM_Base_SetConfig+0x13c>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d108      	bne.n	800b3d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a0a      	ldr	r2, [pc, #40]	; (800b420 <TIM_Base_SetConfig+0x114>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d003      	beq.n	800b404 <TIM_Base_SetConfig+0xf8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a0c      	ldr	r2, [pc, #48]	; (800b430 <TIM_Base_SetConfig+0x124>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d103      	bne.n	800b40c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	615a      	str	r2, [r3, #20]
}
 800b412:	bf00      	nop
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	40010000 	.word	0x40010000
 800b424:	40000400 	.word	0x40000400
 800b428:	40000800 	.word	0x40000800
 800b42c:	40000c00 	.word	0x40000c00
 800b430:	40010400 	.word	0x40010400
 800b434:	40014000 	.word	0x40014000
 800b438:	40014400 	.word	0x40014400
 800b43c:	40014800 	.word	0x40014800
 800b440:	40001800 	.word	0x40001800
 800b444:	40001c00 	.word	0x40001c00
 800b448:	40002000 	.word	0x40002000

0800b44c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	f023 0201 	bic.w	r2, r3, #1
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f023 030a 	bic.w	r3, r3, #10
 800b488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b087      	sub	sp, #28
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f023 0210 	bic.w	r2, r3, #16
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6a1b      	ldr	r3, [r3, #32]
 800b4cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b4d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	031b      	lsls	r3, r3, #12
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	621a      	str	r2, [r3, #32]
}
 800b4fe:	bf00      	nop
 800b500:	371c      	adds	r7, #28
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b085      	sub	sp, #20
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	f043 0307 	orr.w	r3, r3, #7
 800b52c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	609a      	str	r2, [r3, #8]
}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b55a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	021a      	lsls	r2, r3, #8
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	431a      	orrs	r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4313      	orrs	r3, r2
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	609a      	str	r2, [r3, #8]
}
 800b574:	bf00      	nop
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b594:	2302      	movs	r3, #2
 800b596:	e06d      	b.n	800b674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a30      	ldr	r2, [pc, #192]	; (800b680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d004      	beq.n	800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a2f      	ldr	r2, [pc, #188]	; (800b684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d108      	bne.n	800b5de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a20      	ldr	r2, [pc, #128]	; (800b680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d022      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60a:	d01d      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a1d      	ldr	r2, [pc, #116]	; (800b688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d018      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a1c      	ldr	r2, [pc, #112]	; (800b68c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d013      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a1a      	ldr	r2, [pc, #104]	; (800b690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d00e      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d009      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a16      	ldr	r2, [pc, #88]	; (800b694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a15      	ldr	r2, [pc, #84]	; (800b698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d10c      	bne.n	800b662 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b64e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	4313      	orrs	r3, r2
 800b658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	40010000 	.word	0x40010000
 800b684:	40010400 	.word	0x40010400
 800b688:	40000400 	.word	0x40000400
 800b68c:	40000800 	.word	0x40000800
 800b690:	40000c00 	.word	0x40000c00
 800b694:	40014000 	.word	0x40014000
 800b698:	40001800 	.word	0x40001800

0800b69c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e040      	b.n	800b76c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d106      	bne.n	800b700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fc f8e8 	bl	80078d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2224      	movs	r2, #36	; 0x24
 800b704:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 0201 	bic.w	r2, r2, #1
 800b714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f82c 	bl	800b774 <UART_SetConfig>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d101      	bne.n	800b726 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e022      	b.n	800b76c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa84 	bl	800bc3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689a      	ldr	r2, [r3, #8]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fb0b 	bl	800bd80 <UART_CheckIdleState>
 800b76a:	4603      	mov	r3, r0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689a      	ldr	r2, [r3, #8]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	431a      	orrs	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	4313      	orrs	r3, r2
 800b796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4ba6      	ldr	r3, [pc, #664]	; (800ba38 <UART_SetConfig+0x2c4>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	6979      	ldr	r1, [r7, #20]
 800b7a8:	430b      	orrs	r3, r1
 800b7aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a94      	ldr	r2, [pc, #592]	; (800ba3c <UART_SetConfig+0x2c8>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d120      	bne.n	800b832 <UART_SetConfig+0xbe>
 800b7f0:	4b93      	ldr	r3, [pc, #588]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d816      	bhi.n	800b82c <UART_SetConfig+0xb8>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <UART_SetConfig+0x90>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b815 	.word	0x0800b815
 800b808:	0800b821 	.word	0x0800b821
 800b80c:	0800b81b 	.word	0x0800b81b
 800b810:	0800b827 	.word	0x0800b827
 800b814:	2301      	movs	r3, #1
 800b816:	77fb      	strb	r3, [r7, #31]
 800b818:	e150      	b.n	800babc <UART_SetConfig+0x348>
 800b81a:	2302      	movs	r3, #2
 800b81c:	77fb      	strb	r3, [r7, #31]
 800b81e:	e14d      	b.n	800babc <UART_SetConfig+0x348>
 800b820:	2304      	movs	r3, #4
 800b822:	77fb      	strb	r3, [r7, #31]
 800b824:	e14a      	b.n	800babc <UART_SetConfig+0x348>
 800b826:	2308      	movs	r3, #8
 800b828:	77fb      	strb	r3, [r7, #31]
 800b82a:	e147      	b.n	800babc <UART_SetConfig+0x348>
 800b82c:	2310      	movs	r3, #16
 800b82e:	77fb      	strb	r3, [r7, #31]
 800b830:	e144      	b.n	800babc <UART_SetConfig+0x348>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a83      	ldr	r2, [pc, #524]	; (800ba44 <UART_SetConfig+0x2d0>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d132      	bne.n	800b8a2 <UART_SetConfig+0x12e>
 800b83c:	4b80      	ldr	r3, [pc, #512]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b842:	f003 030c 	and.w	r3, r3, #12
 800b846:	2b0c      	cmp	r3, #12
 800b848:	d828      	bhi.n	800b89c <UART_SetConfig+0x128>
 800b84a:	a201      	add	r2, pc, #4	; (adr r2, 800b850 <UART_SetConfig+0xdc>)
 800b84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b850:	0800b885 	.word	0x0800b885
 800b854:	0800b89d 	.word	0x0800b89d
 800b858:	0800b89d 	.word	0x0800b89d
 800b85c:	0800b89d 	.word	0x0800b89d
 800b860:	0800b891 	.word	0x0800b891
 800b864:	0800b89d 	.word	0x0800b89d
 800b868:	0800b89d 	.word	0x0800b89d
 800b86c:	0800b89d 	.word	0x0800b89d
 800b870:	0800b88b 	.word	0x0800b88b
 800b874:	0800b89d 	.word	0x0800b89d
 800b878:	0800b89d 	.word	0x0800b89d
 800b87c:	0800b89d 	.word	0x0800b89d
 800b880:	0800b897 	.word	0x0800b897
 800b884:	2300      	movs	r3, #0
 800b886:	77fb      	strb	r3, [r7, #31]
 800b888:	e118      	b.n	800babc <UART_SetConfig+0x348>
 800b88a:	2302      	movs	r3, #2
 800b88c:	77fb      	strb	r3, [r7, #31]
 800b88e:	e115      	b.n	800babc <UART_SetConfig+0x348>
 800b890:	2304      	movs	r3, #4
 800b892:	77fb      	strb	r3, [r7, #31]
 800b894:	e112      	b.n	800babc <UART_SetConfig+0x348>
 800b896:	2308      	movs	r3, #8
 800b898:	77fb      	strb	r3, [r7, #31]
 800b89a:	e10f      	b.n	800babc <UART_SetConfig+0x348>
 800b89c:	2310      	movs	r3, #16
 800b89e:	77fb      	strb	r3, [r7, #31]
 800b8a0:	e10c      	b.n	800babc <UART_SetConfig+0x348>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a68      	ldr	r2, [pc, #416]	; (800ba48 <UART_SetConfig+0x2d4>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d120      	bne.n	800b8ee <UART_SetConfig+0x17a>
 800b8ac:	4b64      	ldr	r3, [pc, #400]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b8b6:	2b30      	cmp	r3, #48	; 0x30
 800b8b8:	d013      	beq.n	800b8e2 <UART_SetConfig+0x16e>
 800b8ba:	2b30      	cmp	r3, #48	; 0x30
 800b8bc:	d814      	bhi.n	800b8e8 <UART_SetConfig+0x174>
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	d009      	beq.n	800b8d6 <UART_SetConfig+0x162>
 800b8c2:	2b20      	cmp	r3, #32
 800b8c4:	d810      	bhi.n	800b8e8 <UART_SetConfig+0x174>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <UART_SetConfig+0x15c>
 800b8ca:	2b10      	cmp	r3, #16
 800b8cc:	d006      	beq.n	800b8dc <UART_SetConfig+0x168>
 800b8ce:	e00b      	b.n	800b8e8 <UART_SetConfig+0x174>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	77fb      	strb	r3, [r7, #31]
 800b8d4:	e0f2      	b.n	800babc <UART_SetConfig+0x348>
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	77fb      	strb	r3, [r7, #31]
 800b8da:	e0ef      	b.n	800babc <UART_SetConfig+0x348>
 800b8dc:	2304      	movs	r3, #4
 800b8de:	77fb      	strb	r3, [r7, #31]
 800b8e0:	e0ec      	b.n	800babc <UART_SetConfig+0x348>
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	77fb      	strb	r3, [r7, #31]
 800b8e6:	e0e9      	b.n	800babc <UART_SetConfig+0x348>
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	77fb      	strb	r3, [r7, #31]
 800b8ec:	e0e6      	b.n	800babc <UART_SetConfig+0x348>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a56      	ldr	r2, [pc, #344]	; (800ba4c <UART_SetConfig+0x2d8>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d120      	bne.n	800b93a <UART_SetConfig+0x1c6>
 800b8f8:	4b51      	ldr	r3, [pc, #324]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b902:	2bc0      	cmp	r3, #192	; 0xc0
 800b904:	d013      	beq.n	800b92e <UART_SetConfig+0x1ba>
 800b906:	2bc0      	cmp	r3, #192	; 0xc0
 800b908:	d814      	bhi.n	800b934 <UART_SetConfig+0x1c0>
 800b90a:	2b80      	cmp	r3, #128	; 0x80
 800b90c:	d009      	beq.n	800b922 <UART_SetConfig+0x1ae>
 800b90e:	2b80      	cmp	r3, #128	; 0x80
 800b910:	d810      	bhi.n	800b934 <UART_SetConfig+0x1c0>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <UART_SetConfig+0x1a8>
 800b916:	2b40      	cmp	r3, #64	; 0x40
 800b918:	d006      	beq.n	800b928 <UART_SetConfig+0x1b4>
 800b91a:	e00b      	b.n	800b934 <UART_SetConfig+0x1c0>
 800b91c:	2300      	movs	r3, #0
 800b91e:	77fb      	strb	r3, [r7, #31]
 800b920:	e0cc      	b.n	800babc <UART_SetConfig+0x348>
 800b922:	2302      	movs	r3, #2
 800b924:	77fb      	strb	r3, [r7, #31]
 800b926:	e0c9      	b.n	800babc <UART_SetConfig+0x348>
 800b928:	2304      	movs	r3, #4
 800b92a:	77fb      	strb	r3, [r7, #31]
 800b92c:	e0c6      	b.n	800babc <UART_SetConfig+0x348>
 800b92e:	2308      	movs	r3, #8
 800b930:	77fb      	strb	r3, [r7, #31]
 800b932:	e0c3      	b.n	800babc <UART_SetConfig+0x348>
 800b934:	2310      	movs	r3, #16
 800b936:	77fb      	strb	r3, [r7, #31]
 800b938:	e0c0      	b.n	800babc <UART_SetConfig+0x348>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a44      	ldr	r2, [pc, #272]	; (800ba50 <UART_SetConfig+0x2dc>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d125      	bne.n	800b990 <UART_SetConfig+0x21c>
 800b944:	4b3e      	ldr	r3, [pc, #248]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b94e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b952:	d017      	beq.n	800b984 <UART_SetConfig+0x210>
 800b954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b958:	d817      	bhi.n	800b98a <UART_SetConfig+0x216>
 800b95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95e:	d00b      	beq.n	800b978 <UART_SetConfig+0x204>
 800b960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b964:	d811      	bhi.n	800b98a <UART_SetConfig+0x216>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <UART_SetConfig+0x1fe>
 800b96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b96e:	d006      	beq.n	800b97e <UART_SetConfig+0x20a>
 800b970:	e00b      	b.n	800b98a <UART_SetConfig+0x216>
 800b972:	2300      	movs	r3, #0
 800b974:	77fb      	strb	r3, [r7, #31]
 800b976:	e0a1      	b.n	800babc <UART_SetConfig+0x348>
 800b978:	2302      	movs	r3, #2
 800b97a:	77fb      	strb	r3, [r7, #31]
 800b97c:	e09e      	b.n	800babc <UART_SetConfig+0x348>
 800b97e:	2304      	movs	r3, #4
 800b980:	77fb      	strb	r3, [r7, #31]
 800b982:	e09b      	b.n	800babc <UART_SetConfig+0x348>
 800b984:	2308      	movs	r3, #8
 800b986:	77fb      	strb	r3, [r7, #31]
 800b988:	e098      	b.n	800babc <UART_SetConfig+0x348>
 800b98a:	2310      	movs	r3, #16
 800b98c:	77fb      	strb	r3, [r7, #31]
 800b98e:	e095      	b.n	800babc <UART_SetConfig+0x348>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a2f      	ldr	r2, [pc, #188]	; (800ba54 <UART_SetConfig+0x2e0>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d125      	bne.n	800b9e6 <UART_SetConfig+0x272>
 800b99a:	4b29      	ldr	r3, [pc, #164]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b9a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9a8:	d017      	beq.n	800b9da <UART_SetConfig+0x266>
 800b9aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9ae:	d817      	bhi.n	800b9e0 <UART_SetConfig+0x26c>
 800b9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b4:	d00b      	beq.n	800b9ce <UART_SetConfig+0x25a>
 800b9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ba:	d811      	bhi.n	800b9e0 <UART_SetConfig+0x26c>
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <UART_SetConfig+0x254>
 800b9c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c4:	d006      	beq.n	800b9d4 <UART_SetConfig+0x260>
 800b9c6:	e00b      	b.n	800b9e0 <UART_SetConfig+0x26c>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	77fb      	strb	r3, [r7, #31]
 800b9cc:	e076      	b.n	800babc <UART_SetConfig+0x348>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	77fb      	strb	r3, [r7, #31]
 800b9d2:	e073      	b.n	800babc <UART_SetConfig+0x348>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	77fb      	strb	r3, [r7, #31]
 800b9d8:	e070      	b.n	800babc <UART_SetConfig+0x348>
 800b9da:	2308      	movs	r3, #8
 800b9dc:	77fb      	strb	r3, [r7, #31]
 800b9de:	e06d      	b.n	800babc <UART_SetConfig+0x348>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	77fb      	strb	r3, [r7, #31]
 800b9e4:	e06a      	b.n	800babc <UART_SetConfig+0x348>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <UART_SetConfig+0x2e4>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d138      	bne.n	800ba62 <UART_SetConfig+0x2ee>
 800b9f0:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <UART_SetConfig+0x2cc>)
 800b9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b9fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9fe:	d017      	beq.n	800ba30 <UART_SetConfig+0x2bc>
 800ba00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba04:	d82a      	bhi.n	800ba5c <UART_SetConfig+0x2e8>
 800ba06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba0a:	d00b      	beq.n	800ba24 <UART_SetConfig+0x2b0>
 800ba0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba10:	d824      	bhi.n	800ba5c <UART_SetConfig+0x2e8>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <UART_SetConfig+0x2aa>
 800ba16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba1a:	d006      	beq.n	800ba2a <UART_SetConfig+0x2b6>
 800ba1c:	e01e      	b.n	800ba5c <UART_SetConfig+0x2e8>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	77fb      	strb	r3, [r7, #31]
 800ba22:	e04b      	b.n	800babc <UART_SetConfig+0x348>
 800ba24:	2302      	movs	r3, #2
 800ba26:	77fb      	strb	r3, [r7, #31]
 800ba28:	e048      	b.n	800babc <UART_SetConfig+0x348>
 800ba2a:	2304      	movs	r3, #4
 800ba2c:	77fb      	strb	r3, [r7, #31]
 800ba2e:	e045      	b.n	800babc <UART_SetConfig+0x348>
 800ba30:	2308      	movs	r3, #8
 800ba32:	77fb      	strb	r3, [r7, #31]
 800ba34:	e042      	b.n	800babc <UART_SetConfig+0x348>
 800ba36:	bf00      	nop
 800ba38:	efff69f3 	.word	0xefff69f3
 800ba3c:	40011000 	.word	0x40011000
 800ba40:	40023800 	.word	0x40023800
 800ba44:	40004400 	.word	0x40004400
 800ba48:	40004800 	.word	0x40004800
 800ba4c:	40004c00 	.word	0x40004c00
 800ba50:	40005000 	.word	0x40005000
 800ba54:	40011400 	.word	0x40011400
 800ba58:	40007800 	.word	0x40007800
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	77fb      	strb	r3, [r7, #31]
 800ba60:	e02c      	b.n	800babc <UART_SetConfig+0x348>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a72      	ldr	r2, [pc, #456]	; (800bc30 <UART_SetConfig+0x4bc>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d125      	bne.n	800bab8 <UART_SetConfig+0x344>
 800ba6c:	4b71      	ldr	r3, [pc, #452]	; (800bc34 <UART_SetConfig+0x4c0>)
 800ba6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba7a:	d017      	beq.n	800baac <UART_SetConfig+0x338>
 800ba7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ba80:	d817      	bhi.n	800bab2 <UART_SetConfig+0x33e>
 800ba82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba86:	d00b      	beq.n	800baa0 <UART_SetConfig+0x32c>
 800ba88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8c:	d811      	bhi.n	800bab2 <UART_SetConfig+0x33e>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <UART_SetConfig+0x326>
 800ba92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba96:	d006      	beq.n	800baa6 <UART_SetConfig+0x332>
 800ba98:	e00b      	b.n	800bab2 <UART_SetConfig+0x33e>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	77fb      	strb	r3, [r7, #31]
 800ba9e:	e00d      	b.n	800babc <UART_SetConfig+0x348>
 800baa0:	2302      	movs	r3, #2
 800baa2:	77fb      	strb	r3, [r7, #31]
 800baa4:	e00a      	b.n	800babc <UART_SetConfig+0x348>
 800baa6:	2304      	movs	r3, #4
 800baa8:	77fb      	strb	r3, [r7, #31]
 800baaa:	e007      	b.n	800babc <UART_SetConfig+0x348>
 800baac:	2308      	movs	r3, #8
 800baae:	77fb      	strb	r3, [r7, #31]
 800bab0:	e004      	b.n	800babc <UART_SetConfig+0x348>
 800bab2:	2310      	movs	r3, #16
 800bab4:	77fb      	strb	r3, [r7, #31]
 800bab6:	e001      	b.n	800babc <UART_SetConfig+0x348>
 800bab8:	2310      	movs	r3, #16
 800baba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	69db      	ldr	r3, [r3, #28]
 800bac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac4:	d15b      	bne.n	800bb7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bac6:	7ffb      	ldrb	r3, [r7, #31]
 800bac8:	2b08      	cmp	r3, #8
 800baca:	d828      	bhi.n	800bb1e <UART_SetConfig+0x3aa>
 800bacc:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <UART_SetConfig+0x360>)
 800bace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad2:	bf00      	nop
 800bad4:	0800baf9 	.word	0x0800baf9
 800bad8:	0800bb01 	.word	0x0800bb01
 800badc:	0800bb09 	.word	0x0800bb09
 800bae0:	0800bb1f 	.word	0x0800bb1f
 800bae4:	0800bb0f 	.word	0x0800bb0f
 800bae8:	0800bb1f 	.word	0x0800bb1f
 800baec:	0800bb1f 	.word	0x0800bb1f
 800baf0:	0800bb1f 	.word	0x0800bb1f
 800baf4:	0800bb17 	.word	0x0800bb17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baf8:	f7fd ff1e 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 800bafc:	61b8      	str	r0, [r7, #24]
        break;
 800bafe:	e013      	b.n	800bb28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb00:	f7fd ff2e 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800bb04:	61b8      	str	r0, [r7, #24]
        break;
 800bb06:	e00f      	b.n	800bb28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb08:	4b4b      	ldr	r3, [pc, #300]	; (800bc38 <UART_SetConfig+0x4c4>)
 800bb0a:	61bb      	str	r3, [r7, #24]
        break;
 800bb0c:	e00c      	b.n	800bb28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb0e:	f7fd fe01 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 800bb12:	61b8      	str	r0, [r7, #24]
        break;
 800bb14:	e008      	b.n	800bb28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb1a:	61bb      	str	r3, [r7, #24]
        break;
 800bb1c:	e004      	b.n	800bb28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	77bb      	strb	r3, [r7, #30]
        break;
 800bb26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d074      	beq.n	800bc18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	005a      	lsls	r2, r3, #1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	441a      	add	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2b0f      	cmp	r3, #15
 800bb48:	d916      	bls.n	800bb78 <UART_SetConfig+0x404>
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb50:	d212      	bcs.n	800bb78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	f023 030f 	bic.w	r3, r3, #15
 800bb5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	085b      	lsrs	r3, r3, #1
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	f003 0307 	and.w	r3, r3, #7
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	89fb      	ldrh	r3, [r7, #14]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	89fa      	ldrh	r2, [r7, #14]
 800bb74:	60da      	str	r2, [r3, #12]
 800bb76:	e04f      	b.n	800bc18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	77bb      	strb	r3, [r7, #30]
 800bb7c:	e04c      	b.n	800bc18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb7e:	7ffb      	ldrb	r3, [r7, #31]
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d828      	bhi.n	800bbd6 <UART_SetConfig+0x462>
 800bb84:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0x418>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bbb1 	.word	0x0800bbb1
 800bb90:	0800bbb9 	.word	0x0800bbb9
 800bb94:	0800bbc1 	.word	0x0800bbc1
 800bb98:	0800bbd7 	.word	0x0800bbd7
 800bb9c:	0800bbc7 	.word	0x0800bbc7
 800bba0:	0800bbd7 	.word	0x0800bbd7
 800bba4:	0800bbd7 	.word	0x0800bbd7
 800bba8:	0800bbd7 	.word	0x0800bbd7
 800bbac:	0800bbcf 	.word	0x0800bbcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbb0:	f7fd fec2 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 800bbb4:	61b8      	str	r0, [r7, #24]
        break;
 800bbb6:	e013      	b.n	800bbe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbb8:	f7fd fed2 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800bbbc:	61b8      	str	r0, [r7, #24]
        break;
 800bbbe:	e00f      	b.n	800bbe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <UART_SetConfig+0x4c4>)
 800bbc2:	61bb      	str	r3, [r7, #24]
        break;
 800bbc4:	e00c      	b.n	800bbe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbc6:	f7fd fda5 	bl	8009714 <HAL_RCC_GetSysClockFreq>
 800bbca:	61b8      	str	r0, [r7, #24]
        break;
 800bbcc:	e008      	b.n	800bbe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd2:	61bb      	str	r3, [r7, #24]
        break;
 800bbd4:	e004      	b.n	800bbe0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	77bb      	strb	r3, [r7, #30]
        break;
 800bbde:	bf00      	nop
    }

    if (pclk != 0U)
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d018      	beq.n	800bc18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	085a      	lsrs	r2, r3, #1
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	441a      	add	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b0f      	cmp	r3, #15
 800bbfe:	d909      	bls.n	800bc14 <UART_SetConfig+0x4a0>
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc06:	d205      	bcs.n	800bc14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60da      	str	r2, [r3, #12]
 800bc12:	e001      	b.n	800bc18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bc24:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3720      	adds	r7, #32
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	40007c00 	.word	0x40007c00
 800bc34:	40023800 	.word	0x40023800
 800bc38:	00f42400 	.word	0x00f42400

0800bc3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	430a      	orrs	r2, r1
 800bc86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcae:	f003 0308 	and.w	r3, r3, #8
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00a      	beq.n	800bccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	430a      	orrs	r2, r1
 800bcca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	f003 0310 	and.w	r3, r3, #16
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	f003 0320 	and.w	r3, r3, #32
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01a      	beq.n	800bd52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd3a:	d10a      	bne.n	800bd52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	605a      	str	r2, [r3, #4]
  }
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd90:	f7fb ff20 	bl	8007bd4 <HAL_GetTick>
 800bd94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d10e      	bne.n	800bdc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bda4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f81b 	bl	800bdee <UART_WaitOnFlagUntilTimeout>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e011      	b.n	800bde6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b09c      	sub	sp, #112	; 0x70
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	603b      	str	r3, [r7, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdfe:	e0a7      	b.n	800bf50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be06:	f000 80a3 	beq.w	800bf50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be0a:	f7fb fee3 	bl	8007bd4 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be16:	429a      	cmp	r2, r3
 800be18:	d302      	bcc.n	800be20 <UART_WaitOnFlagUntilTimeout+0x32>
 800be1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d13f      	bne.n	800bea0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be34:	667b      	str	r3, [r7, #100]	; 0x64
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be46:	e841 2300 	strex	r3, r2, [r1]
 800be4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e6      	bne.n	800be20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3308      	adds	r3, #8
 800be58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	f023 0301 	bic.w	r3, r3, #1
 800be68:	663b      	str	r3, [r7, #96]	; 0x60
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be72:	64ba      	str	r2, [r7, #72]	; 0x48
 800be74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1e5      	bne.n	800be52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2220      	movs	r2, #32
 800be8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2220      	movs	r2, #32
 800be90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e068      	b.n	800bf72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d050      	beq.n	800bf50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bebc:	d148      	bne.n	800bf50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bec6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bedc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
 800bee8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800beec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e6      	bne.n	800bec8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3308      	adds	r3, #8
 800bf00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	613b      	str	r3, [r7, #16]
   return(result);
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f023 0301 	bic.w	r3, r3, #1
 800bf10:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3308      	adds	r3, #8
 800bf18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf1a:	623a      	str	r2, [r7, #32]
 800bf1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	69f9      	ldr	r1, [r7, #28]
 800bf20:	6a3a      	ldr	r2, [r7, #32]
 800bf22:	e841 2300 	strex	r3, r2, [r1]
 800bf26:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1e5      	bne.n	800befa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2220      	movs	r2, #32
 800bf32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2220      	movs	r2, #32
 800bf38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e010      	b.n	800bf72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	69da      	ldr	r2, [r3, #28]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	4013      	ands	r3, r2
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	bf0c      	ite	eq
 800bf60:	2301      	moveq	r3, #1
 800bf62:	2300      	movne	r3, #0
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	461a      	mov	r2, r3
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	f43f af48 	beq.w	800be00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3770      	adds	r7, #112	; 0x70
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	f107 001c 	add.w	r0, r7, #28
 800bf8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d120      	bne.n	800bfd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	4b20      	ldr	r3, [pc, #128]	; (800c028 <USB_CoreInit+0xac>)
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d105      	bne.n	800bfca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa96 	bl	800c4fc <USB_CoreReset>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]
 800bfd4:	e010      	b.n	800bff8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fa8a 	bl	800c4fc <USB_CoreReset>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d10b      	bne.n	800c016 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f043 0206 	orr.w	r2, r3, #6
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f043 0220 	orr.w	r2, r3, #32
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c016:	7bfb      	ldrb	r3, [r7, #15]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c022:	b004      	add	sp, #16
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	ffbdffbf 	.word	0xffbdffbf

0800c02c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f023 0201 	bic.w	r2, r3, #1
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d115      	bne.n	800c09c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c07c:	2001      	movs	r0, #1
 800c07e:	f7fb fdb5 	bl	8007bec <HAL_Delay>
      ms++;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3301      	adds	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fa29 	bl	800c4e0 <USB_GetMode>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b01      	cmp	r3, #1
 800c092:	d01e      	beq.n	800c0d2 <USB_SetCurrentMode+0x84>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b31      	cmp	r3, #49	; 0x31
 800c098:	d9f0      	bls.n	800c07c <USB_SetCurrentMode+0x2e>
 800c09a:	e01a      	b.n	800c0d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d115      	bne.n	800c0ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	f7fb fd9c 	bl	8007bec <HAL_Delay>
      ms++;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fa10 	bl	800c4e0 <USB_GetMode>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d005      	beq.n	800c0d2 <USB_SetCurrentMode+0x84>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b31      	cmp	r3, #49	; 0x31
 800c0ca:	d9f0      	bls.n	800c0ae <USB_SetCurrentMode+0x60>
 800c0cc:	e001      	b.n	800c0d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e005      	b.n	800c0de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b32      	cmp	r3, #50	; 0x32
 800c0d6:	d101      	bne.n	800c0dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e000      	b.n	800c0de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b086      	sub	sp, #24
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]
 800c106:	e009      	b.n	800c11c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3340      	adds	r3, #64	; 0x40
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	2200      	movs	r2, #0
 800c114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	3301      	adds	r3, #1
 800c11a:	613b      	str	r3, [r7, #16]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b0e      	cmp	r3, #14
 800c120:	d9f2      	bls.n	800c108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11c      	bne.n	800c162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c136:	f043 0302 	orr.w	r3, r3, #2
 800c13a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	e005      	b.n	800c16e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c174:	461a      	mov	r2, r3
 800c176:	2300      	movs	r3, #0
 800c178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c180:	4619      	mov	r1, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c188:	461a      	mov	r2, r3
 800c18a:	680b      	ldr	r3, [r1, #0]
 800c18c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	2b01      	cmp	r3, #1
 800c192:	d10c      	bne.n	800c1ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d104      	bne.n	800c1a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c19a:	2100      	movs	r1, #0
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f965 	bl	800c46c <USB_SetDevSpeed>
 800c1a2:	e008      	b.n	800c1b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f960 	bl	800c46c <USB_SetDevSpeed>
 800c1ac:	e003      	b.n	800c1b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c1ae:	2103      	movs	r1, #3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f95b 	bl	800c46c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1b6:	2110      	movs	r1, #16
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f8f3 	bl	800c3a4 <USB_FlushTxFifo>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f91f 	bl	800c40c <USB_FlushRxFifo>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1de:	461a      	mov	r2, r3
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	e043      	b.n	800c28a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c218:	d118      	bne.n	800c24c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	461a      	mov	r2, r3
 800c22e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	e013      	b.n	800c25e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c242:	461a      	mov	r2, r3
 800c244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	e008      	b.n	800c25e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c258:	461a      	mov	r2, r3
 800c25a:	2300      	movs	r3, #0
 800c25c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26a:	461a      	mov	r2, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27c:	461a      	mov	r2, r3
 800c27e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3301      	adds	r3, #1
 800c288:	613b      	str	r3, [r7, #16]
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d3b7      	bcc.n	800c202 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c292:	2300      	movs	r3, #0
 800c294:	613b      	str	r3, [r7, #16]
 800c296:	e043      	b.n	800c320 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ae:	d118      	bne.n	800c2e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10a      	bne.n	800c2cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	015a      	lsls	r2, r3, #5
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	4413      	add	r3, r2
 800c2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	e013      	b.n	800c2f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d8:	461a      	mov	r2, r3
 800c2da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e008      	b.n	800c2f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	015a      	lsls	r2, r3, #5
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c300:	461a      	mov	r2, r3
 800c302:	2300      	movs	r3, #0
 800c304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c312:	461a      	mov	r2, r3
 800c314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	3301      	adds	r3, #1
 800c31e:	613b      	str	r3, [r7, #16]
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	429a      	cmp	r2, r3
 800c326:	d3b7      	bcc.n	800c298 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c33a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d105      	bne.n	800c35c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	f043 0210 	orr.w	r2, r3, #16
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	699a      	ldr	r2, [r3, #24]
 800c360:	4b0e      	ldr	r3, [pc, #56]	; (800c39c <USB_DevInit+0x2b4>)
 800c362:	4313      	orrs	r3, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	f043 0208 	orr.w	r2, r3, #8
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d105      	bne.n	800c38c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	699a      	ldr	r2, [r3, #24]
 800c384:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <USB_DevInit+0x2b8>)
 800c386:	4313      	orrs	r3, r2
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c398:	b004      	add	sp, #16
 800c39a:	4770      	bx	lr
 800c39c:	803c3800 	.word	0x803c3800
 800c3a0:	40000004 	.word	0x40000004

0800c3a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	4a13      	ldr	r2, [pc, #76]	; (800c408 <USB_FlushTxFifo+0x64>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d901      	bls.n	800c3c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e01b      	b.n	800c3fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	daf2      	bge.n	800c3b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	019b      	lsls	r3, r3, #6
 800c3d4:	f043 0220 	orr.w	r2, r3, #32
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4a08      	ldr	r2, [pc, #32]	; (800c408 <USB_FlushTxFifo+0x64>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d901      	bls.n	800c3ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e006      	b.n	800c3fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d0f0      	beq.n	800c3dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	00030d40 	.word	0x00030d40

0800c40c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c414:	2300      	movs	r3, #0
 800c416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3301      	adds	r3, #1
 800c41c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4a11      	ldr	r2, [pc, #68]	; (800c468 <USB_FlushRxFifo+0x5c>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d901      	bls.n	800c42a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e018      	b.n	800c45c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	daf2      	bge.n	800c418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2210      	movs	r2, #16
 800c43a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4a08      	ldr	r2, [pc, #32]	; (800c468 <USB_FlushRxFifo+0x5c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d901      	bls.n	800c44e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e006      	b.n	800c45c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	f003 0310 	and.w	r3, r3, #16
 800c456:	2b10      	cmp	r3, #16
 800c458:	d0f0      	beq.n	800c43c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	00030d40 	.word	0x00030d40

0800c46c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	68f9      	ldr	r1, [r7, #12]
 800c488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c48c:	4313      	orrs	r3, r2
 800c48e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4b8:	f023 0303 	bic.w	r3, r3, #3
 800c4bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4cc:	f043 0302 	orr.w	r3, r3, #2
 800c4d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4a13      	ldr	r2, [pc, #76]	; (800c560 <USB_CoreReset+0x64>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d901      	bls.n	800c51a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e01b      	b.n	800c552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	daf2      	bge.n	800c508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f043 0201 	orr.w	r2, r3, #1
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3301      	adds	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4a09      	ldr	r2, [pc, #36]	; (800c560 <USB_CoreReset+0x64>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d901      	bls.n	800c544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e006      	b.n	800c552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d0f0      	beq.n	800c532 <USB_CoreReset+0x36>

  return HAL_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	00030d40 	.word	0x00030d40

0800c564 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c568:	4904      	ldr	r1, [pc, #16]	; (800c57c <MX_FATFS_Init+0x18>)
 800c56a:	4805      	ldr	r0, [pc, #20]	; (800c580 <MX_FATFS_Init+0x1c>)
 800c56c:	f003 f904 	bl	800f778 <FATFS_LinkDriver>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	4b03      	ldr	r3, [pc, #12]	; (800c584 <MX_FATFS_Init+0x20>)
 800c576:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c578:	bf00      	nop
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	2001d2cc 	.word	0x2001d2cc
 800c580:	20000058 	.word	0x20000058
 800c584:	2001d2c8 	.word	0x2001d2c8

0800c588 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c588:	b480      	push	{r7}
 800c58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c58c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c58e:	4618      	mov	r0, r3
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800c5a2:	79fb      	ldrb	r3, [r7, #7]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7f8 fa81 	bl	8004aac <SD_disk_initialize>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	4603      	mov	r3, r0
 800c5be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f8 fb5c 	bl	8004c80 <SD_disk_status>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800c5e4:	7bf8      	ldrb	r0, [r7, #15]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	f7f8 fb5e 	bl	8004cac <SD_disk_read>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	60b9      	str	r1, [r7, #8]
 800c604:	607a      	str	r2, [r7, #4]
 800c606:	603b      	str	r3, [r7, #0]
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800c60c:	7bf8      	ldrb	r0, [r7, #15]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	68b9      	ldr	r1, [r7, #8]
 800c614:	f7f8 fbb4 	bl	8004d80 <SD_disk_write>
 800c618:	4603      	mov	r3, r0
 800c61a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	603a      	str	r2, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
 800c630:	460b      	mov	r3, r1
 800c632:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	79b9      	ldrb	r1, [r7, #6]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f8 fc24 	bl	8004e88 <SD_disk_ioctl>
 800c640:	4603      	mov	r3, r0
 800c642:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	4a08      	ldr	r2, [pc, #32]	; (800c67c <disk_status+0x30>)
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	79fa      	ldrb	r2, [r7, #7]
 800c664:	4905      	ldr	r1, [pc, #20]	; (800c67c <disk_status+0x30>)
 800c666:	440a      	add	r2, r1
 800c668:	7a12      	ldrb	r2, [r2, #8]
 800c66a:	4610      	mov	r0, r2
 800c66c:	4798      	blx	r3
 800c66e:	4603      	mov	r3, r0
 800c670:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	2001d4f8 	.word	0x2001d4f8

0800c680 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c68e:	79fb      	ldrb	r3, [r7, #7]
 800c690:	4a0d      	ldr	r2, [pc, #52]	; (800c6c8 <disk_initialize+0x48>)
 800c692:	5cd3      	ldrb	r3, [r2, r3]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d111      	bne.n	800c6bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c698:	79fb      	ldrb	r3, [r7, #7]
 800c69a:	4a0b      	ldr	r2, [pc, #44]	; (800c6c8 <disk_initialize+0x48>)
 800c69c:	2101      	movs	r1, #1
 800c69e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	4a09      	ldr	r2, [pc, #36]	; (800c6c8 <disk_initialize+0x48>)
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	79fa      	ldrb	r2, [r7, #7]
 800c6ae:	4906      	ldr	r1, [pc, #24]	; (800c6c8 <disk_initialize+0x48>)
 800c6b0:	440a      	add	r2, r1
 800c6b2:	7a12      	ldrb	r2, [r2, #8]
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	2001d4f8 	.word	0x2001d4f8

0800c6cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c6cc:	b590      	push	{r4, r7, lr}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60b9      	str	r1, [r7, #8]
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	4a0a      	ldr	r2, [pc, #40]	; (800c708 <disk_read+0x3c>)
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	689c      	ldr	r4, [r3, #8]
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4a07      	ldr	r2, [pc, #28]	; (800c708 <disk_read+0x3c>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	7a18      	ldrb	r0, [r3, #8]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	68b9      	ldr	r1, [r7, #8]
 800c6f6:	47a0      	blx	r4
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd90      	pop	{r4, r7, pc}
 800c706:	bf00      	nop
 800c708:	2001d4f8 	.word	0x2001d4f8

0800c70c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c70c:	b590      	push	{r4, r7, lr}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	4a0a      	ldr	r2, [pc, #40]	; (800c748 <disk_write+0x3c>)
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	68dc      	ldr	r4, [r3, #12]
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	4a07      	ldr	r2, [pc, #28]	; (800c748 <disk_write+0x3c>)
 800c72c:	4413      	add	r3, r2
 800c72e:	7a18      	ldrb	r0, [r3, #8]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	68b9      	ldr	r1, [r7, #8]
 800c736:	47a0      	blx	r4
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	bd90      	pop	{r4, r7, pc}
 800c746:	bf00      	nop
 800c748:	2001d4f8 	.word	0x2001d4f8

0800c74c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	603a      	str	r2, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
 800c758:	460b      	mov	r3, r1
 800c75a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	4a09      	ldr	r2, [pc, #36]	; (800c784 <disk_ioctl+0x38>)
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	79fa      	ldrb	r2, [r7, #7]
 800c76a:	4906      	ldr	r1, [pc, #24]	; (800c784 <disk_ioctl+0x38>)
 800c76c:	440a      	add	r2, r1
 800c76e:	7a10      	ldrb	r0, [r2, #8]
 800c770:	79b9      	ldrb	r1, [r7, #6]
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4798      	blx	r3
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
  return res;
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	2001d4f8 	.word	0x2001d4f8

0800c788 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3301      	adds	r3, #1
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c798:	89fb      	ldrh	r3, [r7, #14]
 800c79a:	021b      	lsls	r3, r3, #8
 800c79c:	b21a      	sxth	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	b21b      	sxth	r3, r3
 800c7a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c7aa:	89fb      	ldrh	r3, [r7, #14]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3303      	adds	r3, #3
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	021b      	lsls	r3, r3, #8
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	3202      	adds	r2, #2
 800c7d0:	7812      	ldrb	r2, [r2, #0]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	021b      	lsls	r3, r3, #8
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	3201      	adds	r2, #1
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	021b      	lsls	r3, r3, #8
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	7812      	ldrb	r2, [r2, #0]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	887a      	ldrh	r2, [r7, #2]
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]
 800c816:	887b      	ldrh	r3, [r7, #2]
 800c818:	0a1b      	lsrs	r3, r3, #8
 800c81a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	887a      	ldrh	r2, [r7, #2]
 800c824:	b2d2      	uxtb	r2, r2
 800c826:	701a      	strb	r2, [r3, #0]
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	b2d2      	uxtb	r2, r2
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	0a1b      	lsrs	r3, r3, #8
 800c84e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	607a      	str	r2, [r7, #4]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	0a1b      	lsrs	r3, r3, #8
 800c872:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	607a      	str	r2, [r7, #4]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	b2d2      	uxtb	r2, r2
 800c87e:	701a      	strb	r2, [r3, #0]
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00d      	beq.n	800c8c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	1c53      	adds	r3, r2, #1
 800c8aa:	613b      	str	r3, [r7, #16]
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	1c59      	adds	r1, r3, #1
 800c8b0:	6179      	str	r1, [r7, #20]
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	607b      	str	r3, [r7, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1f1      	bne.n	800c8a6 <mem_cpy+0x1a>
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c8ce:	b480      	push	{r7}
 800c8d0:	b087      	sub	sp, #28
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	617a      	str	r2, [r7, #20]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1f3      	bne.n	800c8de <mem_set+0x10>
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	371c      	adds	r7, #28
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c904:	b480      	push	{r7}
 800c906:	b089      	sub	sp, #36	; 0x24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	61fa      	str	r2, [r7, #28]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	4619      	mov	r1, r3
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	61ba      	str	r2, [r7, #24]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	1acb      	subs	r3, r1, r3
 800c930:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3b01      	subs	r3, #1
 800c936:	607b      	str	r3, [r7, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <mem_cmp+0x40>
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0eb      	beq.n	800c91c <mem_cmp+0x18>

	return r;
 800c944:	697b      	ldr	r3, [r7, #20]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3724      	adds	r7, #36	; 0x24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c95c:	e002      	b.n	800c964 <chk_chr+0x12>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3301      	adds	r3, #1
 800c962:	607b      	str	r3, [r7, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <chk_chr+0x26>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	461a      	mov	r2, r3
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	4293      	cmp	r3, r2
 800c976:	d1f2      	bne.n	800c95e <chk_chr+0xc>
	return *str;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	781b      	ldrb	r3, [r3, #0]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c992:	2300      	movs	r3, #0
 800c994:	60bb      	str	r3, [r7, #8]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	e029      	b.n	800c9f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c99c:	4a27      	ldr	r2, [pc, #156]	; (800ca3c <chk_lock+0xb4>)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	011b      	lsls	r3, r3, #4
 800c9a2:	4413      	add	r3, r2
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d01d      	beq.n	800c9e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9aa:	4a24      	ldr	r2, [pc, #144]	; (800ca3c <chk_lock+0xb4>)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	011b      	lsls	r3, r3, #4
 800c9b0:	4413      	add	r3, r2
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d116      	bne.n	800c9ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c9bc:	4a1f      	ldr	r2, [pc, #124]	; (800ca3c <chk_lock+0xb4>)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d10c      	bne.n	800c9ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ca3c <chk_lock+0xb4>)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	011b      	lsls	r3, r3, #4
 800c9d6:	4413      	add	r3, r2
 800c9d8:	3308      	adds	r3, #8
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d102      	bne.n	800c9ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c9e4:	e007      	b.n	800c9f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	60fb      	str	r3, [r7, #12]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d9d2      	bls.n	800c99c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d109      	bne.n	800ca10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <chk_lock+0x80>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d101      	bne.n	800ca0c <chk_lock+0x84>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e010      	b.n	800ca2e <chk_lock+0xa6>
 800ca0c:	2312      	movs	r3, #18
 800ca0e:	e00e      	b.n	800ca2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d108      	bne.n	800ca28 <chk_lock+0xa0>
 800ca16:	4a09      	ldr	r2, [pc, #36]	; (800ca3c <chk_lock+0xb4>)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	011b      	lsls	r3, r3, #4
 800ca1c:	4413      	add	r3, r2
 800ca1e:	330c      	adds	r3, #12
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca26:	d101      	bne.n	800ca2c <chk_lock+0xa4>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	e000      	b.n	800ca2e <chk_lock+0xa6>
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	2001d2d8 	.word	0x2001d2d8

0800ca40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
 800ca4a:	e002      	b.n	800ca52 <enq_lock+0x12>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d806      	bhi.n	800ca66 <enq_lock+0x26>
 800ca58:	4a09      	ldr	r2, [pc, #36]	; (800ca80 <enq_lock+0x40>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	011b      	lsls	r3, r3, #4
 800ca5e:	4413      	add	r3, r2
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1f2      	bne.n	800ca4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	bf14      	ite	ne
 800ca6c:	2301      	movne	r3, #1
 800ca6e:	2300      	moveq	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	2001d2d8 	.word	0x2001d2d8

0800ca84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	e01f      	b.n	800cad4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ca94:	4a41      	ldr	r2, [pc, #260]	; (800cb9c <inc_lock+0x118>)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	011b      	lsls	r3, r3, #4
 800ca9a:	4413      	add	r3, r2
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d113      	bne.n	800cace <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800caa6:	4a3d      	ldr	r2, [pc, #244]	; (800cb9c <inc_lock+0x118>)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	011b      	lsls	r3, r3, #4
 800caac:	4413      	add	r3, r2
 800caae:	3304      	adds	r3, #4
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d109      	bne.n	800cace <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800caba:	4a38      	ldr	r2, [pc, #224]	; (800cb9c <inc_lock+0x118>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	4413      	add	r3, r2
 800cac2:	3308      	adds	r3, #8
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800caca:	429a      	cmp	r2, r3
 800cacc:	d006      	beq.n	800cadc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d9dc      	bls.n	800ca94 <inc_lock+0x10>
 800cada:	e000      	b.n	800cade <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cadc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d132      	bne.n	800cb4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	e002      	b.n	800caf0 <inc_lock+0x6c>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d806      	bhi.n	800cb04 <inc_lock+0x80>
 800caf6:	4a29      	ldr	r2, [pc, #164]	; (800cb9c <inc_lock+0x118>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	011b      	lsls	r3, r3, #4
 800cafc:	4413      	add	r3, r2
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f2      	bne.n	800caea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d101      	bne.n	800cb0e <inc_lock+0x8a>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e040      	b.n	800cb90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	4922      	ldr	r1, [pc, #136]	; (800cb9c <inc_lock+0x118>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	011b      	lsls	r3, r3, #4
 800cb18:	440b      	add	r3, r1
 800cb1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	491e      	ldr	r1, [pc, #120]	; (800cb9c <inc_lock+0x118>)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	011b      	lsls	r3, r3, #4
 800cb26:	440b      	add	r3, r1
 800cb28:	3304      	adds	r3, #4
 800cb2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	695a      	ldr	r2, [r3, #20]
 800cb30:	491a      	ldr	r1, [pc, #104]	; (800cb9c <inc_lock+0x118>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	011b      	lsls	r3, r3, #4
 800cb36:	440b      	add	r3, r1
 800cb38:	3308      	adds	r3, #8
 800cb3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cb3c:	4a17      	ldr	r2, [pc, #92]	; (800cb9c <inc_lock+0x118>)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	4413      	add	r3, r2
 800cb44:	330c      	adds	r3, #12
 800cb46:	2200      	movs	r2, #0
 800cb48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d009      	beq.n	800cb64 <inc_lock+0xe0>
 800cb50:	4a12      	ldr	r2, [pc, #72]	; (800cb9c <inc_lock+0x118>)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	4413      	add	r3, r2
 800cb58:	330c      	adds	r3, #12
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <inc_lock+0xe0>
 800cb60:	2300      	movs	r3, #0
 800cb62:	e015      	b.n	800cb90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d108      	bne.n	800cb7c <inc_lock+0xf8>
 800cb6a:	4a0c      	ldr	r2, [pc, #48]	; (800cb9c <inc_lock+0x118>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	011b      	lsls	r3, r3, #4
 800cb70:	4413      	add	r3, r2
 800cb72:	330c      	adds	r3, #12
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	e001      	b.n	800cb80 <inc_lock+0xfc>
 800cb7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb80:	4906      	ldr	r1, [pc, #24]	; (800cb9c <inc_lock+0x118>)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	011b      	lsls	r3, r3, #4
 800cb86:	440b      	add	r3, r1
 800cb88:	330c      	adds	r3, #12
 800cb8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3301      	adds	r3, #1
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	2001d2d8 	.word	0x2001d2d8

0800cba0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	607b      	str	r3, [r7, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d825      	bhi.n	800cc00 <dec_lock+0x60>
		n = Files[i].ctr;
 800cbb4:	4a17      	ldr	r2, [pc, #92]	; (800cc14 <dec_lock+0x74>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	4413      	add	r3, r2
 800cbbc:	330c      	adds	r3, #12
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cbc2:	89fb      	ldrh	r3, [r7, #14]
 800cbc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbc8:	d101      	bne.n	800cbce <dec_lock+0x2e>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cbce:	89fb      	ldrh	r3, [r7, #14]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <dec_lock+0x3a>
 800cbd4:	89fb      	ldrh	r3, [r7, #14]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cbda:	4a0e      	ldr	r2, [pc, #56]	; (800cc14 <dec_lock+0x74>)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	4413      	add	r3, r2
 800cbe2:	330c      	adds	r3, #12
 800cbe4:	89fa      	ldrh	r2, [r7, #14]
 800cbe6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cbe8:	89fb      	ldrh	r3, [r7, #14]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <dec_lock+0x5a>
 800cbee:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <dec_lock+0x74>)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	011b      	lsls	r3, r3, #4
 800cbf4:	4413      	add	r3, r2
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	737b      	strb	r3, [r7, #13]
 800cbfe:	e001      	b.n	800cc04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cc00:	2302      	movs	r3, #2
 800cc02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cc04:	7b7b      	ldrb	r3, [r7, #13]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	2001d2d8 	.word	0x2001d2d8

0800cc18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e010      	b.n	800cc48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc26:	4a0d      	ldr	r2, [pc, #52]	; (800cc5c <clear_lock+0x44>)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	011b      	lsls	r3, r3, #4
 800cc2c:	4413      	add	r3, r2
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d105      	bne.n	800cc42 <clear_lock+0x2a>
 800cc36:	4a09      	ldr	r2, [pc, #36]	; (800cc5c <clear_lock+0x44>)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	011b      	lsls	r3, r3, #4
 800cc3c:	4413      	add	r3, r2
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3301      	adds	r3, #1
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d9eb      	bls.n	800cc26 <clear_lock+0xe>
	}
}
 800cc4e:	bf00      	nop
 800cc50:	bf00      	nop
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	2001d2d8 	.word	0x2001d2d8

0800cc60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	78db      	ldrb	r3, [r3, #3]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d034      	beq.n	800ccde <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	7858      	ldrb	r0, [r3, #1]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc84:	2301      	movs	r3, #1
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	f7ff fd40 	bl	800c70c <disk_write>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	73fb      	strb	r3, [r7, #15]
 800cc96:	e022      	b.n	800ccde <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	1ad2      	subs	r2, r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d217      	bcs.n	800ccde <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	789b      	ldrb	r3, [r3, #2]
 800ccb2:	613b      	str	r3, [r7, #16]
 800ccb4:	e010      	b.n	800ccd8 <sync_window+0x78>
					wsect += fs->fsize;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7858      	ldrb	r0, [r3, #1]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ccca:	2301      	movs	r3, #1
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	f7ff fd1d 	bl	800c70c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d8eb      	bhi.n	800ccb6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d01b      	beq.n	800cd38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff ffad 	bl	800cc60 <sync_window>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d113      	bne.n	800cd38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7858      	ldrb	r0, [r3, #1]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	f7ff fcd5 	bl	800c6cc <disk_read>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cd28:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
	...

0800cd44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ff87 	bl	800cc60 <sync_window>
 800cd52:	4603      	mov	r3, r0
 800cd54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d159      	bne.n	800ce10 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d149      	bne.n	800cdf8 <sync_fs+0xb4>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	791b      	ldrb	r3, [r3, #4]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d145      	bne.n	800cdf8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	899b      	ldrh	r3, [r3, #12]
 800cd76:	461a      	mov	r2, r3
 800cd78:	2100      	movs	r1, #0
 800cd7a:	f7ff fda8 	bl	800c8ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3338      	adds	r3, #56	; 0x38
 800cd82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fd37 	bl	800c7fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3338      	adds	r3, #56	; 0x38
 800cd94:	4921      	ldr	r1, [pc, #132]	; (800ce1c <sync_fs+0xd8>)
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fd4c 	bl	800c834 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	3338      	adds	r3, #56	; 0x38
 800cda0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cda4:	491e      	ldr	r1, [pc, #120]	; (800ce20 <sync_fs+0xdc>)
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7ff fd44 	bl	800c834 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3338      	adds	r3, #56	; 0x38
 800cdb0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f7ff fd3a 	bl	800c834 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3338      	adds	r3, #56	; 0x38
 800cdc4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	4610      	mov	r0, r2
 800cdd0:	f7ff fd30 	bl	800c834 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7858      	ldrb	r0, [r3, #1]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdec:	2301      	movs	r3, #1
 800cdee:	f7ff fc8d 	bl	800c70c <disk_write>
			fs->fsi_flag = 0;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7ff fca3 	bl	800c74c <disk_ioctl>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d001      	beq.n	800ce10 <sync_fs+0xcc>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	41615252 	.word	0x41615252
 800ce20:	61417272 	.word	0x61417272

0800ce24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	3b02      	subs	r3, #2
 800ce32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	3b02      	subs	r3, #2
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d301      	bcc.n	800ce44 <clust2sect+0x20>
 800ce40:	2300      	movs	r3, #0
 800ce42:	e008      	b.n	800ce56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	895b      	ldrh	r3, [r3, #10]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	fb03 f202 	mul.w	r2, r3, r2
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce54:	4413      	add	r3, r2
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b086      	sub	sp, #24
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d904      	bls.n	800ce82 <get_fat+0x20>
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d302      	bcc.n	800ce88 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce82:	2301      	movs	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	e0bb      	b.n	800d000 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ce88:	f04f 33ff 	mov.w	r3, #4294967295
 800ce8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	f000 8083 	beq.w	800cf9e <get_fat+0x13c>
 800ce98:	2b03      	cmp	r3, #3
 800ce9a:	f300 80a7 	bgt.w	800cfec <get_fat+0x18a>
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d002      	beq.n	800cea8 <get_fat+0x46>
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d056      	beq.n	800cf54 <get_fat+0xf2>
 800cea6:	e0a1      	b.n	800cfec <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	085b      	lsrs	r3, r3, #1
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	899b      	ldrh	r3, [r3, #12]
 800cebe:	4619      	mov	r1, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cec6:	4413      	add	r3, r2
 800cec8:	4619      	mov	r1, r3
 800ceca:	6938      	ldr	r0, [r7, #16]
 800cecc:	f7ff ff0c 	bl	800cce8 <move_window>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f040 808d 	bne.w	800cff2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	60fa      	str	r2, [r7, #12]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	8992      	ldrh	r2, [r2, #12]
 800cee2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cee6:	fb01 f202 	mul.w	r2, r1, r2
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	4413      	add	r3, r2
 800cef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cef4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	899b      	ldrh	r3, [r3, #12]
 800cefe:	4619      	mov	r1, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf06:	4413      	add	r3, r2
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6938      	ldr	r0, [r7, #16]
 800cf0c:	f7ff feec 	bl	800cce8 <move_window>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d16f      	bne.n	800cff6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf22:	fb01 f202 	mul.w	r2, r1, r2
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf30:	021b      	lsls	r3, r3, #8
 800cf32:	461a      	mov	r2, r3
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <get_fat+0xe8>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	091b      	lsrs	r3, r3, #4
 800cf48:	e002      	b.n	800cf50 <get_fat+0xee>
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf50:	617b      	str	r3, [r7, #20]
			break;
 800cf52:	e055      	b.n	800d000 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	899b      	ldrh	r3, [r3, #12]
 800cf5c:	085b      	lsrs	r3, r3, #1
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	4619      	mov	r1, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf68:	4413      	add	r3, r2
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6938      	ldr	r0, [r7, #16]
 800cf6e:	f7ff febb 	bl	800cce8 <move_window>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d140      	bne.n	800cffa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	8992      	ldrh	r2, [r2, #12]
 800cf86:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf8a:	fb00 f202 	mul.w	r2, r0, r2
 800cf8e:	1a9b      	subs	r3, r3, r2
 800cf90:	440b      	add	r3, r1
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fbf8 	bl	800c788 <ld_word>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	617b      	str	r3, [r7, #20]
			break;
 800cf9c:	e030      	b.n	800d000 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	899b      	ldrh	r3, [r3, #12]
 800cfa6:	089b      	lsrs	r3, r3, #2
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	4619      	mov	r1, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6938      	ldr	r0, [r7, #16]
 800cfb8:	f7ff fe96 	bl	800cce8 <move_window>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d11d      	bne.n	800cffe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	8992      	ldrh	r2, [r2, #12]
 800cfd0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfd4:	fb00 f202 	mul.w	r2, r0, r2
 800cfd8:	1a9b      	subs	r3, r3, r2
 800cfda:	440b      	add	r3, r1
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fbeb 	bl	800c7b8 <ld_dword>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cfe8:	617b      	str	r3, [r7, #20]
			break;
 800cfea:	e009      	b.n	800d000 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cfec:	2301      	movs	r3, #1
 800cfee:	617b      	str	r3, [r7, #20]
 800cff0:	e006      	b.n	800d000 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff2:	bf00      	nop
 800cff4:	e004      	b.n	800d000 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff6:	bf00      	nop
 800cff8:	e002      	b.n	800d000 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cffa:	bf00      	nop
 800cffc:	e000      	b.n	800d000 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cffe:	bf00      	nop
		}
	}

	return val;
 800d000:	697b      	ldr	r3, [r7, #20]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d00a:	b590      	push	{r4, r7, lr}
 800d00c:	b089      	sub	sp, #36	; 0x24
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d016:	2302      	movs	r3, #2
 800d018:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	f240 8109 	bls.w	800d234 <put_fat+0x22a>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	429a      	cmp	r2, r3
 800d02a:	f080 8103 	bcs.w	800d234 <put_fat+0x22a>
		switch (fs->fs_type) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	2b03      	cmp	r3, #3
 800d034:	f000 80b6 	beq.w	800d1a4 <put_fat+0x19a>
 800d038:	2b03      	cmp	r3, #3
 800d03a:	f300 80fb 	bgt.w	800d234 <put_fat+0x22a>
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d003      	beq.n	800d04a <put_fat+0x40>
 800d042:	2b02      	cmp	r3, #2
 800d044:	f000 8083 	beq.w	800d14e <put_fat+0x144>
 800d048:	e0f4      	b.n	800d234 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	085b      	lsrs	r3, r3, #1
 800d052:	69ba      	ldr	r2, [r7, #24]
 800d054:	4413      	add	r3, r2
 800d056:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	899b      	ldrh	r3, [r3, #12]
 800d060:	4619      	mov	r1, r3
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	fbb3 f3f1 	udiv	r3, r3, r1
 800d068:	4413      	add	r3, r2
 800d06a:	4619      	mov	r1, r3
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f7ff fe3b 	bl	800cce8 <move_window>
 800d072:	4603      	mov	r3, r0
 800d074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d076:	7ffb      	ldrb	r3, [r7, #31]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f040 80d4 	bne.w	800d226 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	61ba      	str	r2, [r7, #24]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	8992      	ldrh	r2, [r2, #12]
 800d08e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d092:	fb00 f202 	mul.w	r2, r0, r2
 800d096:	1a9b      	subs	r3, r3, r2
 800d098:	440b      	add	r3, r1
 800d09a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00d      	beq.n	800d0c2 <put_fat+0xb8>
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	b25b      	sxtb	r3, r3
 800d0ac:	f003 030f 	and.w	r3, r3, #15
 800d0b0:	b25a      	sxtb	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	011b      	lsls	r3, r3, #4
 800d0b8:	b25b      	sxtb	r3, r3
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	b25b      	sxtb	r3, r3
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	e001      	b.n	800d0c6 <put_fat+0xbc>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	899b      	ldrh	r3, [r3, #12]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0e0:	4413      	add	r3, r2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7ff fdff 	bl	800cce8 <move_window>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0ee:	7ffb      	ldrb	r3, [r7, #31]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 809a 	bne.w	800d22a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	899b      	ldrh	r3, [r3, #12]
 800d100:	461a      	mov	r2, r3
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	fbb3 f0f2 	udiv	r0, r3, r2
 800d108:	fb00 f202 	mul.w	r2, r0, r2
 800d10c:	1a9b      	subs	r3, r3, r2
 800d10e:	440b      	add	r3, r1
 800d110:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <put_fat+0x11a>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	091b      	lsrs	r3, r3, #4
 800d120:	b2db      	uxtb	r3, r3
 800d122:	e00e      	b.n	800d142 <put_fat+0x138>
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	b25b      	sxtb	r3, r3
 800d12a:	f023 030f 	bic.w	r3, r3, #15
 800d12e:	b25a      	sxtb	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	0a1b      	lsrs	r3, r3, #8
 800d134:	b25b      	sxtb	r3, r3
 800d136:	f003 030f 	and.w	r3, r3, #15
 800d13a:	b25b      	sxtb	r3, r3
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	b2db      	uxtb	r3, r3
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2201      	movs	r2, #1
 800d14a:	70da      	strb	r2, [r3, #3]
			break;
 800d14c:	e072      	b.n	800d234 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	899b      	ldrh	r3, [r3, #12]
 800d156:	085b      	lsrs	r3, r3, #1
 800d158:	b29b      	uxth	r3, r3
 800d15a:	4619      	mov	r1, r3
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d162:	4413      	add	r3, r2
 800d164:	4619      	mov	r1, r3
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff fdbe 	bl	800cce8 <move_window>
 800d16c:	4603      	mov	r3, r0
 800d16e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d170:	7ffb      	ldrb	r3, [r7, #31]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d15b      	bne.n	800d22e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	8992      	ldrh	r2, [r2, #12]
 800d184:	fbb3 f0f2 	udiv	r0, r3, r2
 800d188:	fb00 f202 	mul.w	r2, r0, r2
 800d18c:	1a9b      	subs	r3, r3, r2
 800d18e:	440b      	add	r3, r1
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	b292      	uxth	r2, r2
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fb31 	bl	800c7fe <st_word>
			fs->wflag = 1;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	70da      	strb	r2, [r3, #3]
			break;
 800d1a2:	e047      	b.n	800d234 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	899b      	ldrh	r3, [r3, #12]
 800d1ac:	089b      	lsrs	r3, r3, #2
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff fd93 	bl	800cce8 <move_window>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c6:	7ffb      	ldrb	r3, [r7, #31]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d132      	bne.n	800d232 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	8992      	ldrh	r2, [r2, #12]
 800d1e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1e4:	fb00 f202 	mul.w	r2, r0, r2
 800d1e8:	1a9b      	subs	r3, r3, r2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff fae3 	bl	800c7b8 <ld_dword>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d1f8:	4323      	orrs	r3, r4
 800d1fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	8992      	ldrh	r2, [r2, #12]
 800d20a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d20e:	fb00 f202 	mul.w	r2, r0, r2
 800d212:	1a9b      	subs	r3, r3, r2
 800d214:	440b      	add	r3, r1
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fb0b 	bl	800c834 <st_dword>
			fs->wflag = 1;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2201      	movs	r2, #1
 800d222:	70da      	strb	r2, [r3, #3]
			break;
 800d224:	e006      	b.n	800d234 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d226:	bf00      	nop
 800d228:	e004      	b.n	800d234 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d22a:	bf00      	nop
 800d22c:	e002      	b.n	800d234 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d22e:	bf00      	nop
 800d230:	e000      	b.n	800d234 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d232:	bf00      	nop
		}
	}
	return res;
 800d234:	7ffb      	ldrb	r3, [r7, #31]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3724      	adds	r7, #36	; 0x24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd90      	pop	{r4, r7, pc}

0800d23e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b088      	sub	sp, #32
 800d242:	af00      	add	r7, sp, #0
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d904      	bls.n	800d264 <remove_chain+0x26>
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	69db      	ldr	r3, [r3, #28]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	429a      	cmp	r2, r3
 800d262:	d301      	bcc.n	800d268 <remove_chain+0x2a>
 800d264:	2302      	movs	r3, #2
 800d266:	e04b      	b.n	800d300 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00c      	beq.n	800d288 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d26e:	f04f 32ff 	mov.w	r2, #4294967295
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	69b8      	ldr	r0, [r7, #24]
 800d276:	f7ff fec8 	bl	800d00a <put_fat>
 800d27a:	4603      	mov	r3, r0
 800d27c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d27e:	7ffb      	ldrb	r3, [r7, #31]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <remove_chain+0x4a>
 800d284:	7ffb      	ldrb	r3, [r7, #31]
 800d286:	e03b      	b.n	800d300 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d288:	68b9      	ldr	r1, [r7, #8]
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f7ff fde9 	bl	800ce62 <get_fat>
 800d290:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d031      	beq.n	800d2fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d101      	bne.n	800d2a2 <remove_chain+0x64>
 800d29e:	2302      	movs	r3, #2
 800d2a0:	e02e      	b.n	800d300 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a8:	d101      	bne.n	800d2ae <remove_chain+0x70>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e028      	b.n	800d300 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	69b8      	ldr	r0, [r7, #24]
 800d2b4:	f7ff fea9 	bl	800d00a <put_fat>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2bc:	7ffb      	ldrb	r3, [r7, #31]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <remove_chain+0x88>
 800d2c2:	7ffb      	ldrb	r3, [r7, #31]
 800d2c4:	e01c      	b.n	800d300 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	699a      	ldr	r2, [r3, #24]
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	3b02      	subs	r3, #2
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d20b      	bcs.n	800d2ec <remove_chain+0xae>
			fs->free_clst++;
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	1c5a      	adds	r2, r3, #1
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	791b      	ldrb	r3, [r3, #4]
 800d2e2:	f043 0301 	orr.w	r3, r3, #1
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d3c6      	bcc.n	800d288 <remove_chain+0x4a>
 800d2fa:	e000      	b.n	800d2fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d2fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10d      	bne.n	800d33a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <create_chain+0x2c>
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	69db      	ldr	r3, [r3, #28]
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	429a      	cmp	r2, r3
 800d332:	d31b      	bcc.n	800d36c <create_chain+0x64>
 800d334:	2301      	movs	r3, #1
 800d336:	61bb      	str	r3, [r7, #24]
 800d338:	e018      	b.n	800d36c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d33a:	6839      	ldr	r1, [r7, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fd90 	bl	800ce62 <get_fat>
 800d342:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d801      	bhi.n	800d34e <create_chain+0x46>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e070      	b.n	800d430 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d354:	d101      	bne.n	800d35a <create_chain+0x52>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	e06a      	b.n	800d430 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	429a      	cmp	r2, r3
 800d362:	d201      	bcs.n	800d368 <create_chain+0x60>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	e063      	b.n	800d430 <create_chain+0x128>
		scl = clst;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	3301      	adds	r3, #1
 800d374:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d307      	bcc.n	800d390 <create_chain+0x88>
				ncl = 2;
 800d380:	2302      	movs	r3, #2
 800d382:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d901      	bls.n	800d390 <create_chain+0x88>
 800d38c:	2300      	movs	r3, #0
 800d38e:	e04f      	b.n	800d430 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d390:	69f9      	ldr	r1, [r7, #28]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff fd65 	bl	800ce62 <get_fat>
 800d398:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00e      	beq.n	800d3be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d003      	beq.n	800d3ae <create_chain+0xa6>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ac:	d101      	bne.n	800d3b2 <create_chain+0xaa>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	e03e      	b.n	800d430 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d1da      	bne.n	800d370 <create_chain+0x68>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e038      	b.n	800d430 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d3be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c4:	69f9      	ldr	r1, [r7, #28]
 800d3c6:	6938      	ldr	r0, [r7, #16]
 800d3c8:	f7ff fe1f 	bl	800d00a <put_fat>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d109      	bne.n	800d3ea <create_chain+0xe2>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d006      	beq.n	800d3ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d3dc:	69fa      	ldr	r2, [r7, #28]
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6938      	ldr	r0, [r7, #16]
 800d3e2:	f7ff fe12 	bl	800d00a <put_fat>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d3ea:	7dfb      	ldrb	r3, [r7, #23]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d116      	bne.n	800d41e <create_chain+0x116>
		fs->last_clst = ncl;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	699a      	ldr	r2, [r3, #24]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	3b02      	subs	r3, #2
 800d400:	429a      	cmp	r2, r3
 800d402:	d804      	bhi.n	800d40e <create_chain+0x106>
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	1e5a      	subs	r2, r3, #1
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	791b      	ldrb	r3, [r3, #4]
 800d412:	f043 0301 	orr.w	r3, r3, #1
 800d416:	b2da      	uxtb	r2, r3
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	711a      	strb	r2, [r3, #4]
 800d41c:	e007      	b.n	800d42e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d102      	bne.n	800d42a <create_chain+0x122>
 800d424:	f04f 33ff 	mov.w	r3, #4294967295
 800d428:	e000      	b.n	800d42c <create_chain+0x124>
 800d42a:	2301      	movs	r3, #1
 800d42c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d42e:	69fb      	ldr	r3, [r7, #28]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3720      	adds	r7, #32
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	3304      	adds	r3, #4
 800d44e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	899b      	ldrh	r3, [r3, #12]
 800d454:	461a      	mov	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	fbb3 f3f2 	udiv	r3, r3, r2
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	8952      	ldrh	r2, [r2, #10]
 800d460:	fbb3 f3f2 	udiv	r3, r3, r2
 800d464:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	1d1a      	adds	r2, r3, #4
 800d46a:	613a      	str	r2, [r7, #16]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <clmt_clust+0x42>
 800d476:	2300      	movs	r3, #0
 800d478:	e010      	b.n	800d49c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d307      	bcc.n	800d492 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	3304      	adds	r3, #4
 800d48e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d490:	e7e9      	b.n	800d466 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d492:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	4413      	add	r3, r2
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	371c      	adds	r7, #28
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4be:	d204      	bcs.n	800d4ca <dir_sdi+0x22>
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	f003 031f 	and.w	r3, r3, #31
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <dir_sdi+0x26>
		return FR_INT_ERR;
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	e071      	b.n	800d5b2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <dir_sdi+0x46>
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d902      	bls.n	800d4ee <dir_sdi+0x46>
		clst = fs->dirbase;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10c      	bne.n	800d50e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	095b      	lsrs	r3, r3, #5
 800d4f8:	693a      	ldr	r2, [r7, #16]
 800d4fa:	8912      	ldrh	r2, [r2, #8]
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d301      	bcc.n	800d504 <dir_sdi+0x5c>
 800d500:	2302      	movs	r3, #2
 800d502:	e056      	b.n	800d5b2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	61da      	str	r2, [r3, #28]
 800d50c:	e02d      	b.n	800d56a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	895b      	ldrh	r3, [r3, #10]
 800d512:	461a      	mov	r2, r3
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	899b      	ldrh	r3, [r3, #12]
 800d518:	fb02 f303 	mul.w	r3, r2, r3
 800d51c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d51e:	e019      	b.n	800d554 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6979      	ldr	r1, [r7, #20]
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff fc9c 	bl	800ce62 <get_fat>
 800d52a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d101      	bne.n	800d538 <dir_sdi+0x90>
 800d534:	2301      	movs	r3, #1
 800d536:	e03c      	b.n	800d5b2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d904      	bls.n	800d548 <dir_sdi+0xa0>
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	429a      	cmp	r2, r3
 800d546:	d301      	bcc.n	800d54c <dir_sdi+0xa4>
 800d548:	2302      	movs	r3, #2
 800d54a:	e032      	b.n	800d5b2 <dir_sdi+0x10a>
			ofs -= csz;
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d2e1      	bcs.n	800d520 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d55c:	6979      	ldr	r1, [r7, #20]
 800d55e:	6938      	ldr	r0, [r7, #16]
 800d560:	f7ff fc60 	bl	800ce24 <clust2sect>
 800d564:	4602      	mov	r2, r0
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <dir_sdi+0xd4>
 800d578:	2302      	movs	r3, #2
 800d57a:	e01a      	b.n	800d5b2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	69da      	ldr	r2, [r3, #28]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	899b      	ldrh	r3, [r3, #12]
 800d584:	4619      	mov	r1, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	fbb3 f3f1 	udiv	r3, r3, r1
 800d58c:	441a      	add	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	899b      	ldrh	r3, [r3, #12]
 800d59c:	461a      	mov	r2, r3
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5a4:	fb00 f202 	mul.w	r2, r0, r2
 800d5a8:	1a9b      	subs	r3, r3, r2
 800d5aa:	18ca      	adds	r2, r1, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b086      	sub	sp, #24
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	3320      	adds	r3, #32
 800d5d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d003      	beq.n	800d5e2 <dir_next+0x28>
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5e0:	d301      	bcc.n	800d5e6 <dir_next+0x2c>
 800d5e2:	2304      	movs	r3, #4
 800d5e4:	e0bb      	b.n	800d75e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	899b      	ldrh	r3, [r3, #12]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5f2:	fb01 f202 	mul.w	r2, r1, r2
 800d5f6:	1a9b      	subs	r3, r3, r2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f040 809d 	bne.w	800d738 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10b      	bne.n	800d628 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	095b      	lsrs	r3, r3, #5
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	8912      	ldrh	r2, [r2, #8]
 800d618:	4293      	cmp	r3, r2
 800d61a:	f0c0 808d 	bcc.w	800d738 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	61da      	str	r2, [r3, #28]
 800d624:	2304      	movs	r3, #4
 800d626:	e09a      	b.n	800d75e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	899b      	ldrh	r3, [r3, #12]
 800d62c:	461a      	mov	r2, r3
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	fbb3 f3f2 	udiv	r3, r3, r2
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	8952      	ldrh	r2, [r2, #10]
 800d638:	3a01      	subs	r2, #1
 800d63a:	4013      	ands	r3, r2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d17b      	bne.n	800d738 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7ff fc0a 	bl	800ce62 <get_fat>
 800d64e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d801      	bhi.n	800d65a <dir_next+0xa0>
 800d656:	2302      	movs	r3, #2
 800d658:	e081      	b.n	800d75e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d101      	bne.n	800d666 <dir_next+0xac>
 800d662:	2301      	movs	r3, #1
 800d664:	e07b      	b.n	800d75e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d359      	bcc.n	800d724 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d104      	bne.n	800d680 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	61da      	str	r2, [r3, #28]
 800d67c:	2304      	movs	r3, #4
 800d67e:	e06e      	b.n	800d75e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	4619      	mov	r1, r3
 800d688:	4610      	mov	r0, r2
 800d68a:	f7ff fe3d 	bl	800d308 <create_chain>
 800d68e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <dir_next+0xe0>
 800d696:	2307      	movs	r3, #7
 800d698:	e061      	b.n	800d75e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d101      	bne.n	800d6a4 <dir_next+0xea>
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	e05c      	b.n	800d75e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6aa:	d101      	bne.n	800d6b0 <dir_next+0xf6>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e056      	b.n	800d75e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f7ff fad5 	bl	800cc60 <sync_window>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <dir_next+0x106>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e04e      	b.n	800d75e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	899b      	ldrh	r3, [r3, #12]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f7ff f8fe 	bl	800c8ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	6979      	ldr	r1, [r7, #20]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff fba3 	bl	800ce24 <clust2sect>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	635a      	str	r2, [r3, #52]	; 0x34
 800d6e4:	e012      	b.n	800d70c <dir_next+0x152>
						fs->wflag = 1;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff fab7 	bl	800cc60 <sync_window>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <dir_next+0x142>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e030      	b.n	800d75e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	3301      	adds	r3, #1
 800d700:	613b      	str	r3, [r7, #16]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	635a      	str	r2, [r3, #52]	; 0x34
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	895b      	ldrh	r3, [r3, #10]
 800d710:	461a      	mov	r2, r3
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	4293      	cmp	r3, r2
 800d716:	d3e6      	bcc.n	800d6e6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d72a:	6979      	ldr	r1, [r7, #20]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7ff fb79 	bl	800ce24 <clust2sect>
 800d732:	4602      	mov	r2, r0
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	899b      	ldrh	r3, [r3, #12]
 800d748:	461a      	mov	r2, r3
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d750:	fb00 f202 	mul.w	r2, r0, r2
 800d754:	1a9b      	subs	r3, r3, r2
 800d756:	18ca      	adds	r2, r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b086      	sub	sp, #24
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d776:	2100      	movs	r1, #0
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff fe95 	bl	800d4a8 <dir_sdi>
 800d77e:	4603      	mov	r3, r0
 800d780:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d12b      	bne.n	800d7e0 <dir_alloc+0x7a>
		n = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	69db      	ldr	r3, [r3, #28]
 800d790:	4619      	mov	r1, r3
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff faa8 	bl	800cce8 <move_window>
 800d798:	4603      	mov	r3, r0
 800d79a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11d      	bne.n	800d7de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2be5      	cmp	r3, #229	; 0xe5
 800d7aa:	d004      	beq.n	800d7b6 <dir_alloc+0x50>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d107      	bne.n	800d7c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	613b      	str	r3, [r7, #16]
 800d7bc:	693a      	ldr	r2, [r7, #16]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d102      	bne.n	800d7ca <dir_alloc+0x64>
 800d7c4:	e00c      	b.n	800d7e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fef4 	bl	800d5ba <dir_next>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d0d7      	beq.n	800d78c <dir_alloc+0x26>
 800d7dc:	e000      	b.n	800d7e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d7de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d7e0:	7dfb      	ldrb	r3, [r7, #23]
 800d7e2:	2b04      	cmp	r3, #4
 800d7e4:	d101      	bne.n	800d7ea <dir_alloc+0x84>
 800d7e6:	2307      	movs	r3, #7
 800d7e8:	75fb      	strb	r3, [r7, #23]
	return res;
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	331a      	adds	r3, #26
 800d802:	4618      	mov	r0, r3
 800d804:	f7fe ffc0 	bl	800c788 <ld_word>
 800d808:	4603      	mov	r3, r0
 800d80a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b03      	cmp	r3, #3
 800d812:	d109      	bne.n	800d828 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	3314      	adds	r3, #20
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fe ffb5 	bl	800c788 <ld_word>
 800d81e:	4603      	mov	r3, r0
 800d820:	041b      	lsls	r3, r3, #16
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	4313      	orrs	r3, r2
 800d826:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d828:	68fb      	ldr	r3, [r7, #12]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	331a      	adds	r3, #26
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	b292      	uxth	r2, r2
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe ffd8 	bl	800c7fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b03      	cmp	r3, #3
 800d854:	d109      	bne.n	800d86a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	f103 0214 	add.w	r2, r3, #20
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	0c1b      	lsrs	r3, r3, #16
 800d860:	b29b      	uxth	r3, r3
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7fe ffca 	bl	800c7fe <st_word>
	}
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d874:	b590      	push	{r4, r7, lr}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	331a      	adds	r3, #26
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe ff80 	bl	800c788 <ld_word>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <cmp_lfn+0x1e>
 800d88e:	2300      	movs	r3, #0
 800d890:	e059      	b.n	800d946 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d89a:	1e5a      	subs	r2, r3, #1
 800d89c:	4613      	mov	r3, r2
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4413      	add	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	81fb      	strh	r3, [r7, #14]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	613b      	str	r3, [r7, #16]
 800d8b0:	e033      	b.n	800d91a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d8b2:	4a27      	ldr	r2, [pc, #156]	; (800d950 <cmp_lfn+0xdc>)
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	4413      	add	r3, r2
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fe ff61 	bl	800c788 <ld_word>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d8ca:	89fb      	ldrh	r3, [r7, #14]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01a      	beq.n	800d906 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2bfe      	cmp	r3, #254	; 0xfe
 800d8d4:	d812      	bhi.n	800d8fc <cmp_lfn+0x88>
 800d8d6:	89bb      	ldrh	r3, [r7, #12]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f001 ff99 	bl	800f810 <ff_wtoupper>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461c      	mov	r4, r3
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	1c5a      	adds	r2, r3, #1
 800d8e6:	617a      	str	r2, [r7, #20]
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f001 ff8d 	bl	800f810 <ff_wtoupper>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	429c      	cmp	r4, r3
 800d8fa:	d001      	beq.n	800d900 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e022      	b.n	800d946 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d900:	89bb      	ldrh	r3, [r7, #12]
 800d902:	81fb      	strh	r3, [r7, #14]
 800d904:	e006      	b.n	800d914 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d906:	89bb      	ldrh	r3, [r7, #12]
 800d908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d001      	beq.n	800d914 <cmp_lfn+0xa0>
 800d910:	2300      	movs	r3, #0
 800d912:	e018      	b.n	800d946 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	3301      	adds	r3, #1
 800d918:	613b      	str	r3, [r7, #16]
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b0c      	cmp	r3, #12
 800d91e:	d9c8      	bls.n	800d8b2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00b      	beq.n	800d944 <cmp_lfn+0xd0>
 800d92c:	89fb      	ldrh	r3, [r7, #14]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <cmp_lfn+0xd0>
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	4413      	add	r3, r2
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <cmp_lfn+0xd0>
 800d940:	2300      	movs	r3, #0
 800d942:	e000      	b.n	800d946 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d944:	2301      	movs	r3, #1
}
 800d946:	4618      	mov	r0, r3
 800d948:	371c      	adds	r7, #28
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd90      	pop	{r4, r7, pc}
 800d94e:	bf00      	nop
 800d950:	080141ec 	.word	0x080141ec

0800d954 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4611      	mov	r1, r2
 800d960:	461a      	mov	r2, r3
 800d962:	460b      	mov	r3, r1
 800d964:	71fb      	strb	r3, [r7, #7]
 800d966:	4613      	mov	r3, r2
 800d968:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	330d      	adds	r3, #13
 800d96e:	79ba      	ldrb	r2, [r7, #6]
 800d970:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	330b      	adds	r3, #11
 800d976:	220f      	movs	r2, #15
 800d978:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	330c      	adds	r3, #12
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	331a      	adds	r3, #26
 800d986:	2100      	movs	r1, #0
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fe ff38 	bl	800c7fe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	1e5a      	subs	r2, r3, #1
 800d992:	4613      	mov	r3, r2
 800d994:	005b      	lsls	r3, r3, #1
 800d996:	4413      	add	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	82fb      	strh	r3, [r7, #22]
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d9a6:	8afb      	ldrh	r3, [r7, #22]
 800d9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d007      	beq.n	800d9c0 <put_lfn+0x6c>
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	61fa      	str	r2, [r7, #28]
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d9c0:	4a17      	ldr	r2, [pc, #92]	; (800da20 <put_lfn+0xcc>)
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	8afa      	ldrh	r2, [r7, #22]
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe ff13 	bl	800c7fe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d9d8:	8afb      	ldrh	r3, [r7, #22]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <put_lfn+0x90>
 800d9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9e2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	61bb      	str	r3, [r7, #24]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2b0c      	cmp	r3, #12
 800d9ee:	d9da      	bls.n	800d9a6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d9f0:	8afb      	ldrh	r3, [r7, #22]
 800d9f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d006      	beq.n	800da08 <put_lfn+0xb4>
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	4413      	add	r3, r2
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <put_lfn+0xbc>
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	79fa      	ldrb	r2, [r7, #7]
 800da14:	701a      	strb	r2, [r3, #0]
}
 800da16:	bf00      	nop
 800da18:	3720      	adds	r7, #32
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	080141ec 	.word	0x080141ec

0800da24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08c      	sub	sp, #48	; 0x30
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800da32:	220b      	movs	r2, #11
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f7fe ff28 	bl	800c88c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b05      	cmp	r3, #5
 800da40:	d929      	bls.n	800da96 <gen_numname+0x72>
		sr = seq;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800da46:	e020      	b.n	800da8a <gen_numname+0x66>
			wc = *lfn++;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	1c9a      	adds	r2, r3, #2
 800da4c:	607a      	str	r2, [r7, #4]
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800da52:	2300      	movs	r3, #0
 800da54:	62bb      	str	r3, [r7, #40]	; 0x28
 800da56:	e015      	b.n	800da84 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	005a      	lsls	r2, r3, #1
 800da5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800da66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da68:	085b      	lsrs	r3, r3, #1
 800da6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <gen_numname+0x5a>
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	4b30      	ldr	r3, [pc, #192]	; (800db3c <gen_numname+0x118>)
 800da7a:	4053      	eors	r3, r2
 800da7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800da7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da80:	3301      	adds	r3, #1
 800da82:	62bb      	str	r3, [r7, #40]	; 0x28
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	2b0f      	cmp	r3, #15
 800da88:	d9e6      	bls.n	800da58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1da      	bne.n	800da48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800da96:	2307      	movs	r3, #7
 800da98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 030f 	and.w	r3, r3, #15
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	3330      	adds	r3, #48	; 0x30
 800daa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800daaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daae:	2b39      	cmp	r3, #57	; 0x39
 800dab0:	d904      	bls.n	800dabc <gen_numname+0x98>
 800dab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dab6:	3307      	adds	r3, #7
 800dab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	1e5a      	subs	r2, r3, #1
 800dac0:	62ba      	str	r2, [r7, #40]	; 0x28
 800dac2:	3330      	adds	r3, #48	; 0x30
 800dac4:	443b      	add	r3, r7
 800dac6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800daca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	091b      	lsrs	r3, r3, #4
 800dad2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1df      	bne.n	800da9a <gen_numname+0x76>
	ns[i] = '~';
 800dada:	f107 0214 	add.w	r2, r7, #20
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	4413      	add	r3, r2
 800dae2:	227e      	movs	r2, #126	; 0x7e
 800dae4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dae6:	2300      	movs	r3, #0
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
 800daea:	e002      	b.n	800daf2 <gen_numname+0xce>
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	3301      	adds	r3, #1
 800daf0:	627b      	str	r3, [r7, #36]	; 0x24
 800daf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d205      	bcs.n	800db06 <gen_numname+0xe2>
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	4413      	add	r3, r2
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b20      	cmp	r3, #32
 800db04:	d1f2      	bne.n	800daec <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	2b07      	cmp	r3, #7
 800db0a:	d807      	bhi.n	800db1c <gen_numname+0xf8>
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	62ba      	str	r2, [r7, #40]	; 0x28
 800db12:	3330      	adds	r3, #48	; 0x30
 800db14:	443b      	add	r3, r7
 800db16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800db1a:	e000      	b.n	800db1e <gen_numname+0xfa>
 800db1c:	2120      	movs	r1, #32
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	1c5a      	adds	r2, r3, #1
 800db22:	627a      	str	r2, [r7, #36]	; 0x24
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	4413      	add	r3, r2
 800db28:	460a      	mov	r2, r1
 800db2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	2b07      	cmp	r3, #7
 800db30:	d9e9      	bls.n	800db06 <gen_numname+0xe2>
}
 800db32:	bf00      	nop
 800db34:	bf00      	nop
 800db36:	3730      	adds	r7, #48	; 0x30
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	00011021 	.word	0x00011021

0800db40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800db4c:	230b      	movs	r3, #11
 800db4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800db50:	7bfb      	ldrb	r3, [r7, #15]
 800db52:	b2da      	uxtb	r2, r3
 800db54:	0852      	lsrs	r2, r2, #1
 800db56:	01db      	lsls	r3, r3, #7
 800db58:	4313      	orrs	r3, r2
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	1c59      	adds	r1, r3, #1
 800db60:	6079      	str	r1, [r7, #4]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3b01      	subs	r3, #1
 800db6c:	60bb      	str	r3, [r7, #8]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1ed      	bne.n	800db50 <sum_sfn+0x10>
	return sum;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b086      	sub	sp, #24
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db90:	2100      	movs	r1, #0
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fc88 	bl	800d4a8 <dir_sdi>
 800db98:	4603      	mov	r3, r0
 800db9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db9c:	7dfb      	ldrb	r3, [r7, #23]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <dir_find+0x24>
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	e0a9      	b.n	800dcfa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dba6:	23ff      	movs	r3, #255	; 0xff
 800dba8:	753b      	strb	r3, [r7, #20]
 800dbaa:	7d3b      	ldrb	r3, [r7, #20]
 800dbac:	757b      	strb	r3, [r7, #21]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6938      	ldr	r0, [r7, #16]
 800dbbe:	f7ff f893 	bl	800cce8 <move_window>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f040 8090 	bne.w	800dcee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dbd6:	7dbb      	ldrb	r3, [r7, #22]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <dir_find+0x60>
 800dbdc:	2304      	movs	r3, #4
 800dbde:	75fb      	strb	r3, [r7, #23]
 800dbe0:	e08a      	b.n	800dcf8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	330b      	adds	r3, #11
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbee:	73fb      	strb	r3, [r7, #15]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7bfa      	ldrb	r2, [r7, #15]
 800dbf4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dbf6:	7dbb      	ldrb	r3, [r7, #22]
 800dbf8:	2be5      	cmp	r3, #229	; 0xe5
 800dbfa:	d007      	beq.n	800dc0c <dir_find+0x8a>
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	f003 0308 	and.w	r3, r3, #8
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d009      	beq.n	800dc1a <dir_find+0x98>
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
 800dc08:	2b0f      	cmp	r3, #15
 800dc0a:	d006      	beq.n	800dc1a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dc0c:	23ff      	movs	r3, #255	; 0xff
 800dc0e:	757b      	strb	r3, [r7, #21]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f04f 32ff 	mov.w	r2, #4294967295
 800dc16:	631a      	str	r2, [r3, #48]	; 0x30
 800dc18:	e05e      	b.n	800dcd8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	2b0f      	cmp	r3, #15
 800dc1e:	d136      	bne.n	800dc8e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d154      	bne.n	800dcd8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dc2e:	7dbb      	ldrb	r3, [r7, #22]
 800dc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00d      	beq.n	800dc54 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a1b      	ldr	r3, [r3, #32]
 800dc3c:	7b5b      	ldrb	r3, [r3, #13]
 800dc3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dc40:	7dbb      	ldrb	r3, [r7, #22]
 800dc42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc46:	75bb      	strb	r3, [r7, #22]
 800dc48:	7dbb      	ldrb	r3, [r7, #22]
 800dc4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	695a      	ldr	r2, [r3, #20]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dc54:	7dba      	ldrb	r2, [r7, #22]
 800dc56:	7d7b      	ldrb	r3, [r7, #21]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d115      	bne.n	800dc88 <dir_find+0x106>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	330d      	adds	r3, #13
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	7d3a      	ldrb	r2, [r7, #20]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d10e      	bne.n	800dc88 <dir_find+0x106>
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	691a      	ldr	r2, [r3, #16]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a1b      	ldr	r3, [r3, #32]
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f7ff fdfd 	bl	800d874 <cmp_lfn>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <dir_find+0x106>
 800dc80:	7d7b      	ldrb	r3, [r7, #21]
 800dc82:	3b01      	subs	r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	e000      	b.n	800dc8a <dir_find+0x108>
 800dc88:	23ff      	movs	r3, #255	; 0xff
 800dc8a:	757b      	strb	r3, [r7, #21]
 800dc8c:	e024      	b.n	800dcd8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc8e:	7d7b      	ldrb	r3, [r7, #21]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d109      	bne.n	800dca8 <dir_find+0x126>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff ff51 	bl	800db40 <sum_sfn>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	461a      	mov	r2, r3
 800dca2:	7d3b      	ldrb	r3, [r7, #20]
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d024      	beq.n	800dcf2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10a      	bne.n	800dccc <dir_find+0x14a>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a18      	ldr	r0, [r3, #32]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3324      	adds	r3, #36	; 0x24
 800dcbe:	220b      	movs	r2, #11
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7fe fe1f 	bl	800c904 <mem_cmp>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d014      	beq.n	800dcf6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dccc:	23ff      	movs	r3, #255	; 0xff
 800dcce:	757b      	strb	r3, [r7, #21]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dcd8:	2100      	movs	r1, #0
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff fc6d 	bl	800d5ba <dir_next>
 800dce0:	4603      	mov	r3, r0
 800dce2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dce4:	7dfb      	ldrb	r3, [r7, #23]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f43f af65 	beq.w	800dbb6 <dir_find+0x34>
 800dcec:	e004      	b.n	800dcf8 <dir_find+0x176>
		if (res != FR_OK) break;
 800dcee:	bf00      	nop
 800dcf0:	e002      	b.n	800dcf8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dcf2:	bf00      	nop
 800dcf4:	e000      	b.n	800dcf8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dcf6:	bf00      	nop

	return res;
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b08c      	sub	sp, #48	; 0x30
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <dir_register+0x20>
 800dd20:	2306      	movs	r3, #6
 800dd22:	e0e0      	b.n	800dee6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dd24:	2300      	movs	r3, #0
 800dd26:	627b      	str	r3, [r7, #36]	; 0x24
 800dd28:	e002      	b.n	800dd30 <dir_register+0x2c>
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	691a      	ldr	r2, [r3, #16]
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f4      	bne.n	800dd2a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dd46:	f107 030c 	add.w	r3, r7, #12
 800dd4a:	220c      	movs	r2, #12
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fd9d 	bl	800c88c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dd52:	7dfb      	ldrb	r3, [r7, #23]
 800dd54:	f003 0301 	and.w	r3, r3, #1
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d032      	beq.n	800ddc2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2240      	movs	r2, #64	; 0x40
 800dd60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dd64:	2301      	movs	r3, #1
 800dd66:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd68:	e016      	b.n	800dd98 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	691a      	ldr	r2, [r3, #16]
 800dd74:	f107 010c 	add.w	r1, r7, #12
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	f7ff fe53 	bl	800da24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff feff 	bl	800db82 <dir_find>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dd8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	3301      	adds	r3, #1
 800dd96:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	2b63      	cmp	r3, #99	; 0x63
 800dd9c:	d9e5      	bls.n	800dd6a <dir_register+0x66>
 800dd9e:	e000      	b.n	800dda2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dda0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	2b64      	cmp	r3, #100	; 0x64
 800dda6:	d101      	bne.n	800ddac <dir_register+0xa8>
 800dda8:	2307      	movs	r3, #7
 800ddaa:	e09c      	b.n	800dee6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ddac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddb0:	2b04      	cmp	r3, #4
 800ddb2:	d002      	beq.n	800ddba <dir_register+0xb6>
 800ddb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddb8:	e095      	b.n	800dee6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ddba:	7dfa      	ldrb	r2, [r7, #23]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	f003 0302 	and.w	r3, r3, #2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d007      	beq.n	800dddc <dir_register+0xd8>
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	330c      	adds	r3, #12
 800ddd0:	4a47      	ldr	r2, [pc, #284]	; (800def0 <dir_register+0x1ec>)
 800ddd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddd6:	089b      	lsrs	r3, r3, #2
 800ddd8:	3301      	adds	r3, #1
 800ddda:	e000      	b.n	800ddde <dir_register+0xda>
 800dddc:	2301      	movs	r3, #1
 800ddde:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dde0:	6a39      	ldr	r1, [r7, #32]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fcbf 	bl	800d766 <dir_alloc>
 800dde8:	4603      	mov	r3, r0
 800ddea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ddee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d148      	bne.n	800de88 <dir_register+0x184>
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	623b      	str	r3, [r7, #32]
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d042      	beq.n	800de88 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	695a      	ldr	r2, [r3, #20]
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	015b      	lsls	r3, r3, #5
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	4619      	mov	r1, r3
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff fb4a 	bl	800d4a8 <dir_sdi>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800de1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d132      	bne.n	800de88 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	3324      	adds	r3, #36	; 0x24
 800de26:	4618      	mov	r0, r3
 800de28:	f7ff fe8a 	bl	800db40 <sum_sfn>
 800de2c:	4603      	mov	r3, r0
 800de2e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	69db      	ldr	r3, [r3, #28]
 800de34:	4619      	mov	r1, r3
 800de36:	69f8      	ldr	r0, [r7, #28]
 800de38:	f7fe ff56 	bl	800cce8 <move_window>
 800de3c:	4603      	mov	r3, r0
 800de3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800de42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de46:	2b00      	cmp	r3, #0
 800de48:	d11d      	bne.n	800de86 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	6918      	ldr	r0, [r3, #16]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a19      	ldr	r1, [r3, #32]
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	b2da      	uxtb	r2, r3
 800de56:	7efb      	ldrb	r3, [r7, #27]
 800de58:	f7ff fd7c 	bl	800d954 <put_lfn>
				fs->wflag = 1;
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	2201      	movs	r2, #1
 800de60:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800de62:	2100      	movs	r1, #0
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff fba8 	bl	800d5ba <dir_next>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800de70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de74:	2b00      	cmp	r3, #0
 800de76:	d107      	bne.n	800de88 <dir_register+0x184>
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	623b      	str	r3, [r7, #32]
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1d5      	bne.n	800de30 <dir_register+0x12c>
 800de84:	e000      	b.n	800de88 <dir_register+0x184>
				if (res != FR_OK) break;
 800de86:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800de88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d128      	bne.n	800dee2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	69db      	ldr	r3, [r3, #28]
 800de94:	4619      	mov	r1, r3
 800de96:	69f8      	ldr	r0, [r7, #28]
 800de98:	f7fe ff26 	bl	800cce8 <move_window>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d11b      	bne.n	800dee2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	2220      	movs	r2, #32
 800deb0:	2100      	movs	r1, #0
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fd0b 	bl	800c8ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a18      	ldr	r0, [r3, #32]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	3324      	adds	r3, #36	; 0x24
 800dec0:	220b      	movs	r2, #11
 800dec2:	4619      	mov	r1, r3
 800dec4:	f7fe fce2 	bl	800c88c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a1b      	ldr	r3, [r3, #32]
 800ded2:	330c      	adds	r3, #12
 800ded4:	f002 0218 	and.w	r2, r2, #24
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2201      	movs	r2, #1
 800dee0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3730      	adds	r7, #48	; 0x30
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	4ec4ec4f 	.word	0x4ec4ec4f

0800def4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08a      	sub	sp, #40	; 0x28
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	613b      	str	r3, [r7, #16]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	2300      	movs	r3, #0
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	61ba      	str	r2, [r7, #24]
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	4413      	add	r3, r2
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800df22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df24:	2b1f      	cmp	r3, #31
 800df26:	d940      	bls.n	800dfaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800df28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2a:	2b2f      	cmp	r3, #47	; 0x2f
 800df2c:	d006      	beq.n	800df3c <create_name+0x48>
 800df2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df30:	2b5c      	cmp	r3, #92	; 0x5c
 800df32:	d110      	bne.n	800df56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df34:	e002      	b.n	800df3c <create_name+0x48>
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	3301      	adds	r3, #1
 800df3a:	61bb      	str	r3, [r7, #24]
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	4413      	add	r3, r2
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b2f      	cmp	r3, #47	; 0x2f
 800df46:	d0f6      	beq.n	800df36 <create_name+0x42>
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	4413      	add	r3, r2
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b5c      	cmp	r3, #92	; 0x5c
 800df52:	d0f0      	beq.n	800df36 <create_name+0x42>
			break;
 800df54:	e02a      	b.n	800dfac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	2bfe      	cmp	r3, #254	; 0xfe
 800df5a:	d901      	bls.n	800df60 <create_name+0x6c>
 800df5c:	2306      	movs	r3, #6
 800df5e:	e17d      	b.n	800e25c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800df60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df62:	b2db      	uxtb	r3, r3
 800df64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800df66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df68:	2101      	movs	r1, #1
 800df6a:	4618      	mov	r0, r3
 800df6c:	f001 fc14 	bl	800f798 <ff_convert>
 800df70:	4603      	mov	r3, r0
 800df72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800df74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <create_name+0x8a>
 800df7a:	2306      	movs	r3, #6
 800df7c:	e16e      	b.n	800e25c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800df7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df80:	2b7f      	cmp	r3, #127	; 0x7f
 800df82:	d809      	bhi.n	800df98 <create_name+0xa4>
 800df84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df86:	4619      	mov	r1, r3
 800df88:	488d      	ldr	r0, [pc, #564]	; (800e1c0 <create_name+0x2cc>)
 800df8a:	f7fe fce2 	bl	800c952 <chk_chr>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <create_name+0xa4>
 800df94:	2306      	movs	r3, #6
 800df96:	e161      	b.n	800e25c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	617a      	str	r2, [r7, #20]
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dfa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dfa8:	e7b4      	b.n	800df14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dfaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dfac:	693a      	ldr	r2, [r7, #16]
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	441a      	add	r2, r3
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dfb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfb8:	2b1f      	cmp	r3, #31
 800dfba:	d801      	bhi.n	800dfc0 <create_name+0xcc>
 800dfbc:	2304      	movs	r3, #4
 800dfbe:	e000      	b.n	800dfc2 <create_name+0xce>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dfc6:	e011      	b.n	800dfec <create_name+0xf8>
		w = lfn[di - 1];
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dfce:	4413      	add	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dfda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfdc:	2b20      	cmp	r3, #32
 800dfde:	d002      	beq.n	800dfe6 <create_name+0xf2>
 800dfe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe2:	2b2e      	cmp	r3, #46	; 0x2e
 800dfe4:	d106      	bne.n	800dff4 <create_name+0x100>
		di--;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1ea      	bne.n	800dfc8 <create_name+0xd4>
 800dff2:	e000      	b.n	800dff6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dff4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	4413      	add	r3, r2
 800dffe:	2200      	movs	r2, #0
 800e000:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <create_name+0x118>
 800e008:	2306      	movs	r3, #6
 800e00a:	e127      	b.n	800e25c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3324      	adds	r3, #36	; 0x24
 800e010:	220b      	movs	r2, #11
 800e012:	2120      	movs	r1, #32
 800e014:	4618      	mov	r0, r3
 800e016:	f7fe fc5a 	bl	800c8ce <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e01a:	2300      	movs	r3, #0
 800e01c:	61bb      	str	r3, [r7, #24]
 800e01e:	e002      	b.n	800e026 <create_name+0x132>
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	3301      	adds	r3, #1
 800e024:	61bb      	str	r3, [r7, #24]
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	4413      	add	r3, r2
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	2b20      	cmp	r3, #32
 800e032:	d0f5      	beq.n	800e020 <create_name+0x12c>
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4413      	add	r3, r2
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	2b2e      	cmp	r3, #46	; 0x2e
 800e040:	d0ee      	beq.n	800e020 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <create_name+0x168>
 800e048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e04c:	f043 0303 	orr.w	r3, r3, #3
 800e050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e054:	e002      	b.n	800e05c <create_name+0x168>
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	3b01      	subs	r3, #1
 800e05a:	617b      	str	r3, [r7, #20]
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d009      	beq.n	800e076 <create_name+0x182>
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e068:	4413      	add	r3, r2
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4413      	add	r3, r2
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	2b2e      	cmp	r3, #46	; 0x2e
 800e074:	d1ef      	bne.n	800e056 <create_name+0x162>

	i = b = 0; ni = 8;
 800e076:	2300      	movs	r3, #0
 800e078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e07c:	2300      	movs	r3, #0
 800e07e:	623b      	str	r3, [r7, #32]
 800e080:	2308      	movs	r3, #8
 800e082:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	61ba      	str	r2, [r7, #24]
 800e08a:	005b      	lsls	r3, r3, #1
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4413      	add	r3, r2
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 8090 	beq.w	800e1bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e09e:	2b20      	cmp	r3, #32
 800e0a0:	d006      	beq.n	800e0b0 <create_name+0x1bc>
 800e0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e0a6:	d10a      	bne.n	800e0be <create_name+0x1ca>
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d006      	beq.n	800e0be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b4:	f043 0303 	orr.w	r3, r3, #3
 800e0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0bc:	e07d      	b.n	800e1ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e0be:	6a3a      	ldr	r2, [r7, #32]
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d203      	bcs.n	800e0ce <create_name+0x1da>
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d123      	bne.n	800e116 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	2b0b      	cmp	r3, #11
 800e0d2:	d106      	bne.n	800e0e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d8:	f043 0303 	orr.w	r3, r3, #3
 800e0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0e0:	e075      	b.n	800e1ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e0e2:	69ba      	ldr	r2, [r7, #24]
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d005      	beq.n	800e0f6 <create_name+0x202>
 800e0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ee:	f043 0303 	orr.w	r3, r3, #3
 800e0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e0f6:	69ba      	ldr	r2, [r7, #24]
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d866      	bhi.n	800e1cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	61bb      	str	r3, [r7, #24]
 800e102:	2308      	movs	r3, #8
 800e104:	623b      	str	r3, [r7, #32]
 800e106:	230b      	movs	r3, #11
 800e108:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e10a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e114:	e051      	b.n	800e1ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e118:	2b7f      	cmp	r3, #127	; 0x7f
 800e11a:	d914      	bls.n	800e146 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e11c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e11e:	2100      	movs	r1, #0
 800e120:	4618      	mov	r0, r3
 800e122:	f001 fb39 	bl	800f798 <ff_convert>
 800e126:	4603      	mov	r3, r0
 800e128:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e12a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d004      	beq.n	800e13a <create_name+0x246>
 800e130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e132:	3b80      	subs	r3, #128	; 0x80
 800e134:	4a23      	ldr	r2, [pc, #140]	; (800e1c4 <create_name+0x2d0>)
 800e136:	5cd3      	ldrb	r3, [r2, r3]
 800e138:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e13e:	f043 0302 	orr.w	r3, r3, #2
 800e142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d007      	beq.n	800e15c <create_name+0x268>
 800e14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e14e:	4619      	mov	r1, r3
 800e150:	481d      	ldr	r0, [pc, #116]	; (800e1c8 <create_name+0x2d4>)
 800e152:	f7fe fbfe 	bl	800c952 <chk_chr>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d008      	beq.n	800e16e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e15c:	235f      	movs	r3, #95	; 0x5f
 800e15e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e164:	f043 0303 	orr.w	r3, r3, #3
 800e168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e16c:	e01b      	b.n	800e1a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e170:	2b40      	cmp	r3, #64	; 0x40
 800e172:	d909      	bls.n	800e188 <create_name+0x294>
 800e174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e176:	2b5a      	cmp	r3, #90	; 0x5a
 800e178:	d806      	bhi.n	800e188 <create_name+0x294>
					b |= 2;
 800e17a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e17e:	f043 0302 	orr.w	r3, r3, #2
 800e182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e186:	e00e      	b.n	800e1a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e18a:	2b60      	cmp	r3, #96	; 0x60
 800e18c:	d90b      	bls.n	800e1a6 <create_name+0x2b2>
 800e18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e190:	2b7a      	cmp	r3, #122	; 0x7a
 800e192:	d808      	bhi.n	800e1a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e198:	f043 0301 	orr.w	r3, r3, #1
 800e19c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a2:	3b20      	subs	r3, #32
 800e1a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	623a      	str	r2, [r7, #32]
 800e1ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e1ae:	b2d1      	uxtb	r1, r2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	460a      	mov	r2, r1
 800e1b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e1ba:	e763      	b.n	800e084 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e1bc:	bf00      	nop
 800e1be:	e006      	b.n	800e1ce <create_name+0x2da>
 800e1c0:	080140fc 	.word	0x080140fc
 800e1c4:	0801416c 	.word	0x0801416c
 800e1c8:	08014108 	.word	0x08014108
			if (si > di) break;			/* No extension */
 800e1cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1d4:	2be5      	cmp	r3, #229	; 0xe5
 800e1d6:	d103      	bne.n	800e1e0 <create_name+0x2ec>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2205      	movs	r2, #5
 800e1dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	2b08      	cmp	r3, #8
 800e1e4:	d104      	bne.n	800e1f0 <create_name+0x2fc>
 800e1e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1f4:	f003 030c 	and.w	r3, r3, #12
 800e1f8:	2b0c      	cmp	r3, #12
 800e1fa:	d005      	beq.n	800e208 <create_name+0x314>
 800e1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e200:	f003 0303 	and.w	r3, r3, #3
 800e204:	2b03      	cmp	r3, #3
 800e206:	d105      	bne.n	800e214 <create_name+0x320>
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	f043 0302 	orr.w	r3, r3, #2
 800e210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e218:	f003 0302 	and.w	r3, r3, #2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d117      	bne.n	800e250 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d105      	bne.n	800e238 <create_name+0x344>
 800e22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e230:	f043 0310 	orr.w	r3, r3, #16
 800e234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e23c:	f003 030c 	and.w	r3, r3, #12
 800e240:	2b04      	cmp	r3, #4
 800e242:	d105      	bne.n	800e250 <create_name+0x35c>
 800e244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e248:	f043 0308 	orr.w	r3, r3, #8
 800e24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e256:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e25a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3728      	adds	r7, #40	; 0x28
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e278:	e002      	b.n	800e280 <follow_path+0x1c>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	2b2f      	cmp	r3, #47	; 0x2f
 800e286:	d0f8      	beq.n	800e27a <follow_path+0x16>
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2b5c      	cmp	r3, #92	; 0x5c
 800e28e:	d0f4      	beq.n	800e27a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	2200      	movs	r2, #0
 800e294:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b1f      	cmp	r3, #31
 800e29c:	d80a      	bhi.n	800e2b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2280      	movs	r2, #128	; 0x80
 800e2a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff f8fd 	bl	800d4a8 <dir_sdi>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	75fb      	strb	r3, [r7, #23]
 800e2b2:	e048      	b.n	800e346 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2b4:	463b      	mov	r3, r7
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff fe1b 	bl	800def4 <create_name>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2c2:	7dfb      	ldrb	r3, [r7, #23]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d139      	bne.n	800e33c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff fc5a 	bl	800db82 <dir_find>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e2da:	7dfb      	ldrb	r3, [r7, #23]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00a      	beq.n	800e2f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	2b04      	cmp	r3, #4
 800e2e4:	d12c      	bne.n	800e340 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e2e6:	7afb      	ldrb	r3, [r7, #11]
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d127      	bne.n	800e340 <follow_path+0xdc>
 800e2f0:	2305      	movs	r3, #5
 800e2f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e2f4:	e024      	b.n	800e340 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e2f6:	7afb      	ldrb	r3, [r7, #11]
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d121      	bne.n	800e344 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	799b      	ldrb	r3, [r3, #6]
 800e304:	f003 0310 	and.w	r3, r3, #16
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d102      	bne.n	800e312 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e30c:	2305      	movs	r3, #5
 800e30e:	75fb      	strb	r3, [r7, #23]
 800e310:	e019      	b.n	800e346 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	8992      	ldrh	r2, [r2, #12]
 800e320:	fbb3 f0f2 	udiv	r0, r3, r2
 800e324:	fb00 f202 	mul.w	r2, r0, r2
 800e328:	1a9b      	subs	r3, r3, r2
 800e32a:	440b      	add	r3, r1
 800e32c:	4619      	mov	r1, r3
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fa60 	bl	800d7f4 <ld_clust>
 800e334:	4602      	mov	r2, r0
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e33a:	e7bb      	b.n	800e2b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e33c:	bf00      	nop
 800e33e:	e002      	b.n	800e346 <follow_path+0xe2>
				break;
 800e340:	bf00      	nop
 800e342:	e000      	b.n	800e346 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e344:	bf00      	nop
			}
		}
	}

	return res;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e350:	b480      	push	{r7}
 800e352:	b087      	sub	sp, #28
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e358:	f04f 33ff 	mov.w	r3, #4294967295
 800e35c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d031      	beq.n	800e3ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	617b      	str	r3, [r7, #20]
 800e36c:	e002      	b.n	800e374 <get_ldnumber+0x24>
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	3301      	adds	r3, #1
 800e372:	617b      	str	r3, [r7, #20]
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2b1f      	cmp	r3, #31
 800e37a:	d903      	bls.n	800e384 <get_ldnumber+0x34>
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b3a      	cmp	r3, #58	; 0x3a
 800e382:	d1f4      	bne.n	800e36e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2b3a      	cmp	r3, #58	; 0x3a
 800e38a:	d11c      	bne.n	800e3c6 <get_ldnumber+0x76>
			tp = *path;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	60fa      	str	r2, [r7, #12]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	3b30      	subs	r3, #48	; 0x30
 800e39c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b09      	cmp	r3, #9
 800e3a2:	d80e      	bhi.n	800e3c2 <get_ldnumber+0x72>
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d10a      	bne.n	800e3c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d107      	bne.n	800e3c2 <get_ldnumber+0x72>
					vol = (int)i;
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	e002      	b.n	800e3cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e3ca:	693b      	ldr	r3, [r7, #16]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	371c      	adds	r7, #28
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	70da      	strb	r2, [r3, #3]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7fe fc78 	bl	800cce8 <move_window>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <check_fs+0x2a>
 800e3fe:	2304      	movs	r3, #4
 800e400:	e038      	b.n	800e474 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3338      	adds	r3, #56	; 0x38
 800e406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f9bc 	bl	800c788 <ld_word>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e418:	429a      	cmp	r2, r3
 800e41a:	d001      	beq.n	800e420 <check_fs+0x48>
 800e41c:	2303      	movs	r3, #3
 800e41e:	e029      	b.n	800e474 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e426:	2be9      	cmp	r3, #233	; 0xe9
 800e428:	d009      	beq.n	800e43e <check_fs+0x66>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e430:	2beb      	cmp	r3, #235	; 0xeb
 800e432:	d11e      	bne.n	800e472 <check_fs+0x9a>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e43a:	2b90      	cmp	r3, #144	; 0x90
 800e43c:	d119      	bne.n	800e472 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3338      	adds	r3, #56	; 0x38
 800e442:	3336      	adds	r3, #54	; 0x36
 800e444:	4618      	mov	r0, r3
 800e446:	f7fe f9b7 	bl	800c7b8 <ld_dword>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e450:	4a0a      	ldr	r2, [pc, #40]	; (800e47c <check_fs+0xa4>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d101      	bne.n	800e45a <check_fs+0x82>
 800e456:	2300      	movs	r3, #0
 800e458:	e00c      	b.n	800e474 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3338      	adds	r3, #56	; 0x38
 800e45e:	3352      	adds	r3, #82	; 0x52
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe f9a9 	bl	800c7b8 <ld_dword>
 800e466:	4603      	mov	r3, r0
 800e468:	4a05      	ldr	r2, [pc, #20]	; (800e480 <check_fs+0xa8>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d101      	bne.n	800e472 <check_fs+0x9a>
 800e46e:	2300      	movs	r3, #0
 800e470:	e000      	b.n	800e474 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e472:	2302      	movs	r3, #2
}
 800e474:	4618      	mov	r0, r3
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	00544146 	.word	0x00544146
 800e480:	33544146 	.word	0x33544146

0800e484 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b096      	sub	sp, #88	; 0x58
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	4613      	mov	r3, r2
 800e490:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7ff ff59 	bl	800e350 <get_ldnumber>
 800e49e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	da01      	bge.n	800e4aa <find_volume+0x26>
 800e4a6:	230b      	movs	r3, #11
 800e4a8:	e265      	b.n	800e976 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4aa:	4a9f      	ldr	r2, [pc, #636]	; (800e728 <find_volume+0x2a4>)
 800e4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d101      	bne.n	800e4be <find_volume+0x3a>
 800e4ba:	230c      	movs	r3, #12
 800e4bc:	e25b      	b.n	800e976 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	f023 0301 	bic.w	r3, r3, #1
 800e4ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d01a      	beq.n	800e50a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	785b      	ldrb	r3, [r3, #1]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fe f8b7 	bl	800c64c <disk_status>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e4e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10c      	bne.n	800e50a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d007      	beq.n	800e506 <find_volume+0x82>
 800e4f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4fa:	f003 0304 	and.w	r3, r3, #4
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e502:	230a      	movs	r3, #10
 800e504:	e237      	b.n	800e976 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800e506:	2300      	movs	r3, #0
 800e508:	e235      	b.n	800e976 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50c:	2200      	movs	r2, #0
 800e50e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e512:	b2da      	uxtb	r2, r3
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	785b      	ldrb	r3, [r3, #1]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fe f8af 	bl	800c680 <disk_initialize>
 800e522:	4603      	mov	r3, r0
 800e524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e52c:	f003 0301 	and.w	r3, r3, #1
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e534:	2303      	movs	r3, #3
 800e536:	e21e      	b.n	800e976 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d007      	beq.n	800e54e <find_volume+0xca>
 800e53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e542:	f003 0304 	and.w	r3, r3, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e54a:	230a      	movs	r3, #10
 800e54c:	e213      	b.n	800e976 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	7858      	ldrb	r0, [r3, #1]
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	330c      	adds	r3, #12
 800e556:	461a      	mov	r2, r3
 800e558:	2102      	movs	r1, #2
 800e55a:	f7fe f8f7 	bl	800c74c <disk_ioctl>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <find_volume+0xe4>
 800e564:	2301      	movs	r3, #1
 800e566:	e206      	b.n	800e976 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	899b      	ldrh	r3, [r3, #12]
 800e56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e570:	d80d      	bhi.n	800e58e <find_volume+0x10a>
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	899b      	ldrh	r3, [r3, #12]
 800e576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e57a:	d308      	bcc.n	800e58e <find_volume+0x10a>
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	899b      	ldrh	r3, [r3, #12]
 800e580:	461a      	mov	r2, r3
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	899b      	ldrh	r3, [r3, #12]
 800e586:	3b01      	subs	r3, #1
 800e588:	4013      	ands	r3, r2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <find_volume+0x10e>
 800e58e:	2301      	movs	r3, #1
 800e590:	e1f1      	b.n	800e976 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e59a:	f7ff ff1d 	bl	800e3d8 <check_fs>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d149      	bne.n	800e640 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e5b0:	e01e      	b.n	800e5f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ba:	011b      	lsls	r3, r3, #4
 800e5bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5c0:	4413      	add	r3, r2
 800e5c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d006      	beq.n	800e5dc <find_volume+0x158>
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe f8f0 	bl	800c7b8 <ld_dword>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	e000      	b.n	800e5de <find_volume+0x15a>
 800e5dc:	2200      	movs	r2, #0
 800e5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	3358      	adds	r3, #88	; 0x58
 800e5e4:	443b      	add	r3, r7
 800e5e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f2:	2b03      	cmp	r3, #3
 800e5f4:	d9dd      	bls.n	800e5b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <find_volume+0x182>
 800e600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e602:	3b01      	subs	r3, #1
 800e604:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	3358      	adds	r3, #88	; 0x58
 800e60c:	443b      	add	r3, r7
 800e60e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e612:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e616:	2b00      	cmp	r3, #0
 800e618:	d005      	beq.n	800e626 <find_volume+0x1a2>
 800e61a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e61c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e61e:	f7ff fedb 	bl	800e3d8 <check_fs>
 800e622:	4603      	mov	r3, r0
 800e624:	e000      	b.n	800e628 <find_volume+0x1a4>
 800e626:	2303      	movs	r3, #3
 800e628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e62c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e630:	2b01      	cmp	r3, #1
 800e632:	d905      	bls.n	800e640 <find_volume+0x1bc>
 800e634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e636:	3301      	adds	r3, #1
 800e638:	643b      	str	r3, [r7, #64]	; 0x40
 800e63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e63c:	2b03      	cmp	r3, #3
 800e63e:	d9e2      	bls.n	800e606 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e644:	2b04      	cmp	r3, #4
 800e646:	d101      	bne.n	800e64c <find_volume+0x1c8>
 800e648:	2301      	movs	r3, #1
 800e64a:	e194      	b.n	800e976 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e64c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e650:	2b01      	cmp	r3, #1
 800e652:	d901      	bls.n	800e658 <find_volume+0x1d4>
 800e654:	230d      	movs	r3, #13
 800e656:	e18e      	b.n	800e976 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	3338      	adds	r3, #56	; 0x38
 800e65c:	330b      	adds	r3, #11
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe f892 	bl	800c788 <ld_word>
 800e664:	4603      	mov	r3, r0
 800e666:	461a      	mov	r2, r3
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	899b      	ldrh	r3, [r3, #12]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d001      	beq.n	800e674 <find_volume+0x1f0>
 800e670:	230d      	movs	r3, #13
 800e672:	e180      	b.n	800e976 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	3338      	adds	r3, #56	; 0x38
 800e678:	3316      	adds	r3, #22
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe f884 	bl	800c788 <ld_word>
 800e680:	4603      	mov	r3, r0
 800e682:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e686:	2b00      	cmp	r3, #0
 800e688:	d106      	bne.n	800e698 <find_volume+0x214>
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	3338      	adds	r3, #56	; 0x38
 800e68e:	3324      	adds	r3, #36	; 0x24
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe f891 	bl	800c7b8 <ld_dword>
 800e696:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e69c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	789b      	ldrb	r3, [r3, #2]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d005      	beq.n	800e6bc <find_volume+0x238>
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	789b      	ldrb	r3, [r3, #2]
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d001      	beq.n	800e6bc <find_volume+0x238>
 800e6b8:	230d      	movs	r3, #13
 800e6ba:	e15c      	b.n	800e976 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	789b      	ldrb	r3, [r3, #2]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c4:	fb02 f303 	mul.w	r3, r2, r3
 800e6c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	895b      	ldrh	r3, [r3, #10]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d008      	beq.n	800e6f0 <find_volume+0x26c>
 800e6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e0:	895b      	ldrh	r3, [r3, #10]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	895b      	ldrh	r3, [r3, #10]
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	4013      	ands	r3, r2
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <find_volume+0x270>
 800e6f0:	230d      	movs	r3, #13
 800e6f2:	e140      	b.n	800e976 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	3338      	adds	r3, #56	; 0x38
 800e6f8:	3311      	adds	r3, #17
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe f844 	bl	800c788 <ld_word>
 800e700:	4603      	mov	r3, r0
 800e702:	461a      	mov	r2, r3
 800e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e706:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	891b      	ldrh	r3, [r3, #8]
 800e70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e70e:	8992      	ldrh	r2, [r2, #12]
 800e710:	0952      	lsrs	r2, r2, #5
 800e712:	b292      	uxth	r2, r2
 800e714:	fbb3 f1f2 	udiv	r1, r3, r2
 800e718:	fb01 f202 	mul.w	r2, r1, r2
 800e71c:	1a9b      	subs	r3, r3, r2
 800e71e:	b29b      	uxth	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	d003      	beq.n	800e72c <find_volume+0x2a8>
 800e724:	230d      	movs	r3, #13
 800e726:	e126      	b.n	800e976 <find_volume+0x4f2>
 800e728:	2001d2d0 	.word	0x2001d2d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	3338      	adds	r3, #56	; 0x38
 800e730:	3313      	adds	r3, #19
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe f828 	bl	800c788 <ld_word>
 800e738:	4603      	mov	r3, r0
 800e73a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d106      	bne.n	800e750 <find_volume+0x2cc>
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	3338      	adds	r3, #56	; 0x38
 800e746:	3320      	adds	r3, #32
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fe f835 	bl	800c7b8 <ld_dword>
 800e74e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	3338      	adds	r3, #56	; 0x38
 800e754:	330e      	adds	r3, #14
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f816 	bl	800c788 <ld_word>
 800e75c:	4603      	mov	r3, r0
 800e75e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e762:	2b00      	cmp	r3, #0
 800e764:	d101      	bne.n	800e76a <find_volume+0x2e6>
 800e766:	230d      	movs	r3, #13
 800e768:	e105      	b.n	800e976 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e76a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e76e:	4413      	add	r3, r2
 800e770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e772:	8911      	ldrh	r1, [r2, #8]
 800e774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e776:	8992      	ldrh	r2, [r2, #12]
 800e778:	0952      	lsrs	r2, r2, #5
 800e77a:	b292      	uxth	r2, r2
 800e77c:	fbb1 f2f2 	udiv	r2, r1, r2
 800e780:	b292      	uxth	r2, r2
 800e782:	4413      	add	r3, r2
 800e784:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d201      	bcs.n	800e792 <find_volume+0x30e>
 800e78e:	230d      	movs	r3, #13
 800e790:	e0f1      	b.n	800e976 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79a:	8952      	ldrh	r2, [r2, #10]
 800e79c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <find_volume+0x328>
 800e7a8:	230d      	movs	r3, #13
 800e7aa:	e0e4      	b.n	800e976 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d802      	bhi.n	800e7c2 <find_volume+0x33e>
 800e7bc:	2302      	movs	r3, #2
 800e7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d802      	bhi.n	800e7d2 <find_volume+0x34e>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	1c9a      	adds	r2, r3, #2
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7de:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e7e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e4:	441a      	add	r2, r3
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e7ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	441a      	add	r2, r3
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d11e      	bne.n	800e83a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	3338      	adds	r3, #56	; 0x38
 800e800:	332a      	adds	r3, #42	; 0x2a
 800e802:	4618      	mov	r0, r3
 800e804:	f7fd ffc0 	bl	800c788 <ld_word>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <find_volume+0x38e>
 800e80e:	230d      	movs	r3, #13
 800e810:	e0b1      	b.n	800e976 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	891b      	ldrh	r3, [r3, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <find_volume+0x39a>
 800e81a:	230d      	movs	r3, #13
 800e81c:	e0ab      	b.n	800e976 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	3338      	adds	r3, #56	; 0x38
 800e822:	332c      	adds	r3, #44	; 0x2c
 800e824:	4618      	mov	r0, r3
 800e826:	f7fd ffc7 	bl	800c7b8 <ld_dword>
 800e82a:	4602      	mov	r2, r0
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	647b      	str	r3, [r7, #68]	; 0x44
 800e838:	e01f      	b.n	800e87a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83c:	891b      	ldrh	r3, [r3, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <find_volume+0x3c2>
 800e842:	230d      	movs	r3, #13
 800e844:	e097      	b.n	800e976 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84c:	441a      	add	r2, r3
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e856:	2b02      	cmp	r3, #2
 800e858:	d103      	bne.n	800e862 <find_volume+0x3de>
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	005b      	lsls	r3, r3, #1
 800e860:	e00a      	b.n	800e878 <find_volume+0x3f4>
 800e862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e864:	69da      	ldr	r2, [r3, #28]
 800e866:	4613      	mov	r3, r2
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	4413      	add	r3, r2
 800e86c:	085a      	lsrs	r2, r3, #1
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	f003 0301 	and.w	r3, r3, #1
 800e876:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e878:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	6a1a      	ldr	r2, [r3, #32]
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	899b      	ldrh	r3, [r3, #12]
 800e882:	4619      	mov	r1, r3
 800e884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e886:	440b      	add	r3, r1
 800e888:	3b01      	subs	r3, #1
 800e88a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e88c:	8989      	ldrh	r1, [r1, #12]
 800e88e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e892:	429a      	cmp	r2, r3
 800e894:	d201      	bcs.n	800e89a <find_volume+0x416>
 800e896:	230d      	movs	r3, #13
 800e898:	e06d      	b.n	800e976 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a0:	619a      	str	r2, [r3, #24]
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	699a      	ldr	r2, [r3, #24]
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ac:	2280      	movs	r2, #128	; 0x80
 800e8ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	d149      	bne.n	800e94c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	3338      	adds	r3, #56	; 0x38
 800e8bc:	3330      	adds	r3, #48	; 0x30
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fd ff62 	bl	800c788 <ld_word>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d140      	bne.n	800e94c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8d2:	f7fe fa09 	bl	800cce8 <move_window>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d137      	bne.n	800e94c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	2200      	movs	r2, #0
 800e8e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	3338      	adds	r3, #56	; 0x38
 800e8e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fd ff4c 	bl	800c788 <ld_word>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d127      	bne.n	800e94c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	3338      	adds	r3, #56	; 0x38
 800e900:	4618      	mov	r0, r3
 800e902:	f7fd ff59 	bl	800c7b8 <ld_dword>
 800e906:	4603      	mov	r3, r0
 800e908:	4a1d      	ldr	r2, [pc, #116]	; (800e980 <find_volume+0x4fc>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d11e      	bne.n	800e94c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	3338      	adds	r3, #56	; 0x38
 800e912:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e916:	4618      	mov	r0, r3
 800e918:	f7fd ff4e 	bl	800c7b8 <ld_dword>
 800e91c:	4603      	mov	r3, r0
 800e91e:	4a19      	ldr	r2, [pc, #100]	; (800e984 <find_volume+0x500>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d113      	bne.n	800e94c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	3338      	adds	r3, #56	; 0x38
 800e928:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fd ff43 	bl	800c7b8 <ld_dword>
 800e932:	4602      	mov	r2, r0
 800e934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e936:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	3338      	adds	r3, #56	; 0x38
 800e93c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e940:	4618      	mov	r0, r3
 800e942:	f7fd ff39 	bl	800c7b8 <ld_dword>
 800e946:	4602      	mov	r2, r0
 800e948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e952:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e954:	4b0c      	ldr	r3, [pc, #48]	; (800e988 <find_volume+0x504>)
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	3301      	adds	r3, #1
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <find_volume+0x504>)
 800e95e:	801a      	strh	r2, [r3, #0]
 800e960:	4b09      	ldr	r3, [pc, #36]	; (800e988 <find_volume+0x504>)
 800e962:	881a      	ldrh	r2, [r3, #0]
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	4a08      	ldr	r2, [pc, #32]	; (800e98c <find_volume+0x508>)
 800e96c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e96e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e970:	f7fe f952 	bl	800cc18 <clear_lock>
#endif
	return FR_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3758      	adds	r7, #88	; 0x58
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	41615252 	.word	0x41615252
 800e984:	61417272 	.word	0x61417272
 800e988:	2001d2d4 	.word	0x2001d2d4
 800e98c:	2001d2f8 	.word	0x2001d2f8

0800e990 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e99a:	2309      	movs	r3, #9
 800e99c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01c      	beq.n	800e9de <validate+0x4e>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d018      	beq.n	800e9de <validate+0x4e>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d013      	beq.n	800e9de <validate+0x4e>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	889a      	ldrh	r2, [r3, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	88db      	ldrh	r3, [r3, #6]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d10c      	bne.n	800e9de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	785b      	ldrb	r3, [r3, #1]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fd fe3e 	bl	800c64c <disk_status>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d101      	bne.n	800e9de <validate+0x4e>
			res = FR_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d102      	bne.n	800e9ea <validate+0x5a>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	e000      	b.n	800e9ec <validate+0x5c>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	6013      	str	r3, [r2, #0]
	return res;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
	...

0800e9fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b088      	sub	sp, #32
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	4613      	mov	r3, r2
 800ea08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea0e:	f107 0310 	add.w	r3, r7, #16
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff fc9c 	bl	800e350 <get_ldnumber>
 800ea18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	da01      	bge.n	800ea24 <f_mount+0x28>
 800ea20:	230b      	movs	r3, #11
 800ea22:	e02b      	b.n	800ea7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea24:	4a17      	ldr	r2, [pc, #92]	; (800ea84 <f_mount+0x88>)
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d005      	beq.n	800ea40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea34:	69b8      	ldr	r0, [r7, #24]
 800ea36:	f7fe f8ef 	bl	800cc18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d002      	beq.n	800ea4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	490d      	ldr	r1, [pc, #52]	; (800ea84 <f_mount+0x88>)
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <f_mount+0x66>
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d001      	beq.n	800ea66 <f_mount+0x6a>
 800ea62:	2300      	movs	r3, #0
 800ea64:	e00a      	b.n	800ea7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea66:	f107 010c 	add.w	r1, r7, #12
 800ea6a:	f107 0308 	add.w	r3, r7, #8
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fd07 	bl	800e484 <find_volume>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	2001d2d0 	.word	0x2001d2d0

0800ea88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b09a      	sub	sp, #104	; 0x68
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <f_open+0x18>
 800ea9c:	2309      	movs	r3, #9
 800ea9e:	e1bb      	b.n	800ee18 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eaa8:	79fa      	ldrb	r2, [r7, #7]
 800eaaa:	f107 0114 	add.w	r1, r7, #20
 800eaae:	f107 0308 	add.w	r3, r7, #8
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7ff fce6 	bl	800e484 <find_volume>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800eabe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 819f 	bne.w	800ee06 <f_open+0x37e>
		dj.obj.fs = fs;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	f107 0318 	add.w	r3, r7, #24
 800ead2:	4611      	mov	r1, r2
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fbc5 	bl	800e264 <follow_path>
 800eada:	4603      	mov	r3, r0
 800eadc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d11a      	bne.n	800eb1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eaec:	b25b      	sxtb	r3, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	da03      	bge.n	800eafa <f_open+0x72>
				res = FR_INVALID_NAME;
 800eaf2:	2306      	movs	r3, #6
 800eaf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eaf8:	e011      	b.n	800eb1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	f023 0301 	bic.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	bf14      	ite	ne
 800eb04:	2301      	movne	r3, #1
 800eb06:	2300      	moveq	r3, #0
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f107 0318 	add.w	r3, r7, #24
 800eb10:	4611      	mov	r1, r2
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fd ff38 	bl	800c988 <chk_lock>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	f003 031c 	and.w	r3, r3, #28
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d07f      	beq.n	800ec28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d017      	beq.n	800eb60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb34:	2b04      	cmp	r3, #4
 800eb36:	d10e      	bne.n	800eb56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb38:	f7fd ff82 	bl	800ca40 <enq_lock>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d006      	beq.n	800eb50 <f_open+0xc8>
 800eb42:	f107 0318 	add.w	r3, r7, #24
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7ff f8dc 	bl	800dd04 <dir_register>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	e000      	b.n	800eb52 <f_open+0xca>
 800eb50:	2312      	movs	r3, #18
 800eb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	f043 0308 	orr.w	r3, r3, #8
 800eb5c:	71fb      	strb	r3, [r7, #7]
 800eb5e:	e010      	b.n	800eb82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb60:	7fbb      	ldrb	r3, [r7, #30]
 800eb62:	f003 0311 	and.w	r3, r3, #17
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <f_open+0xea>
					res = FR_DENIED;
 800eb6a:	2307      	movs	r3, #7
 800eb6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb70:	e007      	b.n	800eb82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	f003 0304 	and.w	r3, r3, #4
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d002      	beq.n	800eb82 <f_open+0xfa>
 800eb7c:	2308      	movs	r3, #8
 800eb7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d168      	bne.n	800ec5c <f_open+0x1d4>
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	f003 0308 	and.w	r3, r3, #8
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d063      	beq.n	800ec5c <f_open+0x1d4>
				dw = GET_FATTIME();
 800eb94:	f7fd fcf8 	bl	800c588 <get_fattime>
 800eb98:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	330e      	adds	r3, #14
 800eb9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fd fe47 	bl	800c834 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	3316      	adds	r3, #22
 800ebaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fd fe41 	bl	800c834 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	330b      	adds	r3, #11
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fe fe17 	bl	800d7f4 <ld_clust>
 800ebc6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ebcc:	2200      	movs	r2, #0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fe fe2f 	bl	800d832 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	331c      	adds	r3, #28
 800ebd8:	2100      	movs	r1, #0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fd fe2a 	bl	800c834 <st_dword>
					fs->wflag = 1;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d037      	beq.n	800ec5c <f_open+0x1d4>
						dw = fs->winsect;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ebf2:	f107 0318 	add.w	r3, r7, #24
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe fb1f 	bl	800d23e <remove_chain>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ec06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d126      	bne.n	800ec5c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe f868 	bl	800cce8 <move_window>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec22:	3a01      	subs	r2, #1
 800ec24:	615a      	str	r2, [r3, #20]
 800ec26:	e019      	b.n	800ec5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d115      	bne.n	800ec5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec30:	7fbb      	ldrb	r3, [r7, #30]
 800ec32:	f003 0310 	and.w	r3, r3, #16
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec3a:	2304      	movs	r3, #4
 800ec3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ec40:	e00c      	b.n	800ec5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	f003 0302 	and.w	r3, r3, #2
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d007      	beq.n	800ec5c <f_open+0x1d4>
 800ec4c:	7fbb      	ldrb	r3, [r7, #30]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d002      	beq.n	800ec5c <f_open+0x1d4>
						res = FR_DENIED;
 800ec56:	2307      	movs	r3, #7
 800ec58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d128      	bne.n	800ecb6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec64:	79fb      	ldrb	r3, [r7, #7]
 800ec66:	f003 0308 	and.w	r3, r3, #8
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d003      	beq.n	800ec76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec84:	79fb      	ldrb	r3, [r7, #7]
 800ec86:	f023 0301 	bic.w	r3, r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	bf14      	ite	ne
 800ec8e:	2301      	movne	r3, #1
 800ec90:	2300      	moveq	r3, #0
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	461a      	mov	r2, r3
 800ec96:	f107 0318 	add.w	r3, r7, #24
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fd fef1 	bl	800ca84 <inc_lock>
 800eca2:	4602      	mov	r2, r0
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <f_open+0x22e>
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f040 80a3 	bne.w	800ee06 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe fd94 	bl	800d7f4 <ld_clust>
 800eccc:	4602      	mov	r2, r0
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd4:	331c      	adds	r3, #28
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd fd6e 	bl	800c7b8 <ld_dword>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	88da      	ldrh	r2, [r3, #6]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	79fa      	ldrb	r2, [r7, #7]
 800ecfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3330      	adds	r3, #48	; 0x30
 800ed12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed16:	2100      	movs	r1, #0
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fd fdd8 	bl	800c8ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed1e:	79fb      	ldrb	r3, [r7, #7]
 800ed20:	f003 0320 	and.w	r3, r3, #32
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d06e      	beq.n	800ee06 <f_open+0x37e>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d06a      	beq.n	800ee06 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	68da      	ldr	r2, [r3, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	895b      	ldrh	r3, [r3, #10]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	899b      	ldrh	r3, [r3, #12]
 800ed42:	fb02 f303 	mul.w	r3, r2, r3
 800ed46:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed54:	e016      	b.n	800ed84 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe f881 	bl	800ce62 <get_fat>
 800ed60:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ed62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d802      	bhi.n	800ed6e <f_open+0x2e6>
 800ed68:	2302      	movs	r3, #2
 800ed6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed74:	d102      	bne.n	800ed7c <f_open+0x2f4>
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d103      	bne.n	800ed94 <f_open+0x30c>
 800ed8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d8e0      	bhi.n	800ed56 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d131      	bne.n	800ee06 <f_open+0x37e>
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	899b      	ldrh	r3, [r3, #12]
 800eda6:	461a      	mov	r2, r3
 800eda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800edae:	fb01 f202 	mul.w	r2, r1, r2
 800edb2:	1a9b      	subs	r3, r3, r2
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d026      	beq.n	800ee06 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fe f831 	bl	800ce24 <clust2sect>
 800edc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800edc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d103      	bne.n	800edd2 <f_open+0x34a>
						res = FR_INT_ERR;
 800edca:	2302      	movs	r3, #2
 800edcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800edd0:	e019      	b.n	800ee06 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	899b      	ldrh	r3, [r3, #12]
 800edd6:	461a      	mov	r2, r3
 800edd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edda:	fbb3 f2f2 	udiv	r2, r3, r2
 800edde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede0:	441a      	add	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	7858      	ldrb	r0, [r3, #1]
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6a1a      	ldr	r2, [r3, #32]
 800edf4:	2301      	movs	r3, #1
 800edf6:	f7fd fc69 	bl	800c6cc <disk_read>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <f_open+0x37e>
 800ee00:	2301      	movs	r3, #1
 800ee02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ee06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <f_open+0x38c>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3768      	adds	r7, #104	; 0x68
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08c      	sub	sp, #48	; 0x30
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f107 0210 	add.w	r2, r7, #16
 800ee3e:	4611      	mov	r1, r2
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff fda5 	bl	800e990 <validate>
 800ee46:	4603      	mov	r3, r0
 800ee48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d107      	bne.n	800ee64 <f_write+0x44>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	7d5b      	ldrb	r3, [r3, #21]
 800ee58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <f_write+0x4a>
 800ee64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee68:	e16a      	b.n	800f140 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	7d1b      	ldrb	r3, [r3, #20]
 800ee6e:	f003 0302 	and.w	r3, r3, #2
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <f_write+0x5a>
 800ee76:	2307      	movs	r3, #7
 800ee78:	e162      	b.n	800f140 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	699a      	ldr	r2, [r3, #24]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	441a      	add	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	699b      	ldr	r3, [r3, #24]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	f080 814c 	bcs.w	800f124 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	43db      	mvns	r3, r3
 800ee92:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee94:	e146      	b.n	800f124 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	693a      	ldr	r2, [r7, #16]
 800ee9c:	8992      	ldrh	r2, [r2, #12]
 800ee9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800eea2:	fb01 f202 	mul.w	r2, r1, r2
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f040 80f1 	bne.w	800f090 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	8992      	ldrh	r2, [r2, #12]
 800eeb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	8952      	ldrh	r2, [r2, #10]
 800eebe:	3a01      	subs	r2, #1
 800eec0:	4013      	ands	r3, r2
 800eec2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d143      	bne.n	800ef52 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10c      	bne.n	800eeec <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d11a      	bne.n	800ef14 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2100      	movs	r1, #0
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fe fa10 	bl	800d308 <create_chain>
 800eee8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeea:	e013      	b.n	800ef14 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d007      	beq.n	800ef04 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	4619      	mov	r1, r3
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f7fe fa9c 	bl	800d438 <clmt_clust>
 800ef00:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef02:	e007      	b.n	800ef14 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	69db      	ldr	r3, [r3, #28]
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	f7fe f9fb 	bl	800d308 <create_chain>
 800ef12:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 8109 	beq.w	800f12e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d104      	bne.n	800ef2c <f_write+0x10c>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2202      	movs	r2, #2
 800ef26:	755a      	strb	r2, [r3, #21]
 800ef28:	2302      	movs	r3, #2
 800ef2a:	e109      	b.n	800f140 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef32:	d104      	bne.n	800ef3e <f_write+0x11e>
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2201      	movs	r2, #1
 800ef38:	755a      	strb	r2, [r3, #21]
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e100      	b.n	800f140 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef42:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d102      	bne.n	800ef52 <f_write+0x132>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef50:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
 800ef56:	b25b      	sxtb	r3, r3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	da18      	bge.n	800ef8e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	7858      	ldrb	r0, [r3, #1]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6a1a      	ldr	r2, [r3, #32]
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	f7fd fbce 	bl	800c70c <disk_write>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d004      	beq.n	800ef80 <f_write+0x160>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	755a      	strb	r2, [r3, #21]
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e0df      	b.n	800f140 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	7d1b      	ldrb	r3, [r3, #20]
 800ef84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	69db      	ldr	r3, [r3, #28]
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f7fd ff44 	bl	800ce24 <clust2sect>
 800ef9c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d104      	bne.n	800efae <f_write+0x18e>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2202      	movs	r2, #2
 800efa8:	755a      	strb	r2, [r3, #21]
 800efaa:	2302      	movs	r3, #2
 800efac:	e0c8      	b.n	800f140 <f_write+0x320>
			sect += csect;
 800efae:	697a      	ldr	r2, [r7, #20]
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	4413      	add	r3, r2
 800efb4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	899b      	ldrh	r3, [r3, #12]
 800efba:	461a      	mov	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800efc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d043      	beq.n	800f052 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	6a3b      	ldr	r3, [r7, #32]
 800efce:	4413      	add	r3, r2
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	8952      	ldrh	r2, [r2, #10]
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d905      	bls.n	800efe4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	895b      	ldrh	r3, [r3, #10]
 800efdc:	461a      	mov	r2, r3
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	7858      	ldrb	r0, [r3, #1]
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	697a      	ldr	r2, [r7, #20]
 800efec:	69f9      	ldr	r1, [r7, #28]
 800efee:	f7fd fb8d 	bl	800c70c <disk_write>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d004      	beq.n	800f002 <f_write+0x1e2>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2201      	movs	r2, #1
 800effc:	755a      	strb	r2, [r3, #21]
 800effe:	2301      	movs	r3, #1
 800f000:	e09e      	b.n	800f140 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6a1a      	ldr	r2, [r3, #32]
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	6a3a      	ldr	r2, [r7, #32]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d918      	bls.n	800f042 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6a1a      	ldr	r2, [r3, #32]
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	8992      	ldrh	r2, [r2, #12]
 800f022:	fb02 f303 	mul.w	r3, r2, r3
 800f026:	69fa      	ldr	r2, [r7, #28]
 800f028:	18d1      	adds	r1, r2, r3
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	899b      	ldrh	r3, [r3, #12]
 800f02e:	461a      	mov	r2, r3
 800f030:	f7fd fc2c 	bl	800c88c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	7d1b      	ldrb	r3, [r3, #20]
 800f038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	461a      	mov	r2, r3
 800f048:	6a3b      	ldr	r3, [r7, #32]
 800f04a:	fb02 f303 	mul.w	r3, r2, r3
 800f04e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f050:	e04b      	b.n	800f0ea <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d016      	beq.n	800f08a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	699a      	ldr	r2, [r3, #24]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f064:	429a      	cmp	r2, r3
 800f066:	d210      	bcs.n	800f08a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	7858      	ldrb	r0, [r3, #1]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f072:	2301      	movs	r3, #1
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	f7fd fb29 	bl	800c6cc <disk_read>
 800f07a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d004      	beq.n	800f08a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2201      	movs	r2, #1
 800f084:	755a      	strb	r2, [r3, #21]
 800f086:	2301      	movs	r3, #1
 800f088:	e05a      	b.n	800f140 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	899b      	ldrh	r3, [r3, #12]
 800f094:	4618      	mov	r0, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	8992      	ldrh	r2, [r2, #12]
 800f09e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0a2:	fb01 f202 	mul.w	r2, r1, r2
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	1ac3      	subs	r3, r0, r3
 800f0aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d901      	bls.n	800f0b8 <f_write+0x298>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	699b      	ldr	r3, [r3, #24]
 800f0c2:	693a      	ldr	r2, [r7, #16]
 800f0c4:	8992      	ldrh	r2, [r2, #12]
 800f0c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0ca:	fb00 f202 	mul.w	r2, r0, r2
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	440b      	add	r3, r1
 800f0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d4:	69f9      	ldr	r1, [r7, #28]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fd fbd8 	bl	800c88c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
 800f0e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0e4:	b2da      	uxtb	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f0ea:	69fa      	ldr	r2, [r7, #28]
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ee:	4413      	add	r3, r2
 800f0f0:	61fb      	str	r3, [r7, #28]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	699a      	ldr	r2, [r3, #24]
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	441a      	add	r2, r3
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	619a      	str	r2, [r3, #24]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68da      	ldr	r2, [r3, #12]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	429a      	cmp	r2, r3
 800f108:	bf38      	it	cc
 800f10a:	461a      	movcc	r2, r3
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	60da      	str	r2, [r3, #12]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	441a      	add	r2, r3
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	601a      	str	r2, [r3, #0]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	f47f aeb5 	bne.w	800ee96 <f_write+0x76>
 800f12c:	e000      	b.n	800f130 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f12e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f13e:	2300      	movs	r3, #0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3730      	adds	r7, #48	; 0x30
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f107 0208 	add.w	r2, r7, #8
 800f156:	4611      	mov	r1, r2
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff fc19 	bl	800e990 <validate>
 800f15e:	4603      	mov	r3, r0
 800f160:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f162:	7dfb      	ldrb	r3, [r7, #23]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d168      	bne.n	800f23a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7d1b      	ldrb	r3, [r3, #20]
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d062      	beq.n	800f23a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	7d1b      	ldrb	r3, [r3, #20]
 800f178:	b25b      	sxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da15      	bge.n	800f1aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	7858      	ldrb	r0, [r3, #1]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6a1a      	ldr	r2, [r3, #32]
 800f18c:	2301      	movs	r3, #1
 800f18e:	f7fd fabd 	bl	800c70c <disk_write>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <f_sync+0x54>
 800f198:	2301      	movs	r3, #1
 800f19a:	e04f      	b.n	800f23c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	7d1b      	ldrb	r3, [r3, #20]
 800f1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1a4:	b2da      	uxtb	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f1aa:	f7fd f9ed 	bl	800c588 <get_fattime>
 800f1ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	f7fd fd95 	bl	800cce8 <move_window>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d138      	bne.n	800f23a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	330b      	adds	r3, #11
 800f1d2:	781a      	ldrb	r2, [r3, #0]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	330b      	adds	r3, #11
 800f1d8:	f042 0220 	orr.w	r2, r2, #32
 800f1dc:	b2d2      	uxtb	r2, r2
 800f1de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	68f9      	ldr	r1, [r7, #12]
 800f1ec:	f7fe fb21 	bl	800d832 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f103 021c 	add.w	r2, r3, #28
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7fd fb19 	bl	800c834 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	3316      	adds	r3, #22
 800f206:	6939      	ldr	r1, [r7, #16]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd fb13 	bl	800c834 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	3312      	adds	r3, #18
 800f212:	2100      	movs	r1, #0
 800f214:	4618      	mov	r0, r3
 800f216:	f7fd faf2 	bl	800c7fe <st_word>
					fs->wflag = 1;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2201      	movs	r2, #1
 800f21e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	4618      	mov	r0, r3
 800f224:	f7fd fd8e 	bl	800cd44 <sync_fs>
 800f228:	4603      	mov	r3, r0
 800f22a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	7d1b      	ldrb	r3, [r3, #20]
 800f230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f234:	b2da      	uxtb	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff ff7b 	bl	800f148 <f_sync>
 800f252:	4603      	mov	r3, r0
 800f254:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d118      	bne.n	800f28e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f107 0208 	add.w	r2, r7, #8
 800f262:	4611      	mov	r1, r2
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff fb93 	bl	800e990 <validate>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10c      	bne.n	800f28e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fd fc91 	bl	800cba0 <dec_lock>
 800f27e:	4603      	mov	r3, r0
 800f280:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d102      	bne.n	800f28e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b090      	sub	sp, #64	; 0x40
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f107 0208 	add.w	r2, r7, #8
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff fb70 	bl	800e990 <validate>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f2b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d103      	bne.n	800f2c6 <f_lseek+0x2e>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	7d5b      	ldrb	r3, [r3, #21]
 800f2c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f2c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d002      	beq.n	800f2d4 <f_lseek+0x3c>
 800f2ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f2d2:	e201      	b.n	800f6d8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f000 80d9 	beq.w	800f490 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e4:	d15a      	bne.n	800f39c <f_lseek+0x104>
			tbl = fp->cltbl;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	1d1a      	adds	r2, r3, #4
 800f2f0:	627a      	str	r2, [r7, #36]	; 0x24
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	617b      	str	r3, [r7, #20]
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f302:	2b00      	cmp	r3, #0
 800f304:	d03a      	beq.n	800f37c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	613b      	str	r3, [r7, #16]
 800f30a:	2300      	movs	r3, #0
 800f30c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	3302      	adds	r3, #2
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	3301      	adds	r3, #1
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd fd9d 	bl	800ce62 <get_fat>
 800f328:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d804      	bhi.n	800f33a <f_lseek+0xa2>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2202      	movs	r2, #2
 800f334:	755a      	strb	r2, [r3, #21]
 800f336:	2302      	movs	r3, #2
 800f338:	e1ce      	b.n	800f6d8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f340:	d104      	bne.n	800f34c <f_lseek+0xb4>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2201      	movs	r2, #1
 800f346:	755a      	strb	r2, [r3, #21]
 800f348:	2301      	movs	r3, #1
 800f34a:	e1c5      	b.n	800f6d8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3301      	adds	r3, #1
 800f350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f352:	429a      	cmp	r2, r3
 800f354:	d0de      	beq.n	800f314 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d809      	bhi.n	800f372 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	627a      	str	r2, [r7, #36]	; 0x24
 800f364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	627a      	str	r2, [r7, #36]	; 0x24
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f378:	429a      	cmp	r2, r3
 800f37a:	d3c4      	bcc.n	800f306 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f382:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d803      	bhi.n	800f394 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38e:	2200      	movs	r2, #0
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	e19f      	b.n	800f6d4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f394:	2311      	movs	r3, #17
 800f396:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f39a:	e19b      	b.n	800f6d4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d902      	bls.n	800f3ac <f_lseek+0x114>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 818d 	beq.w	800f6d4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f7fe f839 	bl	800d438 <clmt_clust>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	69db      	ldr	r3, [r3, #28]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	f7fd fd25 	bl	800ce24 <clust2sect>
 800f3da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d104      	bne.n	800f3ec <f_lseek+0x154>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	755a      	strb	r2, [r3, #21]
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	e175      	b.n	800f6d8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	8992      	ldrh	r2, [r2, #12]
 800f3f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	8952      	ldrh	r2, [r2, #10]
 800f3fc:	3a01      	subs	r2, #1
 800f3fe:	4013      	ands	r3, r2
 800f400:	69ba      	ldr	r2, [r7, #24]
 800f402:	4413      	add	r3, r2
 800f404:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	699b      	ldr	r3, [r3, #24]
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	8992      	ldrh	r2, [r2, #12]
 800f40e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f412:	fb01 f202 	mul.w	r2, r1, r2
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f000 815b 	beq.w	800f6d4 <f_lseek+0x43c>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6a1b      	ldr	r3, [r3, #32]
 800f422:	69ba      	ldr	r2, [r7, #24]
 800f424:	429a      	cmp	r2, r3
 800f426:	f000 8155 	beq.w	800f6d4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	b25b      	sxtb	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	da18      	bge.n	800f466 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	7858      	ldrb	r0, [r3, #1]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1a      	ldr	r2, [r3, #32]
 800f442:	2301      	movs	r3, #1
 800f444:	f7fd f962 	bl	800c70c <disk_write>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d004      	beq.n	800f458 <f_lseek+0x1c0>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	755a      	strb	r2, [r3, #21]
 800f454:	2301      	movs	r3, #1
 800f456:	e13f      	b.n	800f6d8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	7d1b      	ldrb	r3, [r3, #20]
 800f45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f460:	b2da      	uxtb	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	7858      	ldrb	r0, [r3, #1]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f470:	2301      	movs	r3, #1
 800f472:	69ba      	ldr	r2, [r7, #24]
 800f474:	f7fd f92a 	bl	800c6cc <disk_read>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d004      	beq.n	800f488 <f_lseek+0x1f0>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2201      	movs	r2, #1
 800f482:	755a      	strb	r2, [r3, #21]
 800f484:	2301      	movs	r3, #1
 800f486:	e127      	b.n	800f6d8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	69ba      	ldr	r2, [r7, #24]
 800f48c:	621a      	str	r2, [r3, #32]
 800f48e:	e121      	b.n	800f6d4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	429a      	cmp	r2, r3
 800f498:	d908      	bls.n	800f4ac <f_lseek+0x214>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	7d1b      	ldrb	r3, [r3, #20]
 800f49e:	f003 0302 	and.w	r3, r3, #2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d102      	bne.n	800f4ac <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4ba:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f000 80b5 	beq.w	800f62e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	899b      	ldrh	r3, [r3, #12]
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d01b      	beq.n	800f512 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	1e5a      	subs	r2, r3, #1
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800f4e4:	6a3b      	ldr	r3, [r7, #32]
 800f4e6:	1e59      	subs	r1, r3, #1
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d30f      	bcc.n	800f512 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	1e5a      	subs	r2, r3, #1
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	425b      	negs	r3, r3
 800f4fa:	401a      	ands	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	69db      	ldr	r3, [r3, #28]
 800f50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f510:	e022      	b.n	800f558 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d119      	bne.n	800f552 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2100      	movs	r1, #0
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fef0 	bl	800d308 <create_chain>
 800f528:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d104      	bne.n	800f53a <f_lseek+0x2a2>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2202      	movs	r2, #2
 800f534:	755a      	strb	r2, [r3, #21]
 800f536:	2302      	movs	r3, #2
 800f538:	e0ce      	b.n	800f6d8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f540:	d104      	bne.n	800f54c <f_lseek+0x2b4>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2201      	movs	r2, #1
 800f546:	755a      	strb	r2, [r3, #21]
 800f548:	2301      	movs	r3, #1
 800f54a:	e0c5      	b.n	800f6d8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f550:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f556:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d067      	beq.n	800f62e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f55e:	e03a      	b.n	800f5d6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	603b      	str	r3, [r7, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	699a      	ldr	r2, [r3, #24]
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	441a      	add	r2, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	7d1b      	ldrb	r3, [r3, #20]
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00b      	beq.n	800f598 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f584:	4618      	mov	r0, r3
 800f586:	f7fd febf 	bl	800d308 <create_chain>
 800f58a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d108      	bne.n	800f5a4 <f_lseek+0x30c>
							ofs = 0; break;
 800f592:	2300      	movs	r3, #0
 800f594:	603b      	str	r3, [r7, #0]
 800f596:	e022      	b.n	800f5de <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fd fc60 	bl	800ce62 <get_fat>
 800f5a2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d104      	bne.n	800f5b6 <f_lseek+0x31e>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	755a      	strb	r2, [r3, #21]
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e090      	b.n	800f6d8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d904      	bls.n	800f5c6 <f_lseek+0x32e>
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d304      	bcc.n	800f5d0 <f_lseek+0x338>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2202      	movs	r2, #2
 800f5ca:	755a      	strb	r2, [r3, #21]
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	e083      	b.n	800f6d8 <f_lseek+0x440>
					fp->clust = clst;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5d4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d8c0      	bhi.n	800f560 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	699a      	ldr	r2, [r3, #24]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	441a      	add	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	899b      	ldrh	r3, [r3, #12]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5f6:	fb01 f202 	mul.w	r2, r1, r2
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d016      	beq.n	800f62e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd fc0d 	bl	800ce24 <clust2sect>
 800f60a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d104      	bne.n	800f61c <f_lseek+0x384>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2202      	movs	r2, #2
 800f616:	755a      	strb	r2, [r3, #21]
 800f618:	2302      	movs	r3, #2
 800f61a:	e05d      	b.n	800f6d8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	899b      	ldrh	r3, [r3, #12]
 800f620:	461a      	mov	r2, r3
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	fbb3 f3f2 	udiv	r3, r3, r2
 800f628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f62a:	4413      	add	r3, r2
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	699a      	ldr	r2, [r3, #24]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	429a      	cmp	r2, r3
 800f638:	d90a      	bls.n	800f650 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	699a      	ldr	r2, [r3, #24]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	7d1b      	ldrb	r3, [r3, #20]
 800f646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	8992      	ldrh	r2, [r2, #12]
 800f658:	fbb3 f1f2 	udiv	r1, r3, r2
 800f65c:	fb01 f202 	mul.w	r2, r1, r2
 800f660:	1a9b      	subs	r3, r3, r2
 800f662:	2b00      	cmp	r3, #0
 800f664:	d036      	beq.n	800f6d4 <f_lseek+0x43c>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6a1b      	ldr	r3, [r3, #32]
 800f66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d031      	beq.n	800f6d4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	7d1b      	ldrb	r3, [r3, #20]
 800f674:	b25b      	sxtb	r3, r3
 800f676:	2b00      	cmp	r3, #0
 800f678:	da18      	bge.n	800f6ac <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	7858      	ldrb	r0, [r3, #1]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a1a      	ldr	r2, [r3, #32]
 800f688:	2301      	movs	r3, #1
 800f68a:	f7fd f83f 	bl	800c70c <disk_write>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d004      	beq.n	800f69e <f_lseek+0x406>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	755a      	strb	r2, [r3, #21]
 800f69a:	2301      	movs	r3, #1
 800f69c:	e01c      	b.n	800f6d8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7d1b      	ldrb	r3, [r3, #20]
 800f6a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	7858      	ldrb	r0, [r3, #1]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6ba:	f7fd f807 	bl	800c6cc <disk_read>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d004      	beq.n	800f6ce <f_lseek+0x436>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	755a      	strb	r2, [r3, #21]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e004      	b.n	800f6d8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6d2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f6d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3740      	adds	r7, #64	; 0x40
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b087      	sub	sp, #28
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f6f6:	4b1f      	ldr	r3, [pc, #124]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f6f8:	7a5b      	ldrb	r3, [r3, #9]
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d131      	bne.n	800f764 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f700:	4b1c      	ldr	r3, [pc, #112]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f702:	7a5b      	ldrb	r3, [r3, #9]
 800f704:	b2db      	uxtb	r3, r3
 800f706:	461a      	mov	r2, r3
 800f708:	4b1a      	ldr	r3, [pc, #104]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f70a:	2100      	movs	r1, #0
 800f70c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f70e:	4b19      	ldr	r3, [pc, #100]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f710:	7a5b      	ldrb	r3, [r3, #9]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	4a17      	ldr	r2, [pc, #92]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4413      	add	r3, r2
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f71e:	4b15      	ldr	r3, [pc, #84]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f720:	7a5b      	ldrb	r3, [r3, #9]
 800f722:	b2db      	uxtb	r3, r3
 800f724:	461a      	mov	r2, r3
 800f726:	4b13      	ldr	r3, [pc, #76]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f728:	4413      	add	r3, r2
 800f72a:	79fa      	ldrb	r2, [r7, #7]
 800f72c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f72e:	4b11      	ldr	r3, [pc, #68]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f730:	7a5b      	ldrb	r3, [r3, #9]
 800f732:	b2db      	uxtb	r3, r3
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	b2d1      	uxtb	r1, r2
 800f738:	4a0e      	ldr	r2, [pc, #56]	; (800f774 <FATFS_LinkDriverEx+0x94>)
 800f73a:	7251      	strb	r1, [r2, #9]
 800f73c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f73e:	7dbb      	ldrb	r3, [r7, #22]
 800f740:	3330      	adds	r3, #48	; 0x30
 800f742:	b2da      	uxtb	r2, r3
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	3301      	adds	r3, #1
 800f74c:	223a      	movs	r2, #58	; 0x3a
 800f74e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	3302      	adds	r3, #2
 800f754:	222f      	movs	r2, #47	; 0x2f
 800f756:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	3303      	adds	r3, #3
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	371c      	adds	r7, #28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	2001d4f8 	.word	0x2001d4f8

0800f778 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f782:	2200      	movs	r2, #0
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff ffaa 	bl	800f6e0 <FATFS_LinkDriverEx>
 800f78c:	4603      	mov	r3, r0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
	...

0800f798 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f7a8:	d802      	bhi.n	800f7b0 <ff_convert+0x18>
		c = chr;
 800f7aa:	88fb      	ldrh	r3, [r7, #6]
 800f7ac:	81fb      	strh	r3, [r7, #14]
 800f7ae:	e025      	b.n	800f7fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00b      	beq.n	800f7ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f7b6:	88fb      	ldrh	r3, [r7, #6]
 800f7b8:	2bff      	cmp	r3, #255	; 0xff
 800f7ba:	d805      	bhi.n	800f7c8 <ff_convert+0x30>
 800f7bc:	88fb      	ldrh	r3, [r7, #6]
 800f7be:	3b80      	subs	r3, #128	; 0x80
 800f7c0:	4a12      	ldr	r2, [pc, #72]	; (800f80c <ff_convert+0x74>)
 800f7c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7c6:	e000      	b.n	800f7ca <ff_convert+0x32>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	81fb      	strh	r3, [r7, #14]
 800f7cc:	e016      	b.n	800f7fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	81fb      	strh	r3, [r7, #14]
 800f7d2:	e009      	b.n	800f7e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f7d4:	89fb      	ldrh	r3, [r7, #14]
 800f7d6:	4a0d      	ldr	r2, [pc, #52]	; (800f80c <ff_convert+0x74>)
 800f7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7dc:	88fa      	ldrh	r2, [r7, #6]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d006      	beq.n	800f7f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f7e2:	89fb      	ldrh	r3, [r7, #14]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	81fb      	strh	r3, [r7, #14]
 800f7e8:	89fb      	ldrh	r3, [r7, #14]
 800f7ea:	2b7f      	cmp	r3, #127	; 0x7f
 800f7ec:	d9f2      	bls.n	800f7d4 <ff_convert+0x3c>
 800f7ee:	e000      	b.n	800f7f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f7f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f7f2:	89fb      	ldrh	r3, [r7, #14]
 800f7f4:	3380      	adds	r3, #128	; 0x80
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f7fc:	89fb      	ldrh	r3, [r7, #14]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	080141fc 	.word	0x080141fc

0800f810 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f81a:	88fb      	ldrh	r3, [r7, #6]
 800f81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f820:	d201      	bcs.n	800f826 <ff_wtoupper+0x16>
 800f822:	4b3e      	ldr	r3, [pc, #248]	; (800f91c <ff_wtoupper+0x10c>)
 800f824:	e000      	b.n	800f828 <ff_wtoupper+0x18>
 800f826:	4b3e      	ldr	r3, [pc, #248]	; (800f920 <ff_wtoupper+0x110>)
 800f828:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	1c9a      	adds	r2, r3, #2
 800f82e:	617a      	str	r2, [r7, #20]
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f834:	8a7b      	ldrh	r3, [r7, #18]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d068      	beq.n	800f90c <ff_wtoupper+0xfc>
 800f83a:	88fa      	ldrh	r2, [r7, #6]
 800f83c:	8a7b      	ldrh	r3, [r7, #18]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d364      	bcc.n	800f90c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	1c9a      	adds	r2, r3, #2
 800f846:	617a      	str	r2, [r7, #20]
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	823b      	strh	r3, [r7, #16]
 800f84c:	8a3b      	ldrh	r3, [r7, #16]
 800f84e:	0a1b      	lsrs	r3, r3, #8
 800f850:	81fb      	strh	r3, [r7, #14]
 800f852:	8a3b      	ldrh	r3, [r7, #16]
 800f854:	b2db      	uxtb	r3, r3
 800f856:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f858:	88fa      	ldrh	r2, [r7, #6]
 800f85a:	8a79      	ldrh	r1, [r7, #18]
 800f85c:	8a3b      	ldrh	r3, [r7, #16]
 800f85e:	440b      	add	r3, r1
 800f860:	429a      	cmp	r2, r3
 800f862:	da49      	bge.n	800f8f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f864:	89fb      	ldrh	r3, [r7, #14]
 800f866:	2b08      	cmp	r3, #8
 800f868:	d84f      	bhi.n	800f90a <ff_wtoupper+0xfa>
 800f86a:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <ff_wtoupper+0x60>)
 800f86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f870:	0800f895 	.word	0x0800f895
 800f874:	0800f8a7 	.word	0x0800f8a7
 800f878:	0800f8bd 	.word	0x0800f8bd
 800f87c:	0800f8c5 	.word	0x0800f8c5
 800f880:	0800f8cd 	.word	0x0800f8cd
 800f884:	0800f8d5 	.word	0x0800f8d5
 800f888:	0800f8dd 	.word	0x0800f8dd
 800f88c:	0800f8e5 	.word	0x0800f8e5
 800f890:	0800f8ed 	.word	0x0800f8ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f894:	88fa      	ldrh	r2, [r7, #6]
 800f896:	8a7b      	ldrh	r3, [r7, #18]
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	005b      	lsls	r3, r3, #1
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	4413      	add	r3, r2
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	80fb      	strh	r3, [r7, #6]
 800f8a4:	e027      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f8a6:	88fa      	ldrh	r2, [r7, #6]
 800f8a8:	8a7b      	ldrh	r3, [r7, #18]
 800f8aa:	1ad3      	subs	r3, r2, r3
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	f003 0301 	and.w	r3, r3, #1
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	88fa      	ldrh	r2, [r7, #6]
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	80fb      	strh	r3, [r7, #6]
 800f8ba:	e01c      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f8bc:	88fb      	ldrh	r3, [r7, #6]
 800f8be:	3b10      	subs	r3, #16
 800f8c0:	80fb      	strh	r3, [r7, #6]
 800f8c2:	e018      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f8c4:	88fb      	ldrh	r3, [r7, #6]
 800f8c6:	3b20      	subs	r3, #32
 800f8c8:	80fb      	strh	r3, [r7, #6]
 800f8ca:	e014      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f8cc:	88fb      	ldrh	r3, [r7, #6]
 800f8ce:	3b30      	subs	r3, #48	; 0x30
 800f8d0:	80fb      	strh	r3, [r7, #6]
 800f8d2:	e010      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f8d4:	88fb      	ldrh	r3, [r7, #6]
 800f8d6:	3b1a      	subs	r3, #26
 800f8d8:	80fb      	strh	r3, [r7, #6]
 800f8da:	e00c      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f8dc:	88fb      	ldrh	r3, [r7, #6]
 800f8de:	3308      	adds	r3, #8
 800f8e0:	80fb      	strh	r3, [r7, #6]
 800f8e2:	e008      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f8e4:	88fb      	ldrh	r3, [r7, #6]
 800f8e6:	3b50      	subs	r3, #80	; 0x50
 800f8e8:	80fb      	strh	r3, [r7, #6]
 800f8ea:	e004      	b.n	800f8f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f8ec:	88fb      	ldrh	r3, [r7, #6]
 800f8ee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f8f2:	80fb      	strh	r3, [r7, #6]
 800f8f4:	bf00      	nop
			}
			break;
 800f8f6:	e008      	b.n	800f90a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f8f8:	89fb      	ldrh	r3, [r7, #14]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d195      	bne.n	800f82a <ff_wtoupper+0x1a>
 800f8fe:	8a3b      	ldrh	r3, [r7, #16]
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	4413      	add	r3, r2
 800f906:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f908:	e78f      	b.n	800f82a <ff_wtoupper+0x1a>
			break;
 800f90a:	bf00      	nop
	}

	return chr;
 800f90c:	88fb      	ldrh	r3, [r7, #6]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	371c      	adds	r7, #28
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	080142fc 	.word	0x080142fc
 800f920:	080144f0 	.word	0x080144f0

0800f924 <arm_biquad_cascade_df1_init_f32>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4615      	mov	r5, r2
 800f928:	460a      	mov	r2, r1
 800f92a:	4604      	mov	r4, r0
 800f92c:	2100      	movs	r1, #0
 800f92e:	6002      	str	r2, [r0, #0]
 800f930:	0112      	lsls	r2, r2, #4
 800f932:	6085      	str	r5, [r0, #8]
 800f934:	4618      	mov	r0, r3
 800f936:	f000 fe88 	bl	801064a <memset>
 800f93a:	6060      	str	r0, [r4, #4]
 800f93c:	bd38      	pop	{r3, r4, r5, pc}
 800f93e:	bf00      	nop

0800f940 <arm_biquad_cascade_df1_f32>:
 800f940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f944:	4694      	mov	ip, r2
 800f946:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800f94a:	f003 0203 	and.w	r2, r3, #3
 800f94e:	6807      	ldr	r7, [r0, #0]
 800f950:	ea4f 190e 	mov.w	r9, lr, lsl #4
 800f954:	eb0c 180e 	add.w	r8, ip, lr, lsl #4
 800f958:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 800f95c:	3614      	adds	r6, #20
 800f95e:	3510      	adds	r5, #16
 800f960:	ed56 3a05 	vldr	s7, [r6, #-20]	; 0xffffffec
 800f964:	ed56 1a04 	vldr	s3, [r6, #-16]
 800f968:	ed16 2a03 	vldr	s4, [r6, #-12]
 800f96c:	ed56 2a02 	vldr	s5, [r6, #-8]
 800f970:	ed16 3a01 	vldr	s6, [r6, #-4]
 800f974:	ed15 4a04 	vldr	s8, [r5, #-16]
 800f978:	ed15 5a03 	vldr	s10, [r5, #-12]
 800f97c:	ed15 7a02 	vldr	s14, [r5, #-8]
 800f980:	ed55 7a01 	vldr	s15, [r5, #-4]
 800f984:	f1be 0f00 	cmp.w	lr, #0
 800f988:	f000 80cf 	beq.w	800fb2a <arm_biquad_cascade_df1_f32+0x1ea>
 800f98c:	f101 0010 	add.w	r0, r1, #16
 800f990:	f10c 0310 	add.w	r3, ip, #16
 800f994:	4674      	mov	r4, lr
 800f996:	ed50 5a04 	vldr	s11, [r0, #-16]
 800f99a:	ee61 4a84 	vmul.f32	s9, s3, s8
 800f99e:	ee22 5a05 	vmul.f32	s10, s4, s10
 800f9a2:	3c01      	subs	r4, #1
 800f9a4:	ee63 6aa5 	vmul.f32	s13, s7, s11
 800f9a8:	f100 0010 	add.w	r0, r0, #16
 800f9ac:	ee22 6a87 	vmul.f32	s12, s5, s14
 800f9b0:	f103 0310 	add.w	r3, r3, #16
 800f9b4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800f9b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f9bc:	ee21 0aa5 	vmul.f32	s0, s3, s11
 800f9c0:	ee22 1a04 	vmul.f32	s2, s4, s8
 800f9c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f9c8:	ee23 5a07 	vmul.f32	s10, s6, s14
 800f9cc:	ee22 4a25 	vmul.f32	s8, s4, s11
 800f9d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f9d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9d8:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800f9dc:	ee62 5aa7 	vmul.f32	s11, s5, s15
 800f9e0:	ed10 6a07 	vldr	s12, [r0, #-28]	; 0xffffffe4
 800f9e4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800f9e8:	ee63 6a86 	vmul.f32	s13, s7, s12
 800f9ec:	ee61 0a86 	vmul.f32	s1, s3, s12
 800f9f0:	ee62 4a06 	vmul.f32	s9, s4, s12
 800f9f4:	ee36 7a80 	vadd.f32	s14, s13, s0
 800f9f8:	ee37 7a01 	vadd.f32	s14, s14, s2
 800f9fc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fa00:	ee37 7a05 	vadd.f32	s14, s14, s10
 800fa04:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
 800fa08:	ee62 6a87 	vmul.f32	s13, s5, s14
 800fa0c:	ed10 5a06 	vldr	s10, [r0, #-24]	; 0xffffffe8
 800fa10:	ee23 7a07 	vmul.f32	s14, s6, s14
 800fa14:	ee63 5a85 	vmul.f32	s11, s7, s10
 800fa18:	ee21 1a85 	vmul.f32	s2, s3, s10
 800fa1c:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800fa20:	ee75 5a84 	vadd.f32	s11, s11, s8
 800fa24:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800fa28:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800fa2c:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800fa30:	ee62 6aa7 	vmul.f32	s13, s5, s15
 800fa34:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800fa38:	ee23 6a84 	vmul.f32	s12, s7, s8
 800fa3c:	ee36 6a01 	vadd.f32	s12, s12, s2
 800fa40:	ee36 6a24 	vadd.f32	s12, s12, s9
 800fa44:	ee36 6a26 	vadd.f32	s12, s12, s13
 800fa48:	ee36 7a07 	vadd.f32	s14, s12, s14
 800fa4c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800fa50:	d1a1      	bne.n	800f996 <arm_biquad_cascade_df1_f32+0x56>
 800fa52:	4449      	add	r1, r9
 800fa54:	4643      	mov	r3, r8
 800fa56:	2a00      	cmp	r2, #0
 800fa58:	d045      	beq.n	800fae6 <arm_biquad_cascade_df1_f32+0x1a6>
 800fa5a:	edd1 6a00 	vldr	s13, [r1]
 800fa5e:	ee61 5a84 	vmul.f32	s11, s3, s8
 800fa62:	ee22 5a05 	vmul.f32	s10, s4, s10
 800fa66:	2a01      	cmp	r2, #1
 800fa68:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800fa6c:	ee22 6a87 	vmul.f32	s12, s5, s14
 800fa70:	ee63 7a27 	vmul.f32	s15, s6, s15
 800fa74:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800fa78:	ee35 5a85 	vadd.f32	s10, s11, s10
 800fa7c:	ee35 6a06 	vadd.f32	s12, s10, s12
 800fa80:	ee36 6a27 	vadd.f32	s12, s12, s15
 800fa84:	ed83 6a00 	vstr	s12, [r3]
 800fa88:	d03d      	beq.n	800fb06 <arm_biquad_cascade_df1_f32+0x1c6>
 800fa8a:	ed91 5a01 	vldr	s10, [r1, #4]
 800fa8e:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800fa92:	ee22 4a04 	vmul.f32	s8, s4, s8
 800fa96:	2a02      	cmp	r2, #2
 800fa98:	ee65 4a23 	vmul.f32	s9, s10, s7
 800fa9c:	ee62 7a86 	vmul.f32	s15, s5, s12
 800faa0:	ee23 7a07 	vmul.f32	s14, s6, s14
 800faa4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800faa8:	ee35 4a84 	vadd.f32	s8, s11, s8
 800faac:	ee74 7a27 	vadd.f32	s15, s8, s15
 800fab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fab4:	edc3 7a01 	vstr	s15, [r3, #4]
 800fab8:	d02e      	beq.n	800fb18 <arm_biquad_cascade_df1_f32+0x1d8>
 800faba:	ed91 4a02 	vldr	s8, [r1, #8]
 800fabe:	ee22 2a26 	vmul.f32	s4, s4, s13
 800fac2:	ee65 1a21 	vmul.f32	s3, s10, s3
 800fac6:	ee63 6a84 	vmul.f32	s13, s7, s8
 800faca:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800face:	ee23 3a06 	vmul.f32	s6, s6, s12
 800fad2:	ee76 6aa1 	vadd.f32	s13, s13, s3
 800fad6:	ee76 6a82 	vadd.f32	s13, s13, s4
 800fada:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800fade:	ee36 7a83 	vadd.f32	s14, s13, s6
 800fae2:	ed83 7a02 	vstr	s14, [r3, #8]
 800fae6:	3f01      	subs	r7, #1
 800fae8:	ed05 4a04 	vstr	s8, [r5, #-16]
 800faec:	ed05 5a03 	vstr	s10, [r5, #-12]
 800faf0:	f106 0614 	add.w	r6, r6, #20
 800faf4:	ed05 7a02 	vstr	s14, [r5, #-8]
 800faf8:	f105 0510 	add.w	r5, r5, #16
 800fafc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800fb00:	d015      	beq.n	800fb2e <arm_biquad_cascade_df1_f32+0x1ee>
 800fb02:	4661      	mov	r1, ip
 800fb04:	e72c      	b.n	800f960 <arm_biquad_cascade_df1_f32+0x20>
 800fb06:	eef0 7a47 	vmov.f32	s15, s14
 800fb0a:	eeb0 5a44 	vmov.f32	s10, s8
 800fb0e:	eeb0 7a46 	vmov.f32	s14, s12
 800fb12:	eeb0 4a66 	vmov.f32	s8, s13
 800fb16:	e7e6      	b.n	800fae6 <arm_biquad_cascade_df1_f32+0x1a6>
 800fb18:	eeb0 7a67 	vmov.f32	s14, s15
 800fb1c:	eeb0 4a45 	vmov.f32	s8, s10
 800fb20:	eef0 7a46 	vmov.f32	s15, s12
 800fb24:	eeb0 5a66 	vmov.f32	s10, s13
 800fb28:	e7dd      	b.n	800fae6 <arm_biquad_cascade_df1_f32+0x1a6>
 800fb2a:	4663      	mov	r3, ip
 800fb2c:	e793      	b.n	800fa56 <arm_biquad_cascade_df1_f32+0x116>
 800fb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb32:	bf00      	nop

0800fb34 <__cvt>:
 800fb34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb38:	ec55 4b10 	vmov	r4, r5, d0
 800fb3c:	2d00      	cmp	r5, #0
 800fb3e:	460e      	mov	r6, r1
 800fb40:	4619      	mov	r1, r3
 800fb42:	462b      	mov	r3, r5
 800fb44:	bfbb      	ittet	lt
 800fb46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fb4a:	461d      	movlt	r5, r3
 800fb4c:	2300      	movge	r3, #0
 800fb4e:	232d      	movlt	r3, #45	; 0x2d
 800fb50:	700b      	strb	r3, [r1, #0]
 800fb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fb58:	4691      	mov	r9, r2
 800fb5a:	f023 0820 	bic.w	r8, r3, #32
 800fb5e:	bfbc      	itt	lt
 800fb60:	4622      	movlt	r2, r4
 800fb62:	4614      	movlt	r4, r2
 800fb64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb68:	d005      	beq.n	800fb76 <__cvt+0x42>
 800fb6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb6e:	d100      	bne.n	800fb72 <__cvt+0x3e>
 800fb70:	3601      	adds	r6, #1
 800fb72:	2102      	movs	r1, #2
 800fb74:	e000      	b.n	800fb78 <__cvt+0x44>
 800fb76:	2103      	movs	r1, #3
 800fb78:	ab03      	add	r3, sp, #12
 800fb7a:	9301      	str	r3, [sp, #4]
 800fb7c:	ab02      	add	r3, sp, #8
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	ec45 4b10 	vmov	d0, r4, r5
 800fb84:	4653      	mov	r3, sl
 800fb86:	4632      	mov	r2, r6
 800fb88:	f000 fe76 	bl	8010878 <_dtoa_r>
 800fb8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb90:	4607      	mov	r7, r0
 800fb92:	d102      	bne.n	800fb9a <__cvt+0x66>
 800fb94:	f019 0f01 	tst.w	r9, #1
 800fb98:	d022      	beq.n	800fbe0 <__cvt+0xac>
 800fb9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb9e:	eb07 0906 	add.w	r9, r7, r6
 800fba2:	d110      	bne.n	800fbc6 <__cvt+0x92>
 800fba4:	783b      	ldrb	r3, [r7, #0]
 800fba6:	2b30      	cmp	r3, #48	; 0x30
 800fba8:	d10a      	bne.n	800fbc0 <__cvt+0x8c>
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2300      	movs	r3, #0
 800fbae:	4620      	mov	r0, r4
 800fbb0:	4629      	mov	r1, r5
 800fbb2:	f7f0 ffa9 	bl	8000b08 <__aeabi_dcmpeq>
 800fbb6:	b918      	cbnz	r0, 800fbc0 <__cvt+0x8c>
 800fbb8:	f1c6 0601 	rsb	r6, r6, #1
 800fbbc:	f8ca 6000 	str.w	r6, [sl]
 800fbc0:	f8da 3000 	ldr.w	r3, [sl]
 800fbc4:	4499      	add	r9, r3
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4620      	mov	r0, r4
 800fbcc:	4629      	mov	r1, r5
 800fbce:	f7f0 ff9b 	bl	8000b08 <__aeabi_dcmpeq>
 800fbd2:	b108      	cbz	r0, 800fbd8 <__cvt+0xa4>
 800fbd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fbd8:	2230      	movs	r2, #48	; 0x30
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	454b      	cmp	r3, r9
 800fbde:	d307      	bcc.n	800fbf0 <__cvt+0xbc>
 800fbe0:	9b03      	ldr	r3, [sp, #12]
 800fbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbe4:	1bdb      	subs	r3, r3, r7
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	6013      	str	r3, [r2, #0]
 800fbea:	b004      	add	sp, #16
 800fbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf0:	1c59      	adds	r1, r3, #1
 800fbf2:	9103      	str	r1, [sp, #12]
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	e7f0      	b.n	800fbda <__cvt+0xa6>

0800fbf8 <__exponent>:
 800fbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	bfb8      	it	lt
 800fc00:	4249      	neglt	r1, r1
 800fc02:	f803 2b02 	strb.w	r2, [r3], #2
 800fc06:	bfb4      	ite	lt
 800fc08:	222d      	movlt	r2, #45	; 0x2d
 800fc0a:	222b      	movge	r2, #43	; 0x2b
 800fc0c:	2909      	cmp	r1, #9
 800fc0e:	7042      	strb	r2, [r0, #1]
 800fc10:	dd2a      	ble.n	800fc68 <__exponent+0x70>
 800fc12:	f10d 0207 	add.w	r2, sp, #7
 800fc16:	4617      	mov	r7, r2
 800fc18:	260a      	movs	r6, #10
 800fc1a:	4694      	mov	ip, r2
 800fc1c:	fb91 f5f6 	sdiv	r5, r1, r6
 800fc20:	fb06 1415 	mls	r4, r6, r5, r1
 800fc24:	3430      	adds	r4, #48	; 0x30
 800fc26:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	2c63      	cmp	r4, #99	; 0x63
 800fc2e:	f102 32ff 	add.w	r2, r2, #4294967295
 800fc32:	4629      	mov	r1, r5
 800fc34:	dcf1      	bgt.n	800fc1a <__exponent+0x22>
 800fc36:	3130      	adds	r1, #48	; 0x30
 800fc38:	f1ac 0402 	sub.w	r4, ip, #2
 800fc3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fc40:	1c41      	adds	r1, r0, #1
 800fc42:	4622      	mov	r2, r4
 800fc44:	42ba      	cmp	r2, r7
 800fc46:	d30a      	bcc.n	800fc5e <__exponent+0x66>
 800fc48:	f10d 0209 	add.w	r2, sp, #9
 800fc4c:	eba2 020c 	sub.w	r2, r2, ip
 800fc50:	42bc      	cmp	r4, r7
 800fc52:	bf88      	it	hi
 800fc54:	2200      	movhi	r2, #0
 800fc56:	4413      	add	r3, r2
 800fc58:	1a18      	subs	r0, r3, r0
 800fc5a:	b003      	add	sp, #12
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fc62:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fc66:	e7ed      	b.n	800fc44 <__exponent+0x4c>
 800fc68:	2330      	movs	r3, #48	; 0x30
 800fc6a:	3130      	adds	r1, #48	; 0x30
 800fc6c:	7083      	strb	r3, [r0, #2]
 800fc6e:	70c1      	strb	r1, [r0, #3]
 800fc70:	1d03      	adds	r3, r0, #4
 800fc72:	e7f1      	b.n	800fc58 <__exponent+0x60>

0800fc74 <_printf_float>:
 800fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	ed2d 8b02 	vpush	{d8}
 800fc7c:	b08d      	sub	sp, #52	; 0x34
 800fc7e:	460c      	mov	r4, r1
 800fc80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fc84:	4616      	mov	r6, r2
 800fc86:	461f      	mov	r7, r3
 800fc88:	4605      	mov	r5, r0
 800fc8a:	f000 fce7 	bl	801065c <_localeconv_r>
 800fc8e:	f8d0 a000 	ldr.w	sl, [r0]
 800fc92:	4650      	mov	r0, sl
 800fc94:	f7f0 fb0c 	bl	80002b0 <strlen>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	9305      	str	r3, [sp, #20]
 800fca0:	f8d8 3000 	ldr.w	r3, [r8]
 800fca4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fca8:	3307      	adds	r3, #7
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	f103 0208 	add.w	r2, r3, #8
 800fcb2:	f8c8 2000 	str.w	r2, [r8]
 800fcb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fcba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fcbe:	9307      	str	r3, [sp, #28]
 800fcc0:	f8cd 8018 	str.w	r8, [sp, #24]
 800fcc4:	ee08 0a10 	vmov	s16, r0
 800fcc8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800fccc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fcd0:	4b9e      	ldr	r3, [pc, #632]	; (800ff4c <_printf_float+0x2d8>)
 800fcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd6:	f7f0 ff49 	bl	8000b6c <__aeabi_dcmpun>
 800fcda:	bb88      	cbnz	r0, 800fd40 <_printf_float+0xcc>
 800fcdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fce0:	4b9a      	ldr	r3, [pc, #616]	; (800ff4c <_printf_float+0x2d8>)
 800fce2:	f04f 32ff 	mov.w	r2, #4294967295
 800fce6:	f7f0 ff23 	bl	8000b30 <__aeabi_dcmple>
 800fcea:	bb48      	cbnz	r0, 800fd40 <_printf_float+0xcc>
 800fcec:	2200      	movs	r2, #0
 800fcee:	2300      	movs	r3, #0
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	4649      	mov	r1, r9
 800fcf4:	f7f0 ff12 	bl	8000b1c <__aeabi_dcmplt>
 800fcf8:	b110      	cbz	r0, 800fd00 <_printf_float+0x8c>
 800fcfa:	232d      	movs	r3, #45	; 0x2d
 800fcfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd00:	4a93      	ldr	r2, [pc, #588]	; (800ff50 <_printf_float+0x2dc>)
 800fd02:	4b94      	ldr	r3, [pc, #592]	; (800ff54 <_printf_float+0x2e0>)
 800fd04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fd08:	bf94      	ite	ls
 800fd0a:	4690      	movls	r8, r2
 800fd0c:	4698      	movhi	r8, r3
 800fd0e:	2303      	movs	r3, #3
 800fd10:	6123      	str	r3, [r4, #16]
 800fd12:	9b05      	ldr	r3, [sp, #20]
 800fd14:	f023 0304 	bic.w	r3, r3, #4
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	f04f 0900 	mov.w	r9, #0
 800fd1e:	9700      	str	r7, [sp, #0]
 800fd20:	4633      	mov	r3, r6
 800fd22:	aa0b      	add	r2, sp, #44	; 0x2c
 800fd24:	4621      	mov	r1, r4
 800fd26:	4628      	mov	r0, r5
 800fd28:	f000 f9da 	bl	80100e0 <_printf_common>
 800fd2c:	3001      	adds	r0, #1
 800fd2e:	f040 8090 	bne.w	800fe52 <_printf_float+0x1de>
 800fd32:	f04f 30ff 	mov.w	r0, #4294967295
 800fd36:	b00d      	add	sp, #52	; 0x34
 800fd38:	ecbd 8b02 	vpop	{d8}
 800fd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd40:	4642      	mov	r2, r8
 800fd42:	464b      	mov	r3, r9
 800fd44:	4640      	mov	r0, r8
 800fd46:	4649      	mov	r1, r9
 800fd48:	f7f0 ff10 	bl	8000b6c <__aeabi_dcmpun>
 800fd4c:	b140      	cbz	r0, 800fd60 <_printf_float+0xec>
 800fd4e:	464b      	mov	r3, r9
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	bfbc      	itt	lt
 800fd54:	232d      	movlt	r3, #45	; 0x2d
 800fd56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd5a:	4a7f      	ldr	r2, [pc, #508]	; (800ff58 <_printf_float+0x2e4>)
 800fd5c:	4b7f      	ldr	r3, [pc, #508]	; (800ff5c <_printf_float+0x2e8>)
 800fd5e:	e7d1      	b.n	800fd04 <_printf_float+0x90>
 800fd60:	6863      	ldr	r3, [r4, #4]
 800fd62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fd66:	9206      	str	r2, [sp, #24]
 800fd68:	1c5a      	adds	r2, r3, #1
 800fd6a:	d13f      	bne.n	800fdec <_printf_float+0x178>
 800fd6c:	2306      	movs	r3, #6
 800fd6e:	6063      	str	r3, [r4, #4]
 800fd70:	9b05      	ldr	r3, [sp, #20]
 800fd72:	6861      	ldr	r1, [r4, #4]
 800fd74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9303      	str	r3, [sp, #12]
 800fd7c:	ab0a      	add	r3, sp, #40	; 0x28
 800fd7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fd82:	ab09      	add	r3, sp, #36	; 0x24
 800fd84:	ec49 8b10 	vmov	d0, r8, r9
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	6022      	str	r2, [r4, #0]
 800fd8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd90:	4628      	mov	r0, r5
 800fd92:	f7ff fecf 	bl	800fb34 <__cvt>
 800fd96:	9b06      	ldr	r3, [sp, #24]
 800fd98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd9a:	2b47      	cmp	r3, #71	; 0x47
 800fd9c:	4680      	mov	r8, r0
 800fd9e:	d108      	bne.n	800fdb2 <_printf_float+0x13e>
 800fda0:	1cc8      	adds	r0, r1, #3
 800fda2:	db02      	blt.n	800fdaa <_printf_float+0x136>
 800fda4:	6863      	ldr	r3, [r4, #4]
 800fda6:	4299      	cmp	r1, r3
 800fda8:	dd41      	ble.n	800fe2e <_printf_float+0x1ba>
 800fdaa:	f1ab 0302 	sub.w	r3, fp, #2
 800fdae:	fa5f fb83 	uxtb.w	fp, r3
 800fdb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fdb6:	d820      	bhi.n	800fdfa <_printf_float+0x186>
 800fdb8:	3901      	subs	r1, #1
 800fdba:	465a      	mov	r2, fp
 800fdbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fdc0:	9109      	str	r1, [sp, #36]	; 0x24
 800fdc2:	f7ff ff19 	bl	800fbf8 <__exponent>
 800fdc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdc8:	1813      	adds	r3, r2, r0
 800fdca:	2a01      	cmp	r2, #1
 800fdcc:	4681      	mov	r9, r0
 800fdce:	6123      	str	r3, [r4, #16]
 800fdd0:	dc02      	bgt.n	800fdd8 <_printf_float+0x164>
 800fdd2:	6822      	ldr	r2, [r4, #0]
 800fdd4:	07d2      	lsls	r2, r2, #31
 800fdd6:	d501      	bpl.n	800fddc <_printf_float+0x168>
 800fdd8:	3301      	adds	r3, #1
 800fdda:	6123      	str	r3, [r4, #16]
 800fddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d09c      	beq.n	800fd1e <_printf_float+0xaa>
 800fde4:	232d      	movs	r3, #45	; 0x2d
 800fde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdea:	e798      	b.n	800fd1e <_printf_float+0xaa>
 800fdec:	9a06      	ldr	r2, [sp, #24]
 800fdee:	2a47      	cmp	r2, #71	; 0x47
 800fdf0:	d1be      	bne.n	800fd70 <_printf_float+0xfc>
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1bc      	bne.n	800fd70 <_printf_float+0xfc>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e7b9      	b.n	800fd6e <_printf_float+0xfa>
 800fdfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fdfe:	d118      	bne.n	800fe32 <_printf_float+0x1be>
 800fe00:	2900      	cmp	r1, #0
 800fe02:	6863      	ldr	r3, [r4, #4]
 800fe04:	dd0b      	ble.n	800fe1e <_printf_float+0x1aa>
 800fe06:	6121      	str	r1, [r4, #16]
 800fe08:	b913      	cbnz	r3, 800fe10 <_printf_float+0x19c>
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	07d0      	lsls	r0, r2, #31
 800fe0e:	d502      	bpl.n	800fe16 <_printf_float+0x1a2>
 800fe10:	3301      	adds	r3, #1
 800fe12:	440b      	add	r3, r1
 800fe14:	6123      	str	r3, [r4, #16]
 800fe16:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe18:	f04f 0900 	mov.w	r9, #0
 800fe1c:	e7de      	b.n	800fddc <_printf_float+0x168>
 800fe1e:	b913      	cbnz	r3, 800fe26 <_printf_float+0x1b2>
 800fe20:	6822      	ldr	r2, [r4, #0]
 800fe22:	07d2      	lsls	r2, r2, #31
 800fe24:	d501      	bpl.n	800fe2a <_printf_float+0x1b6>
 800fe26:	3302      	adds	r3, #2
 800fe28:	e7f4      	b.n	800fe14 <_printf_float+0x1a0>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e7f2      	b.n	800fe14 <_printf_float+0x1a0>
 800fe2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fe32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe34:	4299      	cmp	r1, r3
 800fe36:	db05      	blt.n	800fe44 <_printf_float+0x1d0>
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	6121      	str	r1, [r4, #16]
 800fe3c:	07d8      	lsls	r0, r3, #31
 800fe3e:	d5ea      	bpl.n	800fe16 <_printf_float+0x1a2>
 800fe40:	1c4b      	adds	r3, r1, #1
 800fe42:	e7e7      	b.n	800fe14 <_printf_float+0x1a0>
 800fe44:	2900      	cmp	r1, #0
 800fe46:	bfd4      	ite	le
 800fe48:	f1c1 0202 	rsble	r2, r1, #2
 800fe4c:	2201      	movgt	r2, #1
 800fe4e:	4413      	add	r3, r2
 800fe50:	e7e0      	b.n	800fe14 <_printf_float+0x1a0>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	055a      	lsls	r2, r3, #21
 800fe56:	d407      	bmi.n	800fe68 <_printf_float+0x1f4>
 800fe58:	6923      	ldr	r3, [r4, #16]
 800fe5a:	4642      	mov	r2, r8
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4628      	mov	r0, r5
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	d12c      	bne.n	800fec0 <_printf_float+0x24c>
 800fe66:	e764      	b.n	800fd32 <_printf_float+0xbe>
 800fe68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe6c:	f240 80e0 	bls.w	8010030 <_printf_float+0x3bc>
 800fe70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe74:	2200      	movs	r2, #0
 800fe76:	2300      	movs	r3, #0
 800fe78:	f7f0 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d034      	beq.n	800feea <_printf_float+0x276>
 800fe80:	4a37      	ldr	r2, [pc, #220]	; (800ff60 <_printf_float+0x2ec>)
 800fe82:	2301      	movs	r3, #1
 800fe84:	4631      	mov	r1, r6
 800fe86:	4628      	mov	r0, r5
 800fe88:	47b8      	blx	r7
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	f43f af51 	beq.w	800fd32 <_printf_float+0xbe>
 800fe90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe94:	429a      	cmp	r2, r3
 800fe96:	db02      	blt.n	800fe9e <_printf_float+0x22a>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	07d8      	lsls	r0, r3, #31
 800fe9c:	d510      	bpl.n	800fec0 <_printf_float+0x24c>
 800fe9e:	ee18 3a10 	vmov	r3, s16
 800fea2:	4652      	mov	r2, sl
 800fea4:	4631      	mov	r1, r6
 800fea6:	4628      	mov	r0, r5
 800fea8:	47b8      	blx	r7
 800feaa:	3001      	adds	r0, #1
 800feac:	f43f af41 	beq.w	800fd32 <_printf_float+0xbe>
 800feb0:	f04f 0800 	mov.w	r8, #0
 800feb4:	f104 091a 	add.w	r9, r4, #26
 800feb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feba:	3b01      	subs	r3, #1
 800febc:	4543      	cmp	r3, r8
 800febe:	dc09      	bgt.n	800fed4 <_printf_float+0x260>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	079b      	lsls	r3, r3, #30
 800fec4:	f100 8107 	bmi.w	80100d6 <_printf_float+0x462>
 800fec8:	68e0      	ldr	r0, [r4, #12]
 800feca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fecc:	4298      	cmp	r0, r3
 800fece:	bfb8      	it	lt
 800fed0:	4618      	movlt	r0, r3
 800fed2:	e730      	b.n	800fd36 <_printf_float+0xc2>
 800fed4:	2301      	movs	r3, #1
 800fed6:	464a      	mov	r2, r9
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	47b8      	blx	r7
 800fede:	3001      	adds	r0, #1
 800fee0:	f43f af27 	beq.w	800fd32 <_printf_float+0xbe>
 800fee4:	f108 0801 	add.w	r8, r8, #1
 800fee8:	e7e6      	b.n	800feb8 <_printf_float+0x244>
 800feea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feec:	2b00      	cmp	r3, #0
 800feee:	dc39      	bgt.n	800ff64 <_printf_float+0x2f0>
 800fef0:	4a1b      	ldr	r2, [pc, #108]	; (800ff60 <_printf_float+0x2ec>)
 800fef2:	2301      	movs	r3, #1
 800fef4:	4631      	mov	r1, r6
 800fef6:	4628      	mov	r0, r5
 800fef8:	47b8      	blx	r7
 800fefa:	3001      	adds	r0, #1
 800fefc:	f43f af19 	beq.w	800fd32 <_printf_float+0xbe>
 800ff00:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ff04:	4313      	orrs	r3, r2
 800ff06:	d102      	bne.n	800ff0e <_printf_float+0x29a>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	07d9      	lsls	r1, r3, #31
 800ff0c:	d5d8      	bpl.n	800fec0 <_printf_float+0x24c>
 800ff0e:	ee18 3a10 	vmov	r3, s16
 800ff12:	4652      	mov	r2, sl
 800ff14:	4631      	mov	r1, r6
 800ff16:	4628      	mov	r0, r5
 800ff18:	47b8      	blx	r7
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	f43f af09 	beq.w	800fd32 <_printf_float+0xbe>
 800ff20:	f04f 0900 	mov.w	r9, #0
 800ff24:	f104 0a1a 	add.w	sl, r4, #26
 800ff28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff2a:	425b      	negs	r3, r3
 800ff2c:	454b      	cmp	r3, r9
 800ff2e:	dc01      	bgt.n	800ff34 <_printf_float+0x2c0>
 800ff30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff32:	e792      	b.n	800fe5a <_printf_float+0x1e6>
 800ff34:	2301      	movs	r3, #1
 800ff36:	4652      	mov	r2, sl
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	f43f aef7 	beq.w	800fd32 <_printf_float+0xbe>
 800ff44:	f109 0901 	add.w	r9, r9, #1
 800ff48:	e7ee      	b.n	800ff28 <_printf_float+0x2b4>
 800ff4a:	bf00      	nop
 800ff4c:	7fefffff 	.word	0x7fefffff
 800ff50:	080145ac 	.word	0x080145ac
 800ff54:	080145b0 	.word	0x080145b0
 800ff58:	080145b4 	.word	0x080145b4
 800ff5c:	080145b8 	.word	0x080145b8
 800ff60:	080145bc 	.word	0x080145bc
 800ff64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	bfa8      	it	ge
 800ff6c:	461a      	movge	r2, r3
 800ff6e:	2a00      	cmp	r2, #0
 800ff70:	4691      	mov	r9, r2
 800ff72:	dc37      	bgt.n	800ffe4 <_printf_float+0x370>
 800ff74:	f04f 0b00 	mov.w	fp, #0
 800ff78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff7c:	f104 021a 	add.w	r2, r4, #26
 800ff80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff82:	9305      	str	r3, [sp, #20]
 800ff84:	eba3 0309 	sub.w	r3, r3, r9
 800ff88:	455b      	cmp	r3, fp
 800ff8a:	dc33      	bgt.n	800fff4 <_printf_float+0x380>
 800ff8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff90:	429a      	cmp	r2, r3
 800ff92:	db3b      	blt.n	801000c <_printf_float+0x398>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	07da      	lsls	r2, r3, #31
 800ff98:	d438      	bmi.n	801000c <_printf_float+0x398>
 800ff9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ff9e:	eba2 0903 	sub.w	r9, r2, r3
 800ffa2:	9b05      	ldr	r3, [sp, #20]
 800ffa4:	1ad2      	subs	r2, r2, r3
 800ffa6:	4591      	cmp	r9, r2
 800ffa8:	bfa8      	it	ge
 800ffaa:	4691      	movge	r9, r2
 800ffac:	f1b9 0f00 	cmp.w	r9, #0
 800ffb0:	dc35      	bgt.n	801001e <_printf_float+0x3aa>
 800ffb2:	f04f 0800 	mov.w	r8, #0
 800ffb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffba:	f104 0a1a 	add.w	sl, r4, #26
 800ffbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffc2:	1a9b      	subs	r3, r3, r2
 800ffc4:	eba3 0309 	sub.w	r3, r3, r9
 800ffc8:	4543      	cmp	r3, r8
 800ffca:	f77f af79 	ble.w	800fec0 <_printf_float+0x24c>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4652      	mov	r2, sl
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	47b8      	blx	r7
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f43f aeaa 	beq.w	800fd32 <_printf_float+0xbe>
 800ffde:	f108 0801 	add.w	r8, r8, #1
 800ffe2:	e7ec      	b.n	800ffbe <_printf_float+0x34a>
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4642      	mov	r2, r8
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b8      	blx	r7
 800ffee:	3001      	adds	r0, #1
 800fff0:	d1c0      	bne.n	800ff74 <_printf_float+0x300>
 800fff2:	e69e      	b.n	800fd32 <_printf_float+0xbe>
 800fff4:	2301      	movs	r3, #1
 800fff6:	4631      	mov	r1, r6
 800fff8:	4628      	mov	r0, r5
 800fffa:	9205      	str	r2, [sp, #20]
 800fffc:	47b8      	blx	r7
 800fffe:	3001      	adds	r0, #1
 8010000:	f43f ae97 	beq.w	800fd32 <_printf_float+0xbe>
 8010004:	9a05      	ldr	r2, [sp, #20]
 8010006:	f10b 0b01 	add.w	fp, fp, #1
 801000a:	e7b9      	b.n	800ff80 <_printf_float+0x30c>
 801000c:	ee18 3a10 	vmov	r3, s16
 8010010:	4652      	mov	r2, sl
 8010012:	4631      	mov	r1, r6
 8010014:	4628      	mov	r0, r5
 8010016:	47b8      	blx	r7
 8010018:	3001      	adds	r0, #1
 801001a:	d1be      	bne.n	800ff9a <_printf_float+0x326>
 801001c:	e689      	b.n	800fd32 <_printf_float+0xbe>
 801001e:	9a05      	ldr	r2, [sp, #20]
 8010020:	464b      	mov	r3, r9
 8010022:	4442      	add	r2, r8
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	d1c1      	bne.n	800ffb2 <_printf_float+0x33e>
 801002e:	e680      	b.n	800fd32 <_printf_float+0xbe>
 8010030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010032:	2a01      	cmp	r2, #1
 8010034:	dc01      	bgt.n	801003a <_printf_float+0x3c6>
 8010036:	07db      	lsls	r3, r3, #31
 8010038:	d53a      	bpl.n	80100b0 <_printf_float+0x43c>
 801003a:	2301      	movs	r3, #1
 801003c:	4642      	mov	r2, r8
 801003e:	4631      	mov	r1, r6
 8010040:	4628      	mov	r0, r5
 8010042:	47b8      	blx	r7
 8010044:	3001      	adds	r0, #1
 8010046:	f43f ae74 	beq.w	800fd32 <_printf_float+0xbe>
 801004a:	ee18 3a10 	vmov	r3, s16
 801004e:	4652      	mov	r2, sl
 8010050:	4631      	mov	r1, r6
 8010052:	4628      	mov	r0, r5
 8010054:	47b8      	blx	r7
 8010056:	3001      	adds	r0, #1
 8010058:	f43f ae6b 	beq.w	800fd32 <_printf_float+0xbe>
 801005c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010060:	2200      	movs	r2, #0
 8010062:	2300      	movs	r3, #0
 8010064:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010068:	f7f0 fd4e 	bl	8000b08 <__aeabi_dcmpeq>
 801006c:	b9d8      	cbnz	r0, 80100a6 <_printf_float+0x432>
 801006e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010072:	f108 0201 	add.w	r2, r8, #1
 8010076:	4631      	mov	r1, r6
 8010078:	4628      	mov	r0, r5
 801007a:	47b8      	blx	r7
 801007c:	3001      	adds	r0, #1
 801007e:	d10e      	bne.n	801009e <_printf_float+0x42a>
 8010080:	e657      	b.n	800fd32 <_printf_float+0xbe>
 8010082:	2301      	movs	r3, #1
 8010084:	4652      	mov	r2, sl
 8010086:	4631      	mov	r1, r6
 8010088:	4628      	mov	r0, r5
 801008a:	47b8      	blx	r7
 801008c:	3001      	adds	r0, #1
 801008e:	f43f ae50 	beq.w	800fd32 <_printf_float+0xbe>
 8010092:	f108 0801 	add.w	r8, r8, #1
 8010096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010098:	3b01      	subs	r3, #1
 801009a:	4543      	cmp	r3, r8
 801009c:	dcf1      	bgt.n	8010082 <_printf_float+0x40e>
 801009e:	464b      	mov	r3, r9
 80100a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80100a4:	e6da      	b.n	800fe5c <_printf_float+0x1e8>
 80100a6:	f04f 0800 	mov.w	r8, #0
 80100aa:	f104 0a1a 	add.w	sl, r4, #26
 80100ae:	e7f2      	b.n	8010096 <_printf_float+0x422>
 80100b0:	2301      	movs	r3, #1
 80100b2:	4642      	mov	r2, r8
 80100b4:	e7df      	b.n	8010076 <_printf_float+0x402>
 80100b6:	2301      	movs	r3, #1
 80100b8:	464a      	mov	r2, r9
 80100ba:	4631      	mov	r1, r6
 80100bc:	4628      	mov	r0, r5
 80100be:	47b8      	blx	r7
 80100c0:	3001      	adds	r0, #1
 80100c2:	f43f ae36 	beq.w	800fd32 <_printf_float+0xbe>
 80100c6:	f108 0801 	add.w	r8, r8, #1
 80100ca:	68e3      	ldr	r3, [r4, #12]
 80100cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80100ce:	1a5b      	subs	r3, r3, r1
 80100d0:	4543      	cmp	r3, r8
 80100d2:	dcf0      	bgt.n	80100b6 <_printf_float+0x442>
 80100d4:	e6f8      	b.n	800fec8 <_printf_float+0x254>
 80100d6:	f04f 0800 	mov.w	r8, #0
 80100da:	f104 0919 	add.w	r9, r4, #25
 80100de:	e7f4      	b.n	80100ca <_printf_float+0x456>

080100e0 <_printf_common>:
 80100e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e4:	4616      	mov	r6, r2
 80100e6:	4699      	mov	r9, r3
 80100e8:	688a      	ldr	r2, [r1, #8]
 80100ea:	690b      	ldr	r3, [r1, #16]
 80100ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100f0:	4293      	cmp	r3, r2
 80100f2:	bfb8      	it	lt
 80100f4:	4613      	movlt	r3, r2
 80100f6:	6033      	str	r3, [r6, #0]
 80100f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100fc:	4607      	mov	r7, r0
 80100fe:	460c      	mov	r4, r1
 8010100:	b10a      	cbz	r2, 8010106 <_printf_common+0x26>
 8010102:	3301      	adds	r3, #1
 8010104:	6033      	str	r3, [r6, #0]
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	0699      	lsls	r1, r3, #26
 801010a:	bf42      	ittt	mi
 801010c:	6833      	ldrmi	r3, [r6, #0]
 801010e:	3302      	addmi	r3, #2
 8010110:	6033      	strmi	r3, [r6, #0]
 8010112:	6825      	ldr	r5, [r4, #0]
 8010114:	f015 0506 	ands.w	r5, r5, #6
 8010118:	d106      	bne.n	8010128 <_printf_common+0x48>
 801011a:	f104 0a19 	add.w	sl, r4, #25
 801011e:	68e3      	ldr	r3, [r4, #12]
 8010120:	6832      	ldr	r2, [r6, #0]
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	42ab      	cmp	r3, r5
 8010126:	dc26      	bgt.n	8010176 <_printf_common+0x96>
 8010128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801012c:	1e13      	subs	r3, r2, #0
 801012e:	6822      	ldr	r2, [r4, #0]
 8010130:	bf18      	it	ne
 8010132:	2301      	movne	r3, #1
 8010134:	0692      	lsls	r2, r2, #26
 8010136:	d42b      	bmi.n	8010190 <_printf_common+0xb0>
 8010138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801013c:	4649      	mov	r1, r9
 801013e:	4638      	mov	r0, r7
 8010140:	47c0      	blx	r8
 8010142:	3001      	adds	r0, #1
 8010144:	d01e      	beq.n	8010184 <_printf_common+0xa4>
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	6922      	ldr	r2, [r4, #16]
 801014a:	f003 0306 	and.w	r3, r3, #6
 801014e:	2b04      	cmp	r3, #4
 8010150:	bf02      	ittt	eq
 8010152:	68e5      	ldreq	r5, [r4, #12]
 8010154:	6833      	ldreq	r3, [r6, #0]
 8010156:	1aed      	subeq	r5, r5, r3
 8010158:	68a3      	ldr	r3, [r4, #8]
 801015a:	bf0c      	ite	eq
 801015c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010160:	2500      	movne	r5, #0
 8010162:	4293      	cmp	r3, r2
 8010164:	bfc4      	itt	gt
 8010166:	1a9b      	subgt	r3, r3, r2
 8010168:	18ed      	addgt	r5, r5, r3
 801016a:	2600      	movs	r6, #0
 801016c:	341a      	adds	r4, #26
 801016e:	42b5      	cmp	r5, r6
 8010170:	d11a      	bne.n	80101a8 <_printf_common+0xc8>
 8010172:	2000      	movs	r0, #0
 8010174:	e008      	b.n	8010188 <_printf_common+0xa8>
 8010176:	2301      	movs	r3, #1
 8010178:	4652      	mov	r2, sl
 801017a:	4649      	mov	r1, r9
 801017c:	4638      	mov	r0, r7
 801017e:	47c0      	blx	r8
 8010180:	3001      	adds	r0, #1
 8010182:	d103      	bne.n	801018c <_printf_common+0xac>
 8010184:	f04f 30ff 	mov.w	r0, #4294967295
 8010188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018c:	3501      	adds	r5, #1
 801018e:	e7c6      	b.n	801011e <_printf_common+0x3e>
 8010190:	18e1      	adds	r1, r4, r3
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	2030      	movs	r0, #48	; 0x30
 8010196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801019a:	4422      	add	r2, r4
 801019c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101a4:	3302      	adds	r3, #2
 80101a6:	e7c7      	b.n	8010138 <_printf_common+0x58>
 80101a8:	2301      	movs	r3, #1
 80101aa:	4622      	mov	r2, r4
 80101ac:	4649      	mov	r1, r9
 80101ae:	4638      	mov	r0, r7
 80101b0:	47c0      	blx	r8
 80101b2:	3001      	adds	r0, #1
 80101b4:	d0e6      	beq.n	8010184 <_printf_common+0xa4>
 80101b6:	3601      	adds	r6, #1
 80101b8:	e7d9      	b.n	801016e <_printf_common+0x8e>
	...

080101bc <_printf_i>:
 80101bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101c0:	7e0f      	ldrb	r7, [r1, #24]
 80101c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101c4:	2f78      	cmp	r7, #120	; 0x78
 80101c6:	4691      	mov	r9, r2
 80101c8:	4680      	mov	r8, r0
 80101ca:	460c      	mov	r4, r1
 80101cc:	469a      	mov	sl, r3
 80101ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101d2:	d807      	bhi.n	80101e4 <_printf_i+0x28>
 80101d4:	2f62      	cmp	r7, #98	; 0x62
 80101d6:	d80a      	bhi.n	80101ee <_printf_i+0x32>
 80101d8:	2f00      	cmp	r7, #0
 80101da:	f000 80d4 	beq.w	8010386 <_printf_i+0x1ca>
 80101de:	2f58      	cmp	r7, #88	; 0x58
 80101e0:	f000 80c0 	beq.w	8010364 <_printf_i+0x1a8>
 80101e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101ec:	e03a      	b.n	8010264 <_printf_i+0xa8>
 80101ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101f2:	2b15      	cmp	r3, #21
 80101f4:	d8f6      	bhi.n	80101e4 <_printf_i+0x28>
 80101f6:	a101      	add	r1, pc, #4	; (adr r1, 80101fc <_printf_i+0x40>)
 80101f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101fc:	08010255 	.word	0x08010255
 8010200:	08010269 	.word	0x08010269
 8010204:	080101e5 	.word	0x080101e5
 8010208:	080101e5 	.word	0x080101e5
 801020c:	080101e5 	.word	0x080101e5
 8010210:	080101e5 	.word	0x080101e5
 8010214:	08010269 	.word	0x08010269
 8010218:	080101e5 	.word	0x080101e5
 801021c:	080101e5 	.word	0x080101e5
 8010220:	080101e5 	.word	0x080101e5
 8010224:	080101e5 	.word	0x080101e5
 8010228:	0801036d 	.word	0x0801036d
 801022c:	08010295 	.word	0x08010295
 8010230:	08010327 	.word	0x08010327
 8010234:	080101e5 	.word	0x080101e5
 8010238:	080101e5 	.word	0x080101e5
 801023c:	0801038f 	.word	0x0801038f
 8010240:	080101e5 	.word	0x080101e5
 8010244:	08010295 	.word	0x08010295
 8010248:	080101e5 	.word	0x080101e5
 801024c:	080101e5 	.word	0x080101e5
 8010250:	0801032f 	.word	0x0801032f
 8010254:	682b      	ldr	r3, [r5, #0]
 8010256:	1d1a      	adds	r2, r3, #4
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	602a      	str	r2, [r5, #0]
 801025c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010264:	2301      	movs	r3, #1
 8010266:	e09f      	b.n	80103a8 <_printf_i+0x1ec>
 8010268:	6820      	ldr	r0, [r4, #0]
 801026a:	682b      	ldr	r3, [r5, #0]
 801026c:	0607      	lsls	r7, r0, #24
 801026e:	f103 0104 	add.w	r1, r3, #4
 8010272:	6029      	str	r1, [r5, #0]
 8010274:	d501      	bpl.n	801027a <_printf_i+0xbe>
 8010276:	681e      	ldr	r6, [r3, #0]
 8010278:	e003      	b.n	8010282 <_printf_i+0xc6>
 801027a:	0646      	lsls	r6, r0, #25
 801027c:	d5fb      	bpl.n	8010276 <_printf_i+0xba>
 801027e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010282:	2e00      	cmp	r6, #0
 8010284:	da03      	bge.n	801028e <_printf_i+0xd2>
 8010286:	232d      	movs	r3, #45	; 0x2d
 8010288:	4276      	negs	r6, r6
 801028a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801028e:	485a      	ldr	r0, [pc, #360]	; (80103f8 <_printf_i+0x23c>)
 8010290:	230a      	movs	r3, #10
 8010292:	e012      	b.n	80102ba <_printf_i+0xfe>
 8010294:	682b      	ldr	r3, [r5, #0]
 8010296:	6820      	ldr	r0, [r4, #0]
 8010298:	1d19      	adds	r1, r3, #4
 801029a:	6029      	str	r1, [r5, #0]
 801029c:	0605      	lsls	r5, r0, #24
 801029e:	d501      	bpl.n	80102a4 <_printf_i+0xe8>
 80102a0:	681e      	ldr	r6, [r3, #0]
 80102a2:	e002      	b.n	80102aa <_printf_i+0xee>
 80102a4:	0641      	lsls	r1, r0, #25
 80102a6:	d5fb      	bpl.n	80102a0 <_printf_i+0xe4>
 80102a8:	881e      	ldrh	r6, [r3, #0]
 80102aa:	4853      	ldr	r0, [pc, #332]	; (80103f8 <_printf_i+0x23c>)
 80102ac:	2f6f      	cmp	r7, #111	; 0x6f
 80102ae:	bf0c      	ite	eq
 80102b0:	2308      	moveq	r3, #8
 80102b2:	230a      	movne	r3, #10
 80102b4:	2100      	movs	r1, #0
 80102b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102ba:	6865      	ldr	r5, [r4, #4]
 80102bc:	60a5      	str	r5, [r4, #8]
 80102be:	2d00      	cmp	r5, #0
 80102c0:	bfa2      	ittt	ge
 80102c2:	6821      	ldrge	r1, [r4, #0]
 80102c4:	f021 0104 	bicge.w	r1, r1, #4
 80102c8:	6021      	strge	r1, [r4, #0]
 80102ca:	b90e      	cbnz	r6, 80102d0 <_printf_i+0x114>
 80102cc:	2d00      	cmp	r5, #0
 80102ce:	d04b      	beq.n	8010368 <_printf_i+0x1ac>
 80102d0:	4615      	mov	r5, r2
 80102d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80102d6:	fb03 6711 	mls	r7, r3, r1, r6
 80102da:	5dc7      	ldrb	r7, [r0, r7]
 80102dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102e0:	4637      	mov	r7, r6
 80102e2:	42bb      	cmp	r3, r7
 80102e4:	460e      	mov	r6, r1
 80102e6:	d9f4      	bls.n	80102d2 <_printf_i+0x116>
 80102e8:	2b08      	cmp	r3, #8
 80102ea:	d10b      	bne.n	8010304 <_printf_i+0x148>
 80102ec:	6823      	ldr	r3, [r4, #0]
 80102ee:	07de      	lsls	r6, r3, #31
 80102f0:	d508      	bpl.n	8010304 <_printf_i+0x148>
 80102f2:	6923      	ldr	r3, [r4, #16]
 80102f4:	6861      	ldr	r1, [r4, #4]
 80102f6:	4299      	cmp	r1, r3
 80102f8:	bfde      	ittt	le
 80102fa:	2330      	movle	r3, #48	; 0x30
 80102fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010304:	1b52      	subs	r2, r2, r5
 8010306:	6122      	str	r2, [r4, #16]
 8010308:	f8cd a000 	str.w	sl, [sp]
 801030c:	464b      	mov	r3, r9
 801030e:	aa03      	add	r2, sp, #12
 8010310:	4621      	mov	r1, r4
 8010312:	4640      	mov	r0, r8
 8010314:	f7ff fee4 	bl	80100e0 <_printf_common>
 8010318:	3001      	adds	r0, #1
 801031a:	d14a      	bne.n	80103b2 <_printf_i+0x1f6>
 801031c:	f04f 30ff 	mov.w	r0, #4294967295
 8010320:	b004      	add	sp, #16
 8010322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	f043 0320 	orr.w	r3, r3, #32
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	4833      	ldr	r0, [pc, #204]	; (80103fc <_printf_i+0x240>)
 8010330:	2778      	movs	r7, #120	; 0x78
 8010332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	6829      	ldr	r1, [r5, #0]
 801033a:	061f      	lsls	r7, r3, #24
 801033c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010340:	d402      	bmi.n	8010348 <_printf_i+0x18c>
 8010342:	065f      	lsls	r7, r3, #25
 8010344:	bf48      	it	mi
 8010346:	b2b6      	uxthmi	r6, r6
 8010348:	07df      	lsls	r7, r3, #31
 801034a:	bf48      	it	mi
 801034c:	f043 0320 	orrmi.w	r3, r3, #32
 8010350:	6029      	str	r1, [r5, #0]
 8010352:	bf48      	it	mi
 8010354:	6023      	strmi	r3, [r4, #0]
 8010356:	b91e      	cbnz	r6, 8010360 <_printf_i+0x1a4>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	f023 0320 	bic.w	r3, r3, #32
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	2310      	movs	r3, #16
 8010362:	e7a7      	b.n	80102b4 <_printf_i+0xf8>
 8010364:	4824      	ldr	r0, [pc, #144]	; (80103f8 <_printf_i+0x23c>)
 8010366:	e7e4      	b.n	8010332 <_printf_i+0x176>
 8010368:	4615      	mov	r5, r2
 801036a:	e7bd      	b.n	80102e8 <_printf_i+0x12c>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	6826      	ldr	r6, [r4, #0]
 8010370:	6961      	ldr	r1, [r4, #20]
 8010372:	1d18      	adds	r0, r3, #4
 8010374:	6028      	str	r0, [r5, #0]
 8010376:	0635      	lsls	r5, r6, #24
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	d501      	bpl.n	8010380 <_printf_i+0x1c4>
 801037c:	6019      	str	r1, [r3, #0]
 801037e:	e002      	b.n	8010386 <_printf_i+0x1ca>
 8010380:	0670      	lsls	r0, r6, #25
 8010382:	d5fb      	bpl.n	801037c <_printf_i+0x1c0>
 8010384:	8019      	strh	r1, [r3, #0]
 8010386:	2300      	movs	r3, #0
 8010388:	6123      	str	r3, [r4, #16]
 801038a:	4615      	mov	r5, r2
 801038c:	e7bc      	b.n	8010308 <_printf_i+0x14c>
 801038e:	682b      	ldr	r3, [r5, #0]
 8010390:	1d1a      	adds	r2, r3, #4
 8010392:	602a      	str	r2, [r5, #0]
 8010394:	681d      	ldr	r5, [r3, #0]
 8010396:	6862      	ldr	r2, [r4, #4]
 8010398:	2100      	movs	r1, #0
 801039a:	4628      	mov	r0, r5
 801039c:	f7ef ff38 	bl	8000210 <memchr>
 80103a0:	b108      	cbz	r0, 80103a6 <_printf_i+0x1ea>
 80103a2:	1b40      	subs	r0, r0, r5
 80103a4:	6060      	str	r0, [r4, #4]
 80103a6:	6863      	ldr	r3, [r4, #4]
 80103a8:	6123      	str	r3, [r4, #16]
 80103aa:	2300      	movs	r3, #0
 80103ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103b0:	e7aa      	b.n	8010308 <_printf_i+0x14c>
 80103b2:	6923      	ldr	r3, [r4, #16]
 80103b4:	462a      	mov	r2, r5
 80103b6:	4649      	mov	r1, r9
 80103b8:	4640      	mov	r0, r8
 80103ba:	47d0      	blx	sl
 80103bc:	3001      	adds	r0, #1
 80103be:	d0ad      	beq.n	801031c <_printf_i+0x160>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	079b      	lsls	r3, r3, #30
 80103c4:	d413      	bmi.n	80103ee <_printf_i+0x232>
 80103c6:	68e0      	ldr	r0, [r4, #12]
 80103c8:	9b03      	ldr	r3, [sp, #12]
 80103ca:	4298      	cmp	r0, r3
 80103cc:	bfb8      	it	lt
 80103ce:	4618      	movlt	r0, r3
 80103d0:	e7a6      	b.n	8010320 <_printf_i+0x164>
 80103d2:	2301      	movs	r3, #1
 80103d4:	4632      	mov	r2, r6
 80103d6:	4649      	mov	r1, r9
 80103d8:	4640      	mov	r0, r8
 80103da:	47d0      	blx	sl
 80103dc:	3001      	adds	r0, #1
 80103de:	d09d      	beq.n	801031c <_printf_i+0x160>
 80103e0:	3501      	adds	r5, #1
 80103e2:	68e3      	ldr	r3, [r4, #12]
 80103e4:	9903      	ldr	r1, [sp, #12]
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	42ab      	cmp	r3, r5
 80103ea:	dcf2      	bgt.n	80103d2 <_printf_i+0x216>
 80103ec:	e7eb      	b.n	80103c6 <_printf_i+0x20a>
 80103ee:	2500      	movs	r5, #0
 80103f0:	f104 0619 	add.w	r6, r4, #25
 80103f4:	e7f5      	b.n	80103e2 <_printf_i+0x226>
 80103f6:	bf00      	nop
 80103f8:	080145be 	.word	0x080145be
 80103fc:	080145cf 	.word	0x080145cf

08010400 <std>:
 8010400:	2300      	movs	r3, #0
 8010402:	b510      	push	{r4, lr}
 8010404:	4604      	mov	r4, r0
 8010406:	e9c0 3300 	strd	r3, r3, [r0]
 801040a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801040e:	6083      	str	r3, [r0, #8]
 8010410:	8181      	strh	r1, [r0, #12]
 8010412:	6643      	str	r3, [r0, #100]	; 0x64
 8010414:	81c2      	strh	r2, [r0, #14]
 8010416:	6183      	str	r3, [r0, #24]
 8010418:	4619      	mov	r1, r3
 801041a:	2208      	movs	r2, #8
 801041c:	305c      	adds	r0, #92	; 0x5c
 801041e:	f000 f914 	bl	801064a <memset>
 8010422:	4b0d      	ldr	r3, [pc, #52]	; (8010458 <std+0x58>)
 8010424:	6263      	str	r3, [r4, #36]	; 0x24
 8010426:	4b0d      	ldr	r3, [pc, #52]	; (801045c <std+0x5c>)
 8010428:	62a3      	str	r3, [r4, #40]	; 0x28
 801042a:	4b0d      	ldr	r3, [pc, #52]	; (8010460 <std+0x60>)
 801042c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801042e:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <std+0x64>)
 8010430:	6323      	str	r3, [r4, #48]	; 0x30
 8010432:	4b0d      	ldr	r3, [pc, #52]	; (8010468 <std+0x68>)
 8010434:	6224      	str	r4, [r4, #32]
 8010436:	429c      	cmp	r4, r3
 8010438:	d006      	beq.n	8010448 <std+0x48>
 801043a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801043e:	4294      	cmp	r4, r2
 8010440:	d002      	beq.n	8010448 <std+0x48>
 8010442:	33d0      	adds	r3, #208	; 0xd0
 8010444:	429c      	cmp	r4, r3
 8010446:	d105      	bne.n	8010454 <std+0x54>
 8010448:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801044c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010450:	f000 b978 	b.w	8010744 <__retarget_lock_init_recursive>
 8010454:	bd10      	pop	{r4, pc}
 8010456:	bf00      	nop
 8010458:	080105c5 	.word	0x080105c5
 801045c:	080105e7 	.word	0x080105e7
 8010460:	0801061f 	.word	0x0801061f
 8010464:	08010643 	.word	0x08010643
 8010468:	2001d504 	.word	0x2001d504

0801046c <stdio_exit_handler>:
 801046c:	4a02      	ldr	r2, [pc, #8]	; (8010478 <stdio_exit_handler+0xc>)
 801046e:	4903      	ldr	r1, [pc, #12]	; (801047c <stdio_exit_handler+0x10>)
 8010470:	4803      	ldr	r0, [pc, #12]	; (8010480 <stdio_exit_handler+0x14>)
 8010472:	f000 b869 	b.w	8010548 <_fwalk_sglue>
 8010476:	bf00      	nop
 8010478:	2000006c 	.word	0x2000006c
 801047c:	08012111 	.word	0x08012111
 8010480:	20000078 	.word	0x20000078

08010484 <cleanup_stdio>:
 8010484:	6841      	ldr	r1, [r0, #4]
 8010486:	4b0c      	ldr	r3, [pc, #48]	; (80104b8 <cleanup_stdio+0x34>)
 8010488:	4299      	cmp	r1, r3
 801048a:	b510      	push	{r4, lr}
 801048c:	4604      	mov	r4, r0
 801048e:	d001      	beq.n	8010494 <cleanup_stdio+0x10>
 8010490:	f001 fe3e 	bl	8012110 <_fflush_r>
 8010494:	68a1      	ldr	r1, [r4, #8]
 8010496:	4b09      	ldr	r3, [pc, #36]	; (80104bc <cleanup_stdio+0x38>)
 8010498:	4299      	cmp	r1, r3
 801049a:	d002      	beq.n	80104a2 <cleanup_stdio+0x1e>
 801049c:	4620      	mov	r0, r4
 801049e:	f001 fe37 	bl	8012110 <_fflush_r>
 80104a2:	68e1      	ldr	r1, [r4, #12]
 80104a4:	4b06      	ldr	r3, [pc, #24]	; (80104c0 <cleanup_stdio+0x3c>)
 80104a6:	4299      	cmp	r1, r3
 80104a8:	d004      	beq.n	80104b4 <cleanup_stdio+0x30>
 80104aa:	4620      	mov	r0, r4
 80104ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b0:	f001 be2e 	b.w	8012110 <_fflush_r>
 80104b4:	bd10      	pop	{r4, pc}
 80104b6:	bf00      	nop
 80104b8:	2001d504 	.word	0x2001d504
 80104bc:	2001d56c 	.word	0x2001d56c
 80104c0:	2001d5d4 	.word	0x2001d5d4

080104c4 <global_stdio_init.part.0>:
 80104c4:	b510      	push	{r4, lr}
 80104c6:	4b0b      	ldr	r3, [pc, #44]	; (80104f4 <global_stdio_init.part.0+0x30>)
 80104c8:	4c0b      	ldr	r4, [pc, #44]	; (80104f8 <global_stdio_init.part.0+0x34>)
 80104ca:	4a0c      	ldr	r2, [pc, #48]	; (80104fc <global_stdio_init.part.0+0x38>)
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	4620      	mov	r0, r4
 80104d0:	2200      	movs	r2, #0
 80104d2:	2104      	movs	r1, #4
 80104d4:	f7ff ff94 	bl	8010400 <std>
 80104d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80104dc:	2201      	movs	r2, #1
 80104de:	2109      	movs	r1, #9
 80104e0:	f7ff ff8e 	bl	8010400 <std>
 80104e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80104e8:	2202      	movs	r2, #2
 80104ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ee:	2112      	movs	r1, #18
 80104f0:	f7ff bf86 	b.w	8010400 <std>
 80104f4:	2001d63c 	.word	0x2001d63c
 80104f8:	2001d504 	.word	0x2001d504
 80104fc:	0801046d 	.word	0x0801046d

08010500 <__sfp_lock_acquire>:
 8010500:	4801      	ldr	r0, [pc, #4]	; (8010508 <__sfp_lock_acquire+0x8>)
 8010502:	f000 b920 	b.w	8010746 <__retarget_lock_acquire_recursive>
 8010506:	bf00      	nop
 8010508:	2001d645 	.word	0x2001d645

0801050c <__sfp_lock_release>:
 801050c:	4801      	ldr	r0, [pc, #4]	; (8010514 <__sfp_lock_release+0x8>)
 801050e:	f000 b91b 	b.w	8010748 <__retarget_lock_release_recursive>
 8010512:	bf00      	nop
 8010514:	2001d645 	.word	0x2001d645

08010518 <__sinit>:
 8010518:	b510      	push	{r4, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	f7ff fff0 	bl	8010500 <__sfp_lock_acquire>
 8010520:	6a23      	ldr	r3, [r4, #32]
 8010522:	b11b      	cbz	r3, 801052c <__sinit+0x14>
 8010524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010528:	f7ff bff0 	b.w	801050c <__sfp_lock_release>
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <__sinit+0x28>)
 801052e:	6223      	str	r3, [r4, #32]
 8010530:	4b04      	ldr	r3, [pc, #16]	; (8010544 <__sinit+0x2c>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1f5      	bne.n	8010524 <__sinit+0xc>
 8010538:	f7ff ffc4 	bl	80104c4 <global_stdio_init.part.0>
 801053c:	e7f2      	b.n	8010524 <__sinit+0xc>
 801053e:	bf00      	nop
 8010540:	08010485 	.word	0x08010485
 8010544:	2001d63c 	.word	0x2001d63c

08010548 <_fwalk_sglue>:
 8010548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801054c:	4607      	mov	r7, r0
 801054e:	4688      	mov	r8, r1
 8010550:	4614      	mov	r4, r2
 8010552:	2600      	movs	r6, #0
 8010554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010558:	f1b9 0901 	subs.w	r9, r9, #1
 801055c:	d505      	bpl.n	801056a <_fwalk_sglue+0x22>
 801055e:	6824      	ldr	r4, [r4, #0]
 8010560:	2c00      	cmp	r4, #0
 8010562:	d1f7      	bne.n	8010554 <_fwalk_sglue+0xc>
 8010564:	4630      	mov	r0, r6
 8010566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801056a:	89ab      	ldrh	r3, [r5, #12]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d907      	bls.n	8010580 <_fwalk_sglue+0x38>
 8010570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010574:	3301      	adds	r3, #1
 8010576:	d003      	beq.n	8010580 <_fwalk_sglue+0x38>
 8010578:	4629      	mov	r1, r5
 801057a:	4638      	mov	r0, r7
 801057c:	47c0      	blx	r8
 801057e:	4306      	orrs	r6, r0
 8010580:	3568      	adds	r5, #104	; 0x68
 8010582:	e7e9      	b.n	8010558 <_fwalk_sglue+0x10>

08010584 <siprintf>:
 8010584:	b40e      	push	{r1, r2, r3}
 8010586:	b500      	push	{lr}
 8010588:	b09c      	sub	sp, #112	; 0x70
 801058a:	ab1d      	add	r3, sp, #116	; 0x74
 801058c:	9002      	str	r0, [sp, #8]
 801058e:	9006      	str	r0, [sp, #24]
 8010590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010594:	4809      	ldr	r0, [pc, #36]	; (80105bc <siprintf+0x38>)
 8010596:	9107      	str	r1, [sp, #28]
 8010598:	9104      	str	r1, [sp, #16]
 801059a:	4909      	ldr	r1, [pc, #36]	; (80105c0 <siprintf+0x3c>)
 801059c:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a0:	9105      	str	r1, [sp, #20]
 80105a2:	6800      	ldr	r0, [r0, #0]
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	a902      	add	r1, sp, #8
 80105a8:	f001 fc2e 	bl	8011e08 <_svfiprintf_r>
 80105ac:	9b02      	ldr	r3, [sp, #8]
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
 80105b2:	b01c      	add	sp, #112	; 0x70
 80105b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105b8:	b003      	add	sp, #12
 80105ba:	4770      	bx	lr
 80105bc:	200000c4 	.word	0x200000c4
 80105c0:	ffff0208 	.word	0xffff0208

080105c4 <__sread>:
 80105c4:	b510      	push	{r4, lr}
 80105c6:	460c      	mov	r4, r1
 80105c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105cc:	f000 f86c 	bl	80106a8 <_read_r>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	bfab      	itete	ge
 80105d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80105d6:	89a3      	ldrhlt	r3, [r4, #12]
 80105d8:	181b      	addge	r3, r3, r0
 80105da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80105de:	bfac      	ite	ge
 80105e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80105e2:	81a3      	strhlt	r3, [r4, #12]
 80105e4:	bd10      	pop	{r4, pc}

080105e6 <__swrite>:
 80105e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ea:	461f      	mov	r7, r3
 80105ec:	898b      	ldrh	r3, [r1, #12]
 80105ee:	05db      	lsls	r3, r3, #23
 80105f0:	4605      	mov	r5, r0
 80105f2:	460c      	mov	r4, r1
 80105f4:	4616      	mov	r6, r2
 80105f6:	d505      	bpl.n	8010604 <__swrite+0x1e>
 80105f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105fc:	2302      	movs	r3, #2
 80105fe:	2200      	movs	r2, #0
 8010600:	f000 f840 	bl	8010684 <_lseek_r>
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801060a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	4632      	mov	r2, r6
 8010612:	463b      	mov	r3, r7
 8010614:	4628      	mov	r0, r5
 8010616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801061a:	f000 b857 	b.w	80106cc <_write_r>

0801061e <__sseek>:
 801061e:	b510      	push	{r4, lr}
 8010620:	460c      	mov	r4, r1
 8010622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010626:	f000 f82d 	bl	8010684 <_lseek_r>
 801062a:	1c43      	adds	r3, r0, #1
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	bf15      	itete	ne
 8010630:	6560      	strne	r0, [r4, #84]	; 0x54
 8010632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801063a:	81a3      	strheq	r3, [r4, #12]
 801063c:	bf18      	it	ne
 801063e:	81a3      	strhne	r3, [r4, #12]
 8010640:	bd10      	pop	{r4, pc}

08010642 <__sclose>:
 8010642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010646:	f000 b80d 	b.w	8010664 <_close_r>

0801064a <memset>:
 801064a:	4402      	add	r2, r0
 801064c:	4603      	mov	r3, r0
 801064e:	4293      	cmp	r3, r2
 8010650:	d100      	bne.n	8010654 <memset+0xa>
 8010652:	4770      	bx	lr
 8010654:	f803 1b01 	strb.w	r1, [r3], #1
 8010658:	e7f9      	b.n	801064e <memset+0x4>
	...

0801065c <_localeconv_r>:
 801065c:	4800      	ldr	r0, [pc, #0]	; (8010660 <_localeconv_r+0x4>)
 801065e:	4770      	bx	lr
 8010660:	200001b8 	.word	0x200001b8

08010664 <_close_r>:
 8010664:	b538      	push	{r3, r4, r5, lr}
 8010666:	4d06      	ldr	r5, [pc, #24]	; (8010680 <_close_r+0x1c>)
 8010668:	2300      	movs	r3, #0
 801066a:	4604      	mov	r4, r0
 801066c:	4608      	mov	r0, r1
 801066e:	602b      	str	r3, [r5, #0]
 8010670:	f7f6 ffef 	bl	8007652 <_close>
 8010674:	1c43      	adds	r3, r0, #1
 8010676:	d102      	bne.n	801067e <_close_r+0x1a>
 8010678:	682b      	ldr	r3, [r5, #0]
 801067a:	b103      	cbz	r3, 801067e <_close_r+0x1a>
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	2001d640 	.word	0x2001d640

08010684 <_lseek_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4d07      	ldr	r5, [pc, #28]	; (80106a4 <_lseek_r+0x20>)
 8010688:	4604      	mov	r4, r0
 801068a:	4608      	mov	r0, r1
 801068c:	4611      	mov	r1, r2
 801068e:	2200      	movs	r2, #0
 8010690:	602a      	str	r2, [r5, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	f7f7 f804 	bl	80076a0 <_lseek>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d102      	bne.n	80106a2 <_lseek_r+0x1e>
 801069c:	682b      	ldr	r3, [r5, #0]
 801069e:	b103      	cbz	r3, 80106a2 <_lseek_r+0x1e>
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	bd38      	pop	{r3, r4, r5, pc}
 80106a4:	2001d640 	.word	0x2001d640

080106a8 <_read_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4d07      	ldr	r5, [pc, #28]	; (80106c8 <_read_r+0x20>)
 80106ac:	4604      	mov	r4, r0
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	2200      	movs	r2, #0
 80106b4:	602a      	str	r2, [r5, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	f7f6 ff92 	bl	80075e0 <_read>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d102      	bne.n	80106c6 <_read_r+0x1e>
 80106c0:	682b      	ldr	r3, [r5, #0]
 80106c2:	b103      	cbz	r3, 80106c6 <_read_r+0x1e>
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	2001d640 	.word	0x2001d640

080106cc <_write_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	4d07      	ldr	r5, [pc, #28]	; (80106ec <_write_r+0x20>)
 80106d0:	4604      	mov	r4, r0
 80106d2:	4608      	mov	r0, r1
 80106d4:	4611      	mov	r1, r2
 80106d6:	2200      	movs	r2, #0
 80106d8:	602a      	str	r2, [r5, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	f7f6 ff9d 	bl	800761a <_write>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_write_r+0x1e>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_write_r+0x1e>
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	2001d640 	.word	0x2001d640

080106f0 <__errno>:
 80106f0:	4b01      	ldr	r3, [pc, #4]	; (80106f8 <__errno+0x8>)
 80106f2:	6818      	ldr	r0, [r3, #0]
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	200000c4 	.word	0x200000c4

080106fc <__libc_init_array>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	4d0d      	ldr	r5, [pc, #52]	; (8010734 <__libc_init_array+0x38>)
 8010700:	4c0d      	ldr	r4, [pc, #52]	; (8010738 <__libc_init_array+0x3c>)
 8010702:	1b64      	subs	r4, r4, r5
 8010704:	10a4      	asrs	r4, r4, #2
 8010706:	2600      	movs	r6, #0
 8010708:	42a6      	cmp	r6, r4
 801070a:	d109      	bne.n	8010720 <__libc_init_array+0x24>
 801070c:	4d0b      	ldr	r5, [pc, #44]	; (801073c <__libc_init_array+0x40>)
 801070e:	4c0c      	ldr	r4, [pc, #48]	; (8010740 <__libc_init_array+0x44>)
 8010710:	f003 fc9e 	bl	8014050 <_init>
 8010714:	1b64      	subs	r4, r4, r5
 8010716:	10a4      	asrs	r4, r4, #2
 8010718:	2600      	movs	r6, #0
 801071a:	42a6      	cmp	r6, r4
 801071c:	d105      	bne.n	801072a <__libc_init_array+0x2e>
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	f855 3b04 	ldr.w	r3, [r5], #4
 8010724:	4798      	blx	r3
 8010726:	3601      	adds	r6, #1
 8010728:	e7ee      	b.n	8010708 <__libc_init_array+0xc>
 801072a:	f855 3b04 	ldr.w	r3, [r5], #4
 801072e:	4798      	blx	r3
 8010730:	3601      	adds	r6, #1
 8010732:	e7f2      	b.n	801071a <__libc_init_array+0x1e>
 8010734:	08014b70 	.word	0x08014b70
 8010738:	08014b70 	.word	0x08014b70
 801073c:	08014b70 	.word	0x08014b70
 8010740:	08014b74 	.word	0x08014b74

08010744 <__retarget_lock_init_recursive>:
 8010744:	4770      	bx	lr

08010746 <__retarget_lock_acquire_recursive>:
 8010746:	4770      	bx	lr

08010748 <__retarget_lock_release_recursive>:
 8010748:	4770      	bx	lr

0801074a <memcpy>:
 801074a:	440a      	add	r2, r1
 801074c:	4291      	cmp	r1, r2
 801074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010752:	d100      	bne.n	8010756 <memcpy+0xc>
 8010754:	4770      	bx	lr
 8010756:	b510      	push	{r4, lr}
 8010758:	f811 4b01 	ldrb.w	r4, [r1], #1
 801075c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010760:	4291      	cmp	r1, r2
 8010762:	d1f9      	bne.n	8010758 <memcpy+0xe>
 8010764:	bd10      	pop	{r4, pc}

08010766 <quorem>:
 8010766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076a:	6903      	ldr	r3, [r0, #16]
 801076c:	690c      	ldr	r4, [r1, #16]
 801076e:	42a3      	cmp	r3, r4
 8010770:	4607      	mov	r7, r0
 8010772:	db7e      	blt.n	8010872 <quorem+0x10c>
 8010774:	3c01      	subs	r4, #1
 8010776:	f101 0814 	add.w	r8, r1, #20
 801077a:	f100 0514 	add.w	r5, r0, #20
 801077e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801078c:	3301      	adds	r3, #1
 801078e:	429a      	cmp	r2, r3
 8010790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010798:	fbb2 f6f3 	udiv	r6, r2, r3
 801079c:	d331      	bcc.n	8010802 <quorem+0x9c>
 801079e:	f04f 0e00 	mov.w	lr, #0
 80107a2:	4640      	mov	r0, r8
 80107a4:	46ac      	mov	ip, r5
 80107a6:	46f2      	mov	sl, lr
 80107a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80107ac:	b293      	uxth	r3, r2
 80107ae:	fb06 e303 	mla	r3, r6, r3, lr
 80107b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107b6:	0c1a      	lsrs	r2, r3, #16
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	ebaa 0303 	sub.w	r3, sl, r3
 80107be:	f8dc a000 	ldr.w	sl, [ip]
 80107c2:	fa13 f38a 	uxtah	r3, r3, sl
 80107c6:	fb06 220e 	mla	r2, r6, lr, r2
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	9b00      	ldr	r3, [sp, #0]
 80107ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107d2:	b292      	uxth	r2, r2
 80107d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80107d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80107e0:	4581      	cmp	r9, r0
 80107e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107e6:	f84c 3b04 	str.w	r3, [ip], #4
 80107ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107ee:	d2db      	bcs.n	80107a8 <quorem+0x42>
 80107f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80107f4:	b92b      	cbnz	r3, 8010802 <quorem+0x9c>
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	3b04      	subs	r3, #4
 80107fa:	429d      	cmp	r5, r3
 80107fc:	461a      	mov	r2, r3
 80107fe:	d32c      	bcc.n	801085a <quorem+0xf4>
 8010800:	613c      	str	r4, [r7, #16]
 8010802:	4638      	mov	r0, r7
 8010804:	f001 f9a6 	bl	8011b54 <__mcmp>
 8010808:	2800      	cmp	r0, #0
 801080a:	db22      	blt.n	8010852 <quorem+0xec>
 801080c:	3601      	adds	r6, #1
 801080e:	4629      	mov	r1, r5
 8010810:	2000      	movs	r0, #0
 8010812:	f858 2b04 	ldr.w	r2, [r8], #4
 8010816:	f8d1 c000 	ldr.w	ip, [r1]
 801081a:	b293      	uxth	r3, r2
 801081c:	1ac3      	subs	r3, r0, r3
 801081e:	0c12      	lsrs	r2, r2, #16
 8010820:	fa13 f38c 	uxtah	r3, r3, ip
 8010824:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801082c:	b29b      	uxth	r3, r3
 801082e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010832:	45c1      	cmp	r9, r8
 8010834:	f841 3b04 	str.w	r3, [r1], #4
 8010838:	ea4f 4022 	mov.w	r0, r2, asr #16
 801083c:	d2e9      	bcs.n	8010812 <quorem+0xac>
 801083e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010846:	b922      	cbnz	r2, 8010852 <quorem+0xec>
 8010848:	3b04      	subs	r3, #4
 801084a:	429d      	cmp	r5, r3
 801084c:	461a      	mov	r2, r3
 801084e:	d30a      	bcc.n	8010866 <quorem+0x100>
 8010850:	613c      	str	r4, [r7, #16]
 8010852:	4630      	mov	r0, r6
 8010854:	b003      	add	sp, #12
 8010856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085a:	6812      	ldr	r2, [r2, #0]
 801085c:	3b04      	subs	r3, #4
 801085e:	2a00      	cmp	r2, #0
 8010860:	d1ce      	bne.n	8010800 <quorem+0x9a>
 8010862:	3c01      	subs	r4, #1
 8010864:	e7c9      	b.n	80107fa <quorem+0x94>
 8010866:	6812      	ldr	r2, [r2, #0]
 8010868:	3b04      	subs	r3, #4
 801086a:	2a00      	cmp	r2, #0
 801086c:	d1f0      	bne.n	8010850 <quorem+0xea>
 801086e:	3c01      	subs	r4, #1
 8010870:	e7eb      	b.n	801084a <quorem+0xe4>
 8010872:	2000      	movs	r0, #0
 8010874:	e7ee      	b.n	8010854 <quorem+0xee>
	...

08010878 <_dtoa_r>:
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	ed2d 8b04 	vpush	{d8-d9}
 8010880:	69c5      	ldr	r5, [r0, #28]
 8010882:	b093      	sub	sp, #76	; 0x4c
 8010884:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010888:	ec57 6b10 	vmov	r6, r7, d0
 801088c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010890:	9107      	str	r1, [sp, #28]
 8010892:	4604      	mov	r4, r0
 8010894:	920a      	str	r2, [sp, #40]	; 0x28
 8010896:	930d      	str	r3, [sp, #52]	; 0x34
 8010898:	b975      	cbnz	r5, 80108b8 <_dtoa_r+0x40>
 801089a:	2010      	movs	r0, #16
 801089c:	f000 fe2a 	bl	80114f4 <malloc>
 80108a0:	4602      	mov	r2, r0
 80108a2:	61e0      	str	r0, [r4, #28]
 80108a4:	b920      	cbnz	r0, 80108b0 <_dtoa_r+0x38>
 80108a6:	4bae      	ldr	r3, [pc, #696]	; (8010b60 <_dtoa_r+0x2e8>)
 80108a8:	21ef      	movs	r1, #239	; 0xef
 80108aa:	48ae      	ldr	r0, [pc, #696]	; (8010b64 <_dtoa_r+0x2ec>)
 80108ac:	f001 fc82 	bl	80121b4 <__assert_func>
 80108b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108b4:	6005      	str	r5, [r0, #0]
 80108b6:	60c5      	str	r5, [r0, #12]
 80108b8:	69e3      	ldr	r3, [r4, #28]
 80108ba:	6819      	ldr	r1, [r3, #0]
 80108bc:	b151      	cbz	r1, 80108d4 <_dtoa_r+0x5c>
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	604a      	str	r2, [r1, #4]
 80108c2:	2301      	movs	r3, #1
 80108c4:	4093      	lsls	r3, r2
 80108c6:	608b      	str	r3, [r1, #8]
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 ff07 	bl	80116dc <_Bfree>
 80108ce:	69e3      	ldr	r3, [r4, #28]
 80108d0:	2200      	movs	r2, #0
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	1e3b      	subs	r3, r7, #0
 80108d6:	bfbb      	ittet	lt
 80108d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108dc:	9303      	strlt	r3, [sp, #12]
 80108de:	2300      	movge	r3, #0
 80108e0:	2201      	movlt	r2, #1
 80108e2:	bfac      	ite	ge
 80108e4:	f8c8 3000 	strge.w	r3, [r8]
 80108e8:	f8c8 2000 	strlt.w	r2, [r8]
 80108ec:	4b9e      	ldr	r3, [pc, #632]	; (8010b68 <_dtoa_r+0x2f0>)
 80108ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80108f2:	ea33 0308 	bics.w	r3, r3, r8
 80108f6:	d11b      	bne.n	8010930 <_dtoa_r+0xb8>
 80108f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80108fe:	6013      	str	r3, [r2, #0]
 8010900:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010904:	4333      	orrs	r3, r6
 8010906:	f000 8593 	beq.w	8011430 <_dtoa_r+0xbb8>
 801090a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801090c:	b963      	cbnz	r3, 8010928 <_dtoa_r+0xb0>
 801090e:	4b97      	ldr	r3, [pc, #604]	; (8010b6c <_dtoa_r+0x2f4>)
 8010910:	e027      	b.n	8010962 <_dtoa_r+0xea>
 8010912:	4b97      	ldr	r3, [pc, #604]	; (8010b70 <_dtoa_r+0x2f8>)
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	3308      	adds	r3, #8
 8010918:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801091a:	6013      	str	r3, [r2, #0]
 801091c:	9800      	ldr	r0, [sp, #0]
 801091e:	b013      	add	sp, #76	; 0x4c
 8010920:	ecbd 8b04 	vpop	{d8-d9}
 8010924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010928:	4b90      	ldr	r3, [pc, #576]	; (8010b6c <_dtoa_r+0x2f4>)
 801092a:	9300      	str	r3, [sp, #0]
 801092c:	3303      	adds	r3, #3
 801092e:	e7f3      	b.n	8010918 <_dtoa_r+0xa0>
 8010930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010934:	2200      	movs	r2, #0
 8010936:	ec51 0b17 	vmov	r0, r1, d7
 801093a:	eeb0 8a47 	vmov.f32	s16, s14
 801093e:	eef0 8a67 	vmov.f32	s17, s15
 8010942:	2300      	movs	r3, #0
 8010944:	f7f0 f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 8010948:	4681      	mov	r9, r0
 801094a:	b160      	cbz	r0, 8010966 <_dtoa_r+0xee>
 801094c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801094e:	2301      	movs	r3, #1
 8010950:	6013      	str	r3, [r2, #0]
 8010952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 8568 	beq.w	801142a <_dtoa_r+0xbb2>
 801095a:	4b86      	ldr	r3, [pc, #536]	; (8010b74 <_dtoa_r+0x2fc>)
 801095c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801095e:	6013      	str	r3, [r2, #0]
 8010960:	3b01      	subs	r3, #1
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	e7da      	b.n	801091c <_dtoa_r+0xa4>
 8010966:	aa10      	add	r2, sp, #64	; 0x40
 8010968:	a911      	add	r1, sp, #68	; 0x44
 801096a:	4620      	mov	r0, r4
 801096c:	eeb0 0a48 	vmov.f32	s0, s16
 8010970:	eef0 0a68 	vmov.f32	s1, s17
 8010974:	f001 f994 	bl	8011ca0 <__d2b>
 8010978:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801097c:	4682      	mov	sl, r0
 801097e:	2d00      	cmp	r5, #0
 8010980:	d07f      	beq.n	8010a82 <_dtoa_r+0x20a>
 8010982:	ee18 3a90 	vmov	r3, s17
 8010986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801098a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801098e:	ec51 0b18 	vmov	r0, r1, d8
 8010992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801099a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801099e:	4619      	mov	r1, r3
 80109a0:	2200      	movs	r2, #0
 80109a2:	4b75      	ldr	r3, [pc, #468]	; (8010b78 <_dtoa_r+0x300>)
 80109a4:	f7ef fc90 	bl	80002c8 <__aeabi_dsub>
 80109a8:	a367      	add	r3, pc, #412	; (adr r3, 8010b48 <_dtoa_r+0x2d0>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	f7ef fe43 	bl	8000638 <__aeabi_dmul>
 80109b2:	a367      	add	r3, pc, #412	; (adr r3, 8010b50 <_dtoa_r+0x2d8>)
 80109b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b8:	f7ef fc88 	bl	80002cc <__adddf3>
 80109bc:	4606      	mov	r6, r0
 80109be:	4628      	mov	r0, r5
 80109c0:	460f      	mov	r7, r1
 80109c2:	f7ef fdcf 	bl	8000564 <__aeabi_i2d>
 80109c6:	a364      	add	r3, pc, #400	; (adr r3, 8010b58 <_dtoa_r+0x2e0>)
 80109c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109cc:	f7ef fe34 	bl	8000638 <__aeabi_dmul>
 80109d0:	4602      	mov	r2, r0
 80109d2:	460b      	mov	r3, r1
 80109d4:	4630      	mov	r0, r6
 80109d6:	4639      	mov	r1, r7
 80109d8:	f7ef fc78 	bl	80002cc <__adddf3>
 80109dc:	4606      	mov	r6, r0
 80109de:	460f      	mov	r7, r1
 80109e0:	f7f0 f8da 	bl	8000b98 <__aeabi_d2iz>
 80109e4:	2200      	movs	r2, #0
 80109e6:	4683      	mov	fp, r0
 80109e8:	2300      	movs	r3, #0
 80109ea:	4630      	mov	r0, r6
 80109ec:	4639      	mov	r1, r7
 80109ee:	f7f0 f895 	bl	8000b1c <__aeabi_dcmplt>
 80109f2:	b148      	cbz	r0, 8010a08 <_dtoa_r+0x190>
 80109f4:	4658      	mov	r0, fp
 80109f6:	f7ef fdb5 	bl	8000564 <__aeabi_i2d>
 80109fa:	4632      	mov	r2, r6
 80109fc:	463b      	mov	r3, r7
 80109fe:	f7f0 f883 	bl	8000b08 <__aeabi_dcmpeq>
 8010a02:	b908      	cbnz	r0, 8010a08 <_dtoa_r+0x190>
 8010a04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a08:	f1bb 0f16 	cmp.w	fp, #22
 8010a0c:	d857      	bhi.n	8010abe <_dtoa_r+0x246>
 8010a0e:	4b5b      	ldr	r3, [pc, #364]	; (8010b7c <_dtoa_r+0x304>)
 8010a10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	ec51 0b18 	vmov	r0, r1, d8
 8010a1c:	f7f0 f87e 	bl	8000b1c <__aeabi_dcmplt>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	d04e      	beq.n	8010ac2 <_dtoa_r+0x24a>
 8010a24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a28:	2300      	movs	r3, #0
 8010a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8010a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a2e:	1b5b      	subs	r3, r3, r5
 8010a30:	1e5a      	subs	r2, r3, #1
 8010a32:	bf45      	ittet	mi
 8010a34:	f1c3 0301 	rsbmi	r3, r3, #1
 8010a38:	9305      	strmi	r3, [sp, #20]
 8010a3a:	2300      	movpl	r3, #0
 8010a3c:	2300      	movmi	r3, #0
 8010a3e:	9206      	str	r2, [sp, #24]
 8010a40:	bf54      	ite	pl
 8010a42:	9305      	strpl	r3, [sp, #20]
 8010a44:	9306      	strmi	r3, [sp, #24]
 8010a46:	f1bb 0f00 	cmp.w	fp, #0
 8010a4a:	db3c      	blt.n	8010ac6 <_dtoa_r+0x24e>
 8010a4c:	9b06      	ldr	r3, [sp, #24]
 8010a4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010a52:	445b      	add	r3, fp
 8010a54:	9306      	str	r3, [sp, #24]
 8010a56:	2300      	movs	r3, #0
 8010a58:	9308      	str	r3, [sp, #32]
 8010a5a:	9b07      	ldr	r3, [sp, #28]
 8010a5c:	2b09      	cmp	r3, #9
 8010a5e:	d868      	bhi.n	8010b32 <_dtoa_r+0x2ba>
 8010a60:	2b05      	cmp	r3, #5
 8010a62:	bfc4      	itt	gt
 8010a64:	3b04      	subgt	r3, #4
 8010a66:	9307      	strgt	r3, [sp, #28]
 8010a68:	9b07      	ldr	r3, [sp, #28]
 8010a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8010a6e:	bfcc      	ite	gt
 8010a70:	2500      	movgt	r5, #0
 8010a72:	2501      	movle	r5, #1
 8010a74:	2b03      	cmp	r3, #3
 8010a76:	f200 8085 	bhi.w	8010b84 <_dtoa_r+0x30c>
 8010a7a:	e8df f003 	tbb	[pc, r3]
 8010a7e:	3b2e      	.short	0x3b2e
 8010a80:	5839      	.short	0x5839
 8010a82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a86:	441d      	add	r5, r3
 8010a88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a8c:	2b20      	cmp	r3, #32
 8010a8e:	bfc1      	itttt	gt
 8010a90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a94:	fa08 f803 	lslgt.w	r8, r8, r3
 8010a98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010a9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010aa0:	bfd6      	itet	le
 8010aa2:	f1c3 0320 	rsble	r3, r3, #32
 8010aa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8010aaa:	fa06 f003 	lslle.w	r0, r6, r3
 8010aae:	f7ef fd49 	bl	8000544 <__aeabi_ui2d>
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010ab8:	3d01      	subs	r5, #1
 8010aba:	920e      	str	r2, [sp, #56]	; 0x38
 8010abc:	e76f      	b.n	801099e <_dtoa_r+0x126>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e7b3      	b.n	8010a2a <_dtoa_r+0x1b2>
 8010ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8010ac4:	e7b2      	b.n	8010a2c <_dtoa_r+0x1b4>
 8010ac6:	9b05      	ldr	r3, [sp, #20]
 8010ac8:	eba3 030b 	sub.w	r3, r3, fp
 8010acc:	9305      	str	r3, [sp, #20]
 8010ace:	f1cb 0300 	rsb	r3, fp, #0
 8010ad2:	9308      	str	r3, [sp, #32]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ad8:	e7bf      	b.n	8010a5a <_dtoa_r+0x1e2>
 8010ada:	2300      	movs	r3, #0
 8010adc:	9309      	str	r3, [sp, #36]	; 0x24
 8010ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	dc52      	bgt.n	8010b8a <_dtoa_r+0x312>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	9301      	str	r3, [sp, #4]
 8010ae8:	9304      	str	r3, [sp, #16]
 8010aea:	461a      	mov	r2, r3
 8010aec:	920a      	str	r2, [sp, #40]	; 0x28
 8010aee:	e00b      	b.n	8010b08 <_dtoa_r+0x290>
 8010af0:	2301      	movs	r3, #1
 8010af2:	e7f3      	b.n	8010adc <_dtoa_r+0x264>
 8010af4:	2300      	movs	r3, #0
 8010af6:	9309      	str	r3, [sp, #36]	; 0x24
 8010af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010afa:	445b      	add	r3, fp
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	3301      	adds	r3, #1
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	bfb8      	it	lt
 8010b06:	2301      	movlt	r3, #1
 8010b08:	69e0      	ldr	r0, [r4, #28]
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	2204      	movs	r2, #4
 8010b0e:	f102 0614 	add.w	r6, r2, #20
 8010b12:	429e      	cmp	r6, r3
 8010b14:	d93d      	bls.n	8010b92 <_dtoa_r+0x31a>
 8010b16:	6041      	str	r1, [r0, #4]
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f000 fd9f 	bl	801165c <_Balloc>
 8010b1e:	9000      	str	r0, [sp, #0]
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d139      	bne.n	8010b98 <_dtoa_r+0x320>
 8010b24:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <_dtoa_r+0x308>)
 8010b26:	4602      	mov	r2, r0
 8010b28:	f240 11af 	movw	r1, #431	; 0x1af
 8010b2c:	e6bd      	b.n	80108aa <_dtoa_r+0x32>
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e7e1      	b.n	8010af6 <_dtoa_r+0x27e>
 8010b32:	2501      	movs	r5, #1
 8010b34:	2300      	movs	r3, #0
 8010b36:	9307      	str	r3, [sp, #28]
 8010b38:	9509      	str	r5, [sp, #36]	; 0x24
 8010b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	9304      	str	r3, [sp, #16]
 8010b42:	2200      	movs	r2, #0
 8010b44:	2312      	movs	r3, #18
 8010b46:	e7d1      	b.n	8010aec <_dtoa_r+0x274>
 8010b48:	636f4361 	.word	0x636f4361
 8010b4c:	3fd287a7 	.word	0x3fd287a7
 8010b50:	8b60c8b3 	.word	0x8b60c8b3
 8010b54:	3fc68a28 	.word	0x3fc68a28
 8010b58:	509f79fb 	.word	0x509f79fb
 8010b5c:	3fd34413 	.word	0x3fd34413
 8010b60:	080145ed 	.word	0x080145ed
 8010b64:	08014604 	.word	0x08014604
 8010b68:	7ff00000 	.word	0x7ff00000
 8010b6c:	080145e9 	.word	0x080145e9
 8010b70:	080145e0 	.word	0x080145e0
 8010b74:	080145bd 	.word	0x080145bd
 8010b78:	3ff80000 	.word	0x3ff80000
 8010b7c:	080146f0 	.word	0x080146f0
 8010b80:	0801465c 	.word	0x0801465c
 8010b84:	2301      	movs	r3, #1
 8010b86:	9309      	str	r3, [sp, #36]	; 0x24
 8010b88:	e7d7      	b.n	8010b3a <_dtoa_r+0x2c2>
 8010b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b8c:	9301      	str	r3, [sp, #4]
 8010b8e:	9304      	str	r3, [sp, #16]
 8010b90:	e7ba      	b.n	8010b08 <_dtoa_r+0x290>
 8010b92:	3101      	adds	r1, #1
 8010b94:	0052      	lsls	r2, r2, #1
 8010b96:	e7ba      	b.n	8010b0e <_dtoa_r+0x296>
 8010b98:	69e3      	ldr	r3, [r4, #28]
 8010b9a:	9a00      	ldr	r2, [sp, #0]
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	9b04      	ldr	r3, [sp, #16]
 8010ba0:	2b0e      	cmp	r3, #14
 8010ba2:	f200 80a8 	bhi.w	8010cf6 <_dtoa_r+0x47e>
 8010ba6:	2d00      	cmp	r5, #0
 8010ba8:	f000 80a5 	beq.w	8010cf6 <_dtoa_r+0x47e>
 8010bac:	f1bb 0f00 	cmp.w	fp, #0
 8010bb0:	dd38      	ble.n	8010c24 <_dtoa_r+0x3ac>
 8010bb2:	4bc0      	ldr	r3, [pc, #768]	; (8010eb4 <_dtoa_r+0x63c>)
 8010bb4:	f00b 020f 	and.w	r2, fp, #15
 8010bb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010bc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010bc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010bc8:	d019      	beq.n	8010bfe <_dtoa_r+0x386>
 8010bca:	4bbb      	ldr	r3, [pc, #748]	; (8010eb8 <_dtoa_r+0x640>)
 8010bcc:	ec51 0b18 	vmov	r0, r1, d8
 8010bd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010bd4:	f7ef fe5a 	bl	800088c <__aeabi_ddiv>
 8010bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bdc:	f008 080f 	and.w	r8, r8, #15
 8010be0:	2503      	movs	r5, #3
 8010be2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010eb8 <_dtoa_r+0x640>
 8010be6:	f1b8 0f00 	cmp.w	r8, #0
 8010bea:	d10a      	bne.n	8010c02 <_dtoa_r+0x38a>
 8010bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bf0:	4632      	mov	r2, r6
 8010bf2:	463b      	mov	r3, r7
 8010bf4:	f7ef fe4a 	bl	800088c <__aeabi_ddiv>
 8010bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bfc:	e02b      	b.n	8010c56 <_dtoa_r+0x3de>
 8010bfe:	2502      	movs	r5, #2
 8010c00:	e7ef      	b.n	8010be2 <_dtoa_r+0x36a>
 8010c02:	f018 0f01 	tst.w	r8, #1
 8010c06:	d008      	beq.n	8010c1a <_dtoa_r+0x3a2>
 8010c08:	4630      	mov	r0, r6
 8010c0a:	4639      	mov	r1, r7
 8010c0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c10:	f7ef fd12 	bl	8000638 <__aeabi_dmul>
 8010c14:	3501      	adds	r5, #1
 8010c16:	4606      	mov	r6, r0
 8010c18:	460f      	mov	r7, r1
 8010c1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c1e:	f109 0908 	add.w	r9, r9, #8
 8010c22:	e7e0      	b.n	8010be6 <_dtoa_r+0x36e>
 8010c24:	f000 809f 	beq.w	8010d66 <_dtoa_r+0x4ee>
 8010c28:	f1cb 0600 	rsb	r6, fp, #0
 8010c2c:	4ba1      	ldr	r3, [pc, #644]	; (8010eb4 <_dtoa_r+0x63c>)
 8010c2e:	4fa2      	ldr	r7, [pc, #648]	; (8010eb8 <_dtoa_r+0x640>)
 8010c30:	f006 020f 	and.w	r2, r6, #15
 8010c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	ec51 0b18 	vmov	r0, r1, d8
 8010c40:	f7ef fcfa 	bl	8000638 <__aeabi_dmul>
 8010c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c48:	1136      	asrs	r6, r6, #4
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	2502      	movs	r5, #2
 8010c4e:	2e00      	cmp	r6, #0
 8010c50:	d17e      	bne.n	8010d50 <_dtoa_r+0x4d8>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1d0      	bne.n	8010bf8 <_dtoa_r+0x380>
 8010c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f000 8084 	beq.w	8010d6a <_dtoa_r+0x4f2>
 8010c62:	4b96      	ldr	r3, [pc, #600]	; (8010ebc <_dtoa_r+0x644>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	4640      	mov	r0, r8
 8010c68:	4649      	mov	r1, r9
 8010c6a:	f7ef ff57 	bl	8000b1c <__aeabi_dcmplt>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d07b      	beq.n	8010d6a <_dtoa_r+0x4f2>
 8010c72:	9b04      	ldr	r3, [sp, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d078      	beq.n	8010d6a <_dtoa_r+0x4f2>
 8010c78:	9b01      	ldr	r3, [sp, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	dd39      	ble.n	8010cf2 <_dtoa_r+0x47a>
 8010c7e:	4b90      	ldr	r3, [pc, #576]	; (8010ec0 <_dtoa_r+0x648>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7ef fcd7 	bl	8000638 <__aeabi_dmul>
 8010c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c8e:	9e01      	ldr	r6, [sp, #4]
 8010c90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c94:	3501      	adds	r5, #1
 8010c96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f7ef fc62 	bl	8000564 <__aeabi_i2d>
 8010ca0:	4642      	mov	r2, r8
 8010ca2:	464b      	mov	r3, r9
 8010ca4:	f7ef fcc8 	bl	8000638 <__aeabi_dmul>
 8010ca8:	4b86      	ldr	r3, [pc, #536]	; (8010ec4 <_dtoa_r+0x64c>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f7ef fb0e 	bl	80002cc <__adddf3>
 8010cb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cb8:	9303      	str	r3, [sp, #12]
 8010cba:	2e00      	cmp	r6, #0
 8010cbc:	d158      	bne.n	8010d70 <_dtoa_r+0x4f8>
 8010cbe:	4b82      	ldr	r3, [pc, #520]	; (8010ec8 <_dtoa_r+0x650>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	4640      	mov	r0, r8
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	f7ef faff 	bl	80002c8 <__aeabi_dsub>
 8010cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cce:	4680      	mov	r8, r0
 8010cd0:	4689      	mov	r9, r1
 8010cd2:	f7ef ff41 	bl	8000b58 <__aeabi_dcmpgt>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	f040 8296 	bne.w	8011208 <_dtoa_r+0x990>
 8010cdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010ce0:	4640      	mov	r0, r8
 8010ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	f7ef ff18 	bl	8000b1c <__aeabi_dcmplt>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f040 8289 	bne.w	8011204 <_dtoa_r+0x98c>
 8010cf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f2c0 814e 	blt.w	8010f9a <_dtoa_r+0x722>
 8010cfe:	f1bb 0f0e 	cmp.w	fp, #14
 8010d02:	f300 814a 	bgt.w	8010f9a <_dtoa_r+0x722>
 8010d06:	4b6b      	ldr	r3, [pc, #428]	; (8010eb4 <_dtoa_r+0x63c>)
 8010d08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f280 80dc 	bge.w	8010ed0 <_dtoa_r+0x658>
 8010d18:	9b04      	ldr	r3, [sp, #16]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f300 80d8 	bgt.w	8010ed0 <_dtoa_r+0x658>
 8010d20:	f040 826f 	bne.w	8011202 <_dtoa_r+0x98a>
 8010d24:	4b68      	ldr	r3, [pc, #416]	; (8010ec8 <_dtoa_r+0x650>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	f7ef fc84 	bl	8000638 <__aeabi_dmul>
 8010d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d34:	f7ef ff06 	bl	8000b44 <__aeabi_dcmpge>
 8010d38:	9e04      	ldr	r6, [sp, #16]
 8010d3a:	4637      	mov	r7, r6
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	f040 8245 	bne.w	80111cc <_dtoa_r+0x954>
 8010d42:	9d00      	ldr	r5, [sp, #0]
 8010d44:	2331      	movs	r3, #49	; 0x31
 8010d46:	f805 3b01 	strb.w	r3, [r5], #1
 8010d4a:	f10b 0b01 	add.w	fp, fp, #1
 8010d4e:	e241      	b.n	80111d4 <_dtoa_r+0x95c>
 8010d50:	07f2      	lsls	r2, r6, #31
 8010d52:	d505      	bpl.n	8010d60 <_dtoa_r+0x4e8>
 8010d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d58:	f7ef fc6e 	bl	8000638 <__aeabi_dmul>
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	2301      	movs	r3, #1
 8010d60:	1076      	asrs	r6, r6, #1
 8010d62:	3708      	adds	r7, #8
 8010d64:	e773      	b.n	8010c4e <_dtoa_r+0x3d6>
 8010d66:	2502      	movs	r5, #2
 8010d68:	e775      	b.n	8010c56 <_dtoa_r+0x3de>
 8010d6a:	9e04      	ldr	r6, [sp, #16]
 8010d6c:	465f      	mov	r7, fp
 8010d6e:	e792      	b.n	8010c96 <_dtoa_r+0x41e>
 8010d70:	9900      	ldr	r1, [sp, #0]
 8010d72:	4b50      	ldr	r3, [pc, #320]	; (8010eb4 <_dtoa_r+0x63c>)
 8010d74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d78:	4431      	add	r1, r6
 8010d7a:	9102      	str	r1, [sp, #8]
 8010d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d7e:	eeb0 9a47 	vmov.f32	s18, s14
 8010d82:	eef0 9a67 	vmov.f32	s19, s15
 8010d86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	d044      	beq.n	8010e1c <_dtoa_r+0x5a4>
 8010d92:	494e      	ldr	r1, [pc, #312]	; (8010ecc <_dtoa_r+0x654>)
 8010d94:	2000      	movs	r0, #0
 8010d96:	f7ef fd79 	bl	800088c <__aeabi_ddiv>
 8010d9a:	ec53 2b19 	vmov	r2, r3, d9
 8010d9e:	f7ef fa93 	bl	80002c8 <__aeabi_dsub>
 8010da2:	9d00      	ldr	r5, [sp, #0]
 8010da4:	ec41 0b19 	vmov	d9, r0, r1
 8010da8:	4649      	mov	r1, r9
 8010daa:	4640      	mov	r0, r8
 8010dac:	f7ef fef4 	bl	8000b98 <__aeabi_d2iz>
 8010db0:	4606      	mov	r6, r0
 8010db2:	f7ef fbd7 	bl	8000564 <__aeabi_i2d>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	4640      	mov	r0, r8
 8010dbc:	4649      	mov	r1, r9
 8010dbe:	f7ef fa83 	bl	80002c8 <__aeabi_dsub>
 8010dc2:	3630      	adds	r6, #48	; 0x30
 8010dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8010dc8:	ec53 2b19 	vmov	r2, r3, d9
 8010dcc:	4680      	mov	r8, r0
 8010dce:	4689      	mov	r9, r1
 8010dd0:	f7ef fea4 	bl	8000b1c <__aeabi_dcmplt>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	d164      	bne.n	8010ea2 <_dtoa_r+0x62a>
 8010dd8:	4642      	mov	r2, r8
 8010dda:	464b      	mov	r3, r9
 8010ddc:	4937      	ldr	r1, [pc, #220]	; (8010ebc <_dtoa_r+0x644>)
 8010dde:	2000      	movs	r0, #0
 8010de0:	f7ef fa72 	bl	80002c8 <__aeabi_dsub>
 8010de4:	ec53 2b19 	vmov	r2, r3, d9
 8010de8:	f7ef fe98 	bl	8000b1c <__aeabi_dcmplt>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	f040 80b6 	bne.w	8010f5e <_dtoa_r+0x6e6>
 8010df2:	9b02      	ldr	r3, [sp, #8]
 8010df4:	429d      	cmp	r5, r3
 8010df6:	f43f af7c 	beq.w	8010cf2 <_dtoa_r+0x47a>
 8010dfa:	4b31      	ldr	r3, [pc, #196]	; (8010ec0 <_dtoa_r+0x648>)
 8010dfc:	ec51 0b19 	vmov	r0, r1, d9
 8010e00:	2200      	movs	r2, #0
 8010e02:	f7ef fc19 	bl	8000638 <__aeabi_dmul>
 8010e06:	4b2e      	ldr	r3, [pc, #184]	; (8010ec0 <_dtoa_r+0x648>)
 8010e08:	ec41 0b19 	vmov	d9, r0, r1
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fc11 	bl	8000638 <__aeabi_dmul>
 8010e16:	4680      	mov	r8, r0
 8010e18:	4689      	mov	r9, r1
 8010e1a:	e7c5      	b.n	8010da8 <_dtoa_r+0x530>
 8010e1c:	ec51 0b17 	vmov	r0, r1, d7
 8010e20:	f7ef fc0a 	bl	8000638 <__aeabi_dmul>
 8010e24:	9b02      	ldr	r3, [sp, #8]
 8010e26:	9d00      	ldr	r5, [sp, #0]
 8010e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e2a:	ec41 0b19 	vmov	d9, r0, r1
 8010e2e:	4649      	mov	r1, r9
 8010e30:	4640      	mov	r0, r8
 8010e32:	f7ef feb1 	bl	8000b98 <__aeabi_d2iz>
 8010e36:	4606      	mov	r6, r0
 8010e38:	f7ef fb94 	bl	8000564 <__aeabi_i2d>
 8010e3c:	3630      	adds	r6, #48	; 0x30
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	4640      	mov	r0, r8
 8010e44:	4649      	mov	r1, r9
 8010e46:	f7ef fa3f 	bl	80002c8 <__aeabi_dsub>
 8010e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8010e4e:	9b02      	ldr	r3, [sp, #8]
 8010e50:	429d      	cmp	r5, r3
 8010e52:	4680      	mov	r8, r0
 8010e54:	4689      	mov	r9, r1
 8010e56:	f04f 0200 	mov.w	r2, #0
 8010e5a:	d124      	bne.n	8010ea6 <_dtoa_r+0x62e>
 8010e5c:	4b1b      	ldr	r3, [pc, #108]	; (8010ecc <_dtoa_r+0x654>)
 8010e5e:	ec51 0b19 	vmov	r0, r1, d9
 8010e62:	f7ef fa33 	bl	80002cc <__adddf3>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4640      	mov	r0, r8
 8010e6c:	4649      	mov	r1, r9
 8010e6e:	f7ef fe73 	bl	8000b58 <__aeabi_dcmpgt>
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d173      	bne.n	8010f5e <_dtoa_r+0x6e6>
 8010e76:	ec53 2b19 	vmov	r2, r3, d9
 8010e7a:	4914      	ldr	r1, [pc, #80]	; (8010ecc <_dtoa_r+0x654>)
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	f7ef fa23 	bl	80002c8 <__aeabi_dsub>
 8010e82:	4602      	mov	r2, r0
 8010e84:	460b      	mov	r3, r1
 8010e86:	4640      	mov	r0, r8
 8010e88:	4649      	mov	r1, r9
 8010e8a:	f7ef fe47 	bl	8000b1c <__aeabi_dcmplt>
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	f43f af2f 	beq.w	8010cf2 <_dtoa_r+0x47a>
 8010e94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e96:	1e6b      	subs	r3, r5, #1
 8010e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e9e:	2b30      	cmp	r3, #48	; 0x30
 8010ea0:	d0f8      	beq.n	8010e94 <_dtoa_r+0x61c>
 8010ea2:	46bb      	mov	fp, r7
 8010ea4:	e04a      	b.n	8010f3c <_dtoa_r+0x6c4>
 8010ea6:	4b06      	ldr	r3, [pc, #24]	; (8010ec0 <_dtoa_r+0x648>)
 8010ea8:	f7ef fbc6 	bl	8000638 <__aeabi_dmul>
 8010eac:	4680      	mov	r8, r0
 8010eae:	4689      	mov	r9, r1
 8010eb0:	e7bd      	b.n	8010e2e <_dtoa_r+0x5b6>
 8010eb2:	bf00      	nop
 8010eb4:	080146f0 	.word	0x080146f0
 8010eb8:	080146c8 	.word	0x080146c8
 8010ebc:	3ff00000 	.word	0x3ff00000
 8010ec0:	40240000 	.word	0x40240000
 8010ec4:	401c0000 	.word	0x401c0000
 8010ec8:	40140000 	.word	0x40140000
 8010ecc:	3fe00000 	.word	0x3fe00000
 8010ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ed4:	9d00      	ldr	r5, [sp, #0]
 8010ed6:	4642      	mov	r2, r8
 8010ed8:	464b      	mov	r3, r9
 8010eda:	4630      	mov	r0, r6
 8010edc:	4639      	mov	r1, r7
 8010ede:	f7ef fcd5 	bl	800088c <__aeabi_ddiv>
 8010ee2:	f7ef fe59 	bl	8000b98 <__aeabi_d2iz>
 8010ee6:	9001      	str	r0, [sp, #4]
 8010ee8:	f7ef fb3c 	bl	8000564 <__aeabi_i2d>
 8010eec:	4642      	mov	r2, r8
 8010eee:	464b      	mov	r3, r9
 8010ef0:	f7ef fba2 	bl	8000638 <__aeabi_dmul>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4630      	mov	r0, r6
 8010efa:	4639      	mov	r1, r7
 8010efc:	f7ef f9e4 	bl	80002c8 <__aeabi_dsub>
 8010f00:	9e01      	ldr	r6, [sp, #4]
 8010f02:	9f04      	ldr	r7, [sp, #16]
 8010f04:	3630      	adds	r6, #48	; 0x30
 8010f06:	f805 6b01 	strb.w	r6, [r5], #1
 8010f0a:	9e00      	ldr	r6, [sp, #0]
 8010f0c:	1bae      	subs	r6, r5, r6
 8010f0e:	42b7      	cmp	r7, r6
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	d134      	bne.n	8010f80 <_dtoa_r+0x708>
 8010f16:	f7ef f9d9 	bl	80002cc <__adddf3>
 8010f1a:	4642      	mov	r2, r8
 8010f1c:	464b      	mov	r3, r9
 8010f1e:	4606      	mov	r6, r0
 8010f20:	460f      	mov	r7, r1
 8010f22:	f7ef fe19 	bl	8000b58 <__aeabi_dcmpgt>
 8010f26:	b9c8      	cbnz	r0, 8010f5c <_dtoa_r+0x6e4>
 8010f28:	4642      	mov	r2, r8
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	4639      	mov	r1, r7
 8010f30:	f7ef fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8010f34:	b110      	cbz	r0, 8010f3c <_dtoa_r+0x6c4>
 8010f36:	9b01      	ldr	r3, [sp, #4]
 8010f38:	07db      	lsls	r3, r3, #31
 8010f3a:	d40f      	bmi.n	8010f5c <_dtoa_r+0x6e4>
 8010f3c:	4651      	mov	r1, sl
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f000 fbcc 	bl	80116dc <_Bfree>
 8010f44:	2300      	movs	r3, #0
 8010f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f48:	702b      	strb	r3, [r5, #0]
 8010f4a:	f10b 0301 	add.w	r3, fp, #1
 8010f4e:	6013      	str	r3, [r2, #0]
 8010f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f43f ace2 	beq.w	801091c <_dtoa_r+0xa4>
 8010f58:	601d      	str	r5, [r3, #0]
 8010f5a:	e4df      	b.n	801091c <_dtoa_r+0xa4>
 8010f5c:	465f      	mov	r7, fp
 8010f5e:	462b      	mov	r3, r5
 8010f60:	461d      	mov	r5, r3
 8010f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f66:	2a39      	cmp	r2, #57	; 0x39
 8010f68:	d106      	bne.n	8010f78 <_dtoa_r+0x700>
 8010f6a:	9a00      	ldr	r2, [sp, #0]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d1f7      	bne.n	8010f60 <_dtoa_r+0x6e8>
 8010f70:	9900      	ldr	r1, [sp, #0]
 8010f72:	2230      	movs	r2, #48	; 0x30
 8010f74:	3701      	adds	r7, #1
 8010f76:	700a      	strb	r2, [r1, #0]
 8010f78:	781a      	ldrb	r2, [r3, #0]
 8010f7a:	3201      	adds	r2, #1
 8010f7c:	701a      	strb	r2, [r3, #0]
 8010f7e:	e790      	b.n	8010ea2 <_dtoa_r+0x62a>
 8010f80:	4ba3      	ldr	r3, [pc, #652]	; (8011210 <_dtoa_r+0x998>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	f7ef fb58 	bl	8000638 <__aeabi_dmul>
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	460f      	mov	r7, r1
 8010f90:	f7ef fdba 	bl	8000b08 <__aeabi_dcmpeq>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d09e      	beq.n	8010ed6 <_dtoa_r+0x65e>
 8010f98:	e7d0      	b.n	8010f3c <_dtoa_r+0x6c4>
 8010f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	f000 80ca 	beq.w	8011136 <_dtoa_r+0x8be>
 8010fa2:	9a07      	ldr	r2, [sp, #28]
 8010fa4:	2a01      	cmp	r2, #1
 8010fa6:	f300 80ad 	bgt.w	8011104 <_dtoa_r+0x88c>
 8010faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fac:	2a00      	cmp	r2, #0
 8010fae:	f000 80a5 	beq.w	80110fc <_dtoa_r+0x884>
 8010fb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010fb6:	9e08      	ldr	r6, [sp, #32]
 8010fb8:	9d05      	ldr	r5, [sp, #20]
 8010fba:	9a05      	ldr	r2, [sp, #20]
 8010fbc:	441a      	add	r2, r3
 8010fbe:	9205      	str	r2, [sp, #20]
 8010fc0:	9a06      	ldr	r2, [sp, #24]
 8010fc2:	2101      	movs	r1, #1
 8010fc4:	441a      	add	r2, r3
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	9206      	str	r2, [sp, #24]
 8010fca:	f000 fc3d 	bl	8011848 <__i2b>
 8010fce:	4607      	mov	r7, r0
 8010fd0:	b165      	cbz	r5, 8010fec <_dtoa_r+0x774>
 8010fd2:	9b06      	ldr	r3, [sp, #24]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dd09      	ble.n	8010fec <_dtoa_r+0x774>
 8010fd8:	42ab      	cmp	r3, r5
 8010fda:	9a05      	ldr	r2, [sp, #20]
 8010fdc:	bfa8      	it	ge
 8010fde:	462b      	movge	r3, r5
 8010fe0:	1ad2      	subs	r2, r2, r3
 8010fe2:	9205      	str	r2, [sp, #20]
 8010fe4:	9a06      	ldr	r2, [sp, #24]
 8010fe6:	1aed      	subs	r5, r5, r3
 8010fe8:	1ad3      	subs	r3, r2, r3
 8010fea:	9306      	str	r3, [sp, #24]
 8010fec:	9b08      	ldr	r3, [sp, #32]
 8010fee:	b1f3      	cbz	r3, 801102e <_dtoa_r+0x7b6>
 8010ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f000 80a3 	beq.w	801113e <_dtoa_r+0x8c6>
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	dd10      	ble.n	801101e <_dtoa_r+0x7a6>
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	4632      	mov	r2, r6
 8011000:	4620      	mov	r0, r4
 8011002:	f000 fce1 	bl	80119c8 <__pow5mult>
 8011006:	4652      	mov	r2, sl
 8011008:	4601      	mov	r1, r0
 801100a:	4607      	mov	r7, r0
 801100c:	4620      	mov	r0, r4
 801100e:	f000 fc31 	bl	8011874 <__multiply>
 8011012:	4651      	mov	r1, sl
 8011014:	4680      	mov	r8, r0
 8011016:	4620      	mov	r0, r4
 8011018:	f000 fb60 	bl	80116dc <_Bfree>
 801101c:	46c2      	mov	sl, r8
 801101e:	9b08      	ldr	r3, [sp, #32]
 8011020:	1b9a      	subs	r2, r3, r6
 8011022:	d004      	beq.n	801102e <_dtoa_r+0x7b6>
 8011024:	4651      	mov	r1, sl
 8011026:	4620      	mov	r0, r4
 8011028:	f000 fcce 	bl	80119c8 <__pow5mult>
 801102c:	4682      	mov	sl, r0
 801102e:	2101      	movs	r1, #1
 8011030:	4620      	mov	r0, r4
 8011032:	f000 fc09 	bl	8011848 <__i2b>
 8011036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011038:	2b00      	cmp	r3, #0
 801103a:	4606      	mov	r6, r0
 801103c:	f340 8081 	ble.w	8011142 <_dtoa_r+0x8ca>
 8011040:	461a      	mov	r2, r3
 8011042:	4601      	mov	r1, r0
 8011044:	4620      	mov	r0, r4
 8011046:	f000 fcbf 	bl	80119c8 <__pow5mult>
 801104a:	9b07      	ldr	r3, [sp, #28]
 801104c:	2b01      	cmp	r3, #1
 801104e:	4606      	mov	r6, r0
 8011050:	dd7a      	ble.n	8011148 <_dtoa_r+0x8d0>
 8011052:	f04f 0800 	mov.w	r8, #0
 8011056:	6933      	ldr	r3, [r6, #16]
 8011058:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801105c:	6918      	ldr	r0, [r3, #16]
 801105e:	f000 fba5 	bl	80117ac <__hi0bits>
 8011062:	f1c0 0020 	rsb	r0, r0, #32
 8011066:	9b06      	ldr	r3, [sp, #24]
 8011068:	4418      	add	r0, r3
 801106a:	f010 001f 	ands.w	r0, r0, #31
 801106e:	f000 8094 	beq.w	801119a <_dtoa_r+0x922>
 8011072:	f1c0 0320 	rsb	r3, r0, #32
 8011076:	2b04      	cmp	r3, #4
 8011078:	f340 8085 	ble.w	8011186 <_dtoa_r+0x90e>
 801107c:	9b05      	ldr	r3, [sp, #20]
 801107e:	f1c0 001c 	rsb	r0, r0, #28
 8011082:	4403      	add	r3, r0
 8011084:	9305      	str	r3, [sp, #20]
 8011086:	9b06      	ldr	r3, [sp, #24]
 8011088:	4403      	add	r3, r0
 801108a:	4405      	add	r5, r0
 801108c:	9306      	str	r3, [sp, #24]
 801108e:	9b05      	ldr	r3, [sp, #20]
 8011090:	2b00      	cmp	r3, #0
 8011092:	dd05      	ble.n	80110a0 <_dtoa_r+0x828>
 8011094:	4651      	mov	r1, sl
 8011096:	461a      	mov	r2, r3
 8011098:	4620      	mov	r0, r4
 801109a:	f000 fcef 	bl	8011a7c <__lshift>
 801109e:	4682      	mov	sl, r0
 80110a0:	9b06      	ldr	r3, [sp, #24]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	dd05      	ble.n	80110b2 <_dtoa_r+0x83a>
 80110a6:	4631      	mov	r1, r6
 80110a8:	461a      	mov	r2, r3
 80110aa:	4620      	mov	r0, r4
 80110ac:	f000 fce6 	bl	8011a7c <__lshift>
 80110b0:	4606      	mov	r6, r0
 80110b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d072      	beq.n	801119e <_dtoa_r+0x926>
 80110b8:	4631      	mov	r1, r6
 80110ba:	4650      	mov	r0, sl
 80110bc:	f000 fd4a 	bl	8011b54 <__mcmp>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	da6c      	bge.n	801119e <_dtoa_r+0x926>
 80110c4:	2300      	movs	r3, #0
 80110c6:	4651      	mov	r1, sl
 80110c8:	220a      	movs	r2, #10
 80110ca:	4620      	mov	r0, r4
 80110cc:	f000 fb28 	bl	8011720 <__multadd>
 80110d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80110d6:	4682      	mov	sl, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 81b0 	beq.w	801143e <_dtoa_r+0xbc6>
 80110de:	2300      	movs	r3, #0
 80110e0:	4639      	mov	r1, r7
 80110e2:	220a      	movs	r2, #10
 80110e4:	4620      	mov	r0, r4
 80110e6:	f000 fb1b 	bl	8011720 <__multadd>
 80110ea:	9b01      	ldr	r3, [sp, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	4607      	mov	r7, r0
 80110f0:	f300 8096 	bgt.w	8011220 <_dtoa_r+0x9a8>
 80110f4:	9b07      	ldr	r3, [sp, #28]
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	dc59      	bgt.n	80111ae <_dtoa_r+0x936>
 80110fa:	e091      	b.n	8011220 <_dtoa_r+0x9a8>
 80110fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011102:	e758      	b.n	8010fb6 <_dtoa_r+0x73e>
 8011104:	9b04      	ldr	r3, [sp, #16]
 8011106:	1e5e      	subs	r6, r3, #1
 8011108:	9b08      	ldr	r3, [sp, #32]
 801110a:	42b3      	cmp	r3, r6
 801110c:	bfbf      	itttt	lt
 801110e:	9b08      	ldrlt	r3, [sp, #32]
 8011110:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011112:	9608      	strlt	r6, [sp, #32]
 8011114:	1af3      	sublt	r3, r6, r3
 8011116:	bfb4      	ite	lt
 8011118:	18d2      	addlt	r2, r2, r3
 801111a:	1b9e      	subge	r6, r3, r6
 801111c:	9b04      	ldr	r3, [sp, #16]
 801111e:	bfbc      	itt	lt
 8011120:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011122:	2600      	movlt	r6, #0
 8011124:	2b00      	cmp	r3, #0
 8011126:	bfb7      	itett	lt
 8011128:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801112c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011130:	1a9d      	sublt	r5, r3, r2
 8011132:	2300      	movlt	r3, #0
 8011134:	e741      	b.n	8010fba <_dtoa_r+0x742>
 8011136:	9e08      	ldr	r6, [sp, #32]
 8011138:	9d05      	ldr	r5, [sp, #20]
 801113a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801113c:	e748      	b.n	8010fd0 <_dtoa_r+0x758>
 801113e:	9a08      	ldr	r2, [sp, #32]
 8011140:	e770      	b.n	8011024 <_dtoa_r+0x7ac>
 8011142:	9b07      	ldr	r3, [sp, #28]
 8011144:	2b01      	cmp	r3, #1
 8011146:	dc19      	bgt.n	801117c <_dtoa_r+0x904>
 8011148:	9b02      	ldr	r3, [sp, #8]
 801114a:	b9bb      	cbnz	r3, 801117c <_dtoa_r+0x904>
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011152:	b99b      	cbnz	r3, 801117c <_dtoa_r+0x904>
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801115a:	0d1b      	lsrs	r3, r3, #20
 801115c:	051b      	lsls	r3, r3, #20
 801115e:	b183      	cbz	r3, 8011182 <_dtoa_r+0x90a>
 8011160:	9b05      	ldr	r3, [sp, #20]
 8011162:	3301      	adds	r3, #1
 8011164:	9305      	str	r3, [sp, #20]
 8011166:	9b06      	ldr	r3, [sp, #24]
 8011168:	3301      	adds	r3, #1
 801116a:	9306      	str	r3, [sp, #24]
 801116c:	f04f 0801 	mov.w	r8, #1
 8011170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011172:	2b00      	cmp	r3, #0
 8011174:	f47f af6f 	bne.w	8011056 <_dtoa_r+0x7de>
 8011178:	2001      	movs	r0, #1
 801117a:	e774      	b.n	8011066 <_dtoa_r+0x7ee>
 801117c:	f04f 0800 	mov.w	r8, #0
 8011180:	e7f6      	b.n	8011170 <_dtoa_r+0x8f8>
 8011182:	4698      	mov	r8, r3
 8011184:	e7f4      	b.n	8011170 <_dtoa_r+0x8f8>
 8011186:	d082      	beq.n	801108e <_dtoa_r+0x816>
 8011188:	9a05      	ldr	r2, [sp, #20]
 801118a:	331c      	adds	r3, #28
 801118c:	441a      	add	r2, r3
 801118e:	9205      	str	r2, [sp, #20]
 8011190:	9a06      	ldr	r2, [sp, #24]
 8011192:	441a      	add	r2, r3
 8011194:	441d      	add	r5, r3
 8011196:	9206      	str	r2, [sp, #24]
 8011198:	e779      	b.n	801108e <_dtoa_r+0x816>
 801119a:	4603      	mov	r3, r0
 801119c:	e7f4      	b.n	8011188 <_dtoa_r+0x910>
 801119e:	9b04      	ldr	r3, [sp, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dc37      	bgt.n	8011214 <_dtoa_r+0x99c>
 80111a4:	9b07      	ldr	r3, [sp, #28]
 80111a6:	2b02      	cmp	r3, #2
 80111a8:	dd34      	ble.n	8011214 <_dtoa_r+0x99c>
 80111aa:	9b04      	ldr	r3, [sp, #16]
 80111ac:	9301      	str	r3, [sp, #4]
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	b963      	cbnz	r3, 80111cc <_dtoa_r+0x954>
 80111b2:	4631      	mov	r1, r6
 80111b4:	2205      	movs	r2, #5
 80111b6:	4620      	mov	r0, r4
 80111b8:	f000 fab2 	bl	8011720 <__multadd>
 80111bc:	4601      	mov	r1, r0
 80111be:	4606      	mov	r6, r0
 80111c0:	4650      	mov	r0, sl
 80111c2:	f000 fcc7 	bl	8011b54 <__mcmp>
 80111c6:	2800      	cmp	r0, #0
 80111c8:	f73f adbb 	bgt.w	8010d42 <_dtoa_r+0x4ca>
 80111cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111ce:	9d00      	ldr	r5, [sp, #0]
 80111d0:	ea6f 0b03 	mvn.w	fp, r3
 80111d4:	f04f 0800 	mov.w	r8, #0
 80111d8:	4631      	mov	r1, r6
 80111da:	4620      	mov	r0, r4
 80111dc:	f000 fa7e 	bl	80116dc <_Bfree>
 80111e0:	2f00      	cmp	r7, #0
 80111e2:	f43f aeab 	beq.w	8010f3c <_dtoa_r+0x6c4>
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	d005      	beq.n	80111f8 <_dtoa_r+0x980>
 80111ec:	45b8      	cmp	r8, r7
 80111ee:	d003      	beq.n	80111f8 <_dtoa_r+0x980>
 80111f0:	4641      	mov	r1, r8
 80111f2:	4620      	mov	r0, r4
 80111f4:	f000 fa72 	bl	80116dc <_Bfree>
 80111f8:	4639      	mov	r1, r7
 80111fa:	4620      	mov	r0, r4
 80111fc:	f000 fa6e 	bl	80116dc <_Bfree>
 8011200:	e69c      	b.n	8010f3c <_dtoa_r+0x6c4>
 8011202:	2600      	movs	r6, #0
 8011204:	4637      	mov	r7, r6
 8011206:	e7e1      	b.n	80111cc <_dtoa_r+0x954>
 8011208:	46bb      	mov	fp, r7
 801120a:	4637      	mov	r7, r6
 801120c:	e599      	b.n	8010d42 <_dtoa_r+0x4ca>
 801120e:	bf00      	nop
 8011210:	40240000 	.word	0x40240000
 8011214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 80c8 	beq.w	80113ac <_dtoa_r+0xb34>
 801121c:	9b04      	ldr	r3, [sp, #16]
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	2d00      	cmp	r5, #0
 8011222:	dd05      	ble.n	8011230 <_dtoa_r+0x9b8>
 8011224:	4639      	mov	r1, r7
 8011226:	462a      	mov	r2, r5
 8011228:	4620      	mov	r0, r4
 801122a:	f000 fc27 	bl	8011a7c <__lshift>
 801122e:	4607      	mov	r7, r0
 8011230:	f1b8 0f00 	cmp.w	r8, #0
 8011234:	d05b      	beq.n	80112ee <_dtoa_r+0xa76>
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	4620      	mov	r0, r4
 801123a:	f000 fa0f 	bl	801165c <_Balloc>
 801123e:	4605      	mov	r5, r0
 8011240:	b928      	cbnz	r0, 801124e <_dtoa_r+0x9d6>
 8011242:	4b83      	ldr	r3, [pc, #524]	; (8011450 <_dtoa_r+0xbd8>)
 8011244:	4602      	mov	r2, r0
 8011246:	f240 21ef 	movw	r1, #751	; 0x2ef
 801124a:	f7ff bb2e 	b.w	80108aa <_dtoa_r+0x32>
 801124e:	693a      	ldr	r2, [r7, #16]
 8011250:	3202      	adds	r2, #2
 8011252:	0092      	lsls	r2, r2, #2
 8011254:	f107 010c 	add.w	r1, r7, #12
 8011258:	300c      	adds	r0, #12
 801125a:	f7ff fa76 	bl	801074a <memcpy>
 801125e:	2201      	movs	r2, #1
 8011260:	4629      	mov	r1, r5
 8011262:	4620      	mov	r0, r4
 8011264:	f000 fc0a 	bl	8011a7c <__lshift>
 8011268:	9b00      	ldr	r3, [sp, #0]
 801126a:	3301      	adds	r3, #1
 801126c:	9304      	str	r3, [sp, #16]
 801126e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011272:	4413      	add	r3, r2
 8011274:	9308      	str	r3, [sp, #32]
 8011276:	9b02      	ldr	r3, [sp, #8]
 8011278:	f003 0301 	and.w	r3, r3, #1
 801127c:	46b8      	mov	r8, r7
 801127e:	9306      	str	r3, [sp, #24]
 8011280:	4607      	mov	r7, r0
 8011282:	9b04      	ldr	r3, [sp, #16]
 8011284:	4631      	mov	r1, r6
 8011286:	3b01      	subs	r3, #1
 8011288:	4650      	mov	r0, sl
 801128a:	9301      	str	r3, [sp, #4]
 801128c:	f7ff fa6b 	bl	8010766 <quorem>
 8011290:	4641      	mov	r1, r8
 8011292:	9002      	str	r0, [sp, #8]
 8011294:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011298:	4650      	mov	r0, sl
 801129a:	f000 fc5b 	bl	8011b54 <__mcmp>
 801129e:	463a      	mov	r2, r7
 80112a0:	9005      	str	r0, [sp, #20]
 80112a2:	4631      	mov	r1, r6
 80112a4:	4620      	mov	r0, r4
 80112a6:	f000 fc71 	bl	8011b8c <__mdiff>
 80112aa:	68c2      	ldr	r2, [r0, #12]
 80112ac:	4605      	mov	r5, r0
 80112ae:	bb02      	cbnz	r2, 80112f2 <_dtoa_r+0xa7a>
 80112b0:	4601      	mov	r1, r0
 80112b2:	4650      	mov	r0, sl
 80112b4:	f000 fc4e 	bl	8011b54 <__mcmp>
 80112b8:	4602      	mov	r2, r0
 80112ba:	4629      	mov	r1, r5
 80112bc:	4620      	mov	r0, r4
 80112be:	9209      	str	r2, [sp, #36]	; 0x24
 80112c0:	f000 fa0c 	bl	80116dc <_Bfree>
 80112c4:	9b07      	ldr	r3, [sp, #28]
 80112c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112c8:	9d04      	ldr	r5, [sp, #16]
 80112ca:	ea43 0102 	orr.w	r1, r3, r2
 80112ce:	9b06      	ldr	r3, [sp, #24]
 80112d0:	4319      	orrs	r1, r3
 80112d2:	d110      	bne.n	80112f6 <_dtoa_r+0xa7e>
 80112d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80112d8:	d029      	beq.n	801132e <_dtoa_r+0xab6>
 80112da:	9b05      	ldr	r3, [sp, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	dd02      	ble.n	80112e6 <_dtoa_r+0xa6e>
 80112e0:	9b02      	ldr	r3, [sp, #8]
 80112e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80112e6:	9b01      	ldr	r3, [sp, #4]
 80112e8:	f883 9000 	strb.w	r9, [r3]
 80112ec:	e774      	b.n	80111d8 <_dtoa_r+0x960>
 80112ee:	4638      	mov	r0, r7
 80112f0:	e7ba      	b.n	8011268 <_dtoa_r+0x9f0>
 80112f2:	2201      	movs	r2, #1
 80112f4:	e7e1      	b.n	80112ba <_dtoa_r+0xa42>
 80112f6:	9b05      	ldr	r3, [sp, #20]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	db04      	blt.n	8011306 <_dtoa_r+0xa8e>
 80112fc:	9907      	ldr	r1, [sp, #28]
 80112fe:	430b      	orrs	r3, r1
 8011300:	9906      	ldr	r1, [sp, #24]
 8011302:	430b      	orrs	r3, r1
 8011304:	d120      	bne.n	8011348 <_dtoa_r+0xad0>
 8011306:	2a00      	cmp	r2, #0
 8011308:	dded      	ble.n	80112e6 <_dtoa_r+0xa6e>
 801130a:	4651      	mov	r1, sl
 801130c:	2201      	movs	r2, #1
 801130e:	4620      	mov	r0, r4
 8011310:	f000 fbb4 	bl	8011a7c <__lshift>
 8011314:	4631      	mov	r1, r6
 8011316:	4682      	mov	sl, r0
 8011318:	f000 fc1c 	bl	8011b54 <__mcmp>
 801131c:	2800      	cmp	r0, #0
 801131e:	dc03      	bgt.n	8011328 <_dtoa_r+0xab0>
 8011320:	d1e1      	bne.n	80112e6 <_dtoa_r+0xa6e>
 8011322:	f019 0f01 	tst.w	r9, #1
 8011326:	d0de      	beq.n	80112e6 <_dtoa_r+0xa6e>
 8011328:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801132c:	d1d8      	bne.n	80112e0 <_dtoa_r+0xa68>
 801132e:	9a01      	ldr	r2, [sp, #4]
 8011330:	2339      	movs	r3, #57	; 0x39
 8011332:	7013      	strb	r3, [r2, #0]
 8011334:	462b      	mov	r3, r5
 8011336:	461d      	mov	r5, r3
 8011338:	3b01      	subs	r3, #1
 801133a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801133e:	2a39      	cmp	r2, #57	; 0x39
 8011340:	d06c      	beq.n	801141c <_dtoa_r+0xba4>
 8011342:	3201      	adds	r2, #1
 8011344:	701a      	strb	r2, [r3, #0]
 8011346:	e747      	b.n	80111d8 <_dtoa_r+0x960>
 8011348:	2a00      	cmp	r2, #0
 801134a:	dd07      	ble.n	801135c <_dtoa_r+0xae4>
 801134c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011350:	d0ed      	beq.n	801132e <_dtoa_r+0xab6>
 8011352:	9a01      	ldr	r2, [sp, #4]
 8011354:	f109 0301 	add.w	r3, r9, #1
 8011358:	7013      	strb	r3, [r2, #0]
 801135a:	e73d      	b.n	80111d8 <_dtoa_r+0x960>
 801135c:	9b04      	ldr	r3, [sp, #16]
 801135e:	9a08      	ldr	r2, [sp, #32]
 8011360:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011364:	4293      	cmp	r3, r2
 8011366:	d043      	beq.n	80113f0 <_dtoa_r+0xb78>
 8011368:	4651      	mov	r1, sl
 801136a:	2300      	movs	r3, #0
 801136c:	220a      	movs	r2, #10
 801136e:	4620      	mov	r0, r4
 8011370:	f000 f9d6 	bl	8011720 <__multadd>
 8011374:	45b8      	cmp	r8, r7
 8011376:	4682      	mov	sl, r0
 8011378:	f04f 0300 	mov.w	r3, #0
 801137c:	f04f 020a 	mov.w	r2, #10
 8011380:	4641      	mov	r1, r8
 8011382:	4620      	mov	r0, r4
 8011384:	d107      	bne.n	8011396 <_dtoa_r+0xb1e>
 8011386:	f000 f9cb 	bl	8011720 <__multadd>
 801138a:	4680      	mov	r8, r0
 801138c:	4607      	mov	r7, r0
 801138e:	9b04      	ldr	r3, [sp, #16]
 8011390:	3301      	adds	r3, #1
 8011392:	9304      	str	r3, [sp, #16]
 8011394:	e775      	b.n	8011282 <_dtoa_r+0xa0a>
 8011396:	f000 f9c3 	bl	8011720 <__multadd>
 801139a:	4639      	mov	r1, r7
 801139c:	4680      	mov	r8, r0
 801139e:	2300      	movs	r3, #0
 80113a0:	220a      	movs	r2, #10
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 f9bc 	bl	8011720 <__multadd>
 80113a8:	4607      	mov	r7, r0
 80113aa:	e7f0      	b.n	801138e <_dtoa_r+0xb16>
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	9301      	str	r3, [sp, #4]
 80113b0:	9d00      	ldr	r5, [sp, #0]
 80113b2:	4631      	mov	r1, r6
 80113b4:	4650      	mov	r0, sl
 80113b6:	f7ff f9d6 	bl	8010766 <quorem>
 80113ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80113be:	9b00      	ldr	r3, [sp, #0]
 80113c0:	f805 9b01 	strb.w	r9, [r5], #1
 80113c4:	1aea      	subs	r2, r5, r3
 80113c6:	9b01      	ldr	r3, [sp, #4]
 80113c8:	4293      	cmp	r3, r2
 80113ca:	dd07      	ble.n	80113dc <_dtoa_r+0xb64>
 80113cc:	4651      	mov	r1, sl
 80113ce:	2300      	movs	r3, #0
 80113d0:	220a      	movs	r2, #10
 80113d2:	4620      	mov	r0, r4
 80113d4:	f000 f9a4 	bl	8011720 <__multadd>
 80113d8:	4682      	mov	sl, r0
 80113da:	e7ea      	b.n	80113b2 <_dtoa_r+0xb3a>
 80113dc:	9b01      	ldr	r3, [sp, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	bfc8      	it	gt
 80113e2:	461d      	movgt	r5, r3
 80113e4:	9b00      	ldr	r3, [sp, #0]
 80113e6:	bfd8      	it	le
 80113e8:	2501      	movle	r5, #1
 80113ea:	441d      	add	r5, r3
 80113ec:	f04f 0800 	mov.w	r8, #0
 80113f0:	4651      	mov	r1, sl
 80113f2:	2201      	movs	r2, #1
 80113f4:	4620      	mov	r0, r4
 80113f6:	f000 fb41 	bl	8011a7c <__lshift>
 80113fa:	4631      	mov	r1, r6
 80113fc:	4682      	mov	sl, r0
 80113fe:	f000 fba9 	bl	8011b54 <__mcmp>
 8011402:	2800      	cmp	r0, #0
 8011404:	dc96      	bgt.n	8011334 <_dtoa_r+0xabc>
 8011406:	d102      	bne.n	801140e <_dtoa_r+0xb96>
 8011408:	f019 0f01 	tst.w	r9, #1
 801140c:	d192      	bne.n	8011334 <_dtoa_r+0xabc>
 801140e:	462b      	mov	r3, r5
 8011410:	461d      	mov	r5, r3
 8011412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011416:	2a30      	cmp	r2, #48	; 0x30
 8011418:	d0fa      	beq.n	8011410 <_dtoa_r+0xb98>
 801141a:	e6dd      	b.n	80111d8 <_dtoa_r+0x960>
 801141c:	9a00      	ldr	r2, [sp, #0]
 801141e:	429a      	cmp	r2, r3
 8011420:	d189      	bne.n	8011336 <_dtoa_r+0xabe>
 8011422:	f10b 0b01 	add.w	fp, fp, #1
 8011426:	2331      	movs	r3, #49	; 0x31
 8011428:	e796      	b.n	8011358 <_dtoa_r+0xae0>
 801142a:	4b0a      	ldr	r3, [pc, #40]	; (8011454 <_dtoa_r+0xbdc>)
 801142c:	f7ff ba99 	b.w	8010962 <_dtoa_r+0xea>
 8011430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011432:	2b00      	cmp	r3, #0
 8011434:	f47f aa6d 	bne.w	8010912 <_dtoa_r+0x9a>
 8011438:	4b07      	ldr	r3, [pc, #28]	; (8011458 <_dtoa_r+0xbe0>)
 801143a:	f7ff ba92 	b.w	8010962 <_dtoa_r+0xea>
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	dcb5      	bgt.n	80113b0 <_dtoa_r+0xb38>
 8011444:	9b07      	ldr	r3, [sp, #28]
 8011446:	2b02      	cmp	r3, #2
 8011448:	f73f aeb1 	bgt.w	80111ae <_dtoa_r+0x936>
 801144c:	e7b0      	b.n	80113b0 <_dtoa_r+0xb38>
 801144e:	bf00      	nop
 8011450:	0801465c 	.word	0x0801465c
 8011454:	080145bc 	.word	0x080145bc
 8011458:	080145e0 	.word	0x080145e0

0801145c <_free_r>:
 801145c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801145e:	2900      	cmp	r1, #0
 8011460:	d044      	beq.n	80114ec <_free_r+0x90>
 8011462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011466:	9001      	str	r0, [sp, #4]
 8011468:	2b00      	cmp	r3, #0
 801146a:	f1a1 0404 	sub.w	r4, r1, #4
 801146e:	bfb8      	it	lt
 8011470:	18e4      	addlt	r4, r4, r3
 8011472:	f000 f8e7 	bl	8011644 <__malloc_lock>
 8011476:	4a1e      	ldr	r2, [pc, #120]	; (80114f0 <_free_r+0x94>)
 8011478:	9801      	ldr	r0, [sp, #4]
 801147a:	6813      	ldr	r3, [r2, #0]
 801147c:	b933      	cbnz	r3, 801148c <_free_r+0x30>
 801147e:	6063      	str	r3, [r4, #4]
 8011480:	6014      	str	r4, [r2, #0]
 8011482:	b003      	add	sp, #12
 8011484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011488:	f000 b8e2 	b.w	8011650 <__malloc_unlock>
 801148c:	42a3      	cmp	r3, r4
 801148e:	d908      	bls.n	80114a2 <_free_r+0x46>
 8011490:	6825      	ldr	r5, [r4, #0]
 8011492:	1961      	adds	r1, r4, r5
 8011494:	428b      	cmp	r3, r1
 8011496:	bf01      	itttt	eq
 8011498:	6819      	ldreq	r1, [r3, #0]
 801149a:	685b      	ldreq	r3, [r3, #4]
 801149c:	1949      	addeq	r1, r1, r5
 801149e:	6021      	streq	r1, [r4, #0]
 80114a0:	e7ed      	b.n	801147e <_free_r+0x22>
 80114a2:	461a      	mov	r2, r3
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	b10b      	cbz	r3, 80114ac <_free_r+0x50>
 80114a8:	42a3      	cmp	r3, r4
 80114aa:	d9fa      	bls.n	80114a2 <_free_r+0x46>
 80114ac:	6811      	ldr	r1, [r2, #0]
 80114ae:	1855      	adds	r5, r2, r1
 80114b0:	42a5      	cmp	r5, r4
 80114b2:	d10b      	bne.n	80114cc <_free_r+0x70>
 80114b4:	6824      	ldr	r4, [r4, #0]
 80114b6:	4421      	add	r1, r4
 80114b8:	1854      	adds	r4, r2, r1
 80114ba:	42a3      	cmp	r3, r4
 80114bc:	6011      	str	r1, [r2, #0]
 80114be:	d1e0      	bne.n	8011482 <_free_r+0x26>
 80114c0:	681c      	ldr	r4, [r3, #0]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	6053      	str	r3, [r2, #4]
 80114c6:	440c      	add	r4, r1
 80114c8:	6014      	str	r4, [r2, #0]
 80114ca:	e7da      	b.n	8011482 <_free_r+0x26>
 80114cc:	d902      	bls.n	80114d4 <_free_r+0x78>
 80114ce:	230c      	movs	r3, #12
 80114d0:	6003      	str	r3, [r0, #0]
 80114d2:	e7d6      	b.n	8011482 <_free_r+0x26>
 80114d4:	6825      	ldr	r5, [r4, #0]
 80114d6:	1961      	adds	r1, r4, r5
 80114d8:	428b      	cmp	r3, r1
 80114da:	bf04      	itt	eq
 80114dc:	6819      	ldreq	r1, [r3, #0]
 80114de:	685b      	ldreq	r3, [r3, #4]
 80114e0:	6063      	str	r3, [r4, #4]
 80114e2:	bf04      	itt	eq
 80114e4:	1949      	addeq	r1, r1, r5
 80114e6:	6021      	streq	r1, [r4, #0]
 80114e8:	6054      	str	r4, [r2, #4]
 80114ea:	e7ca      	b.n	8011482 <_free_r+0x26>
 80114ec:	b003      	add	sp, #12
 80114ee:	bd30      	pop	{r4, r5, pc}
 80114f0:	2001d648 	.word	0x2001d648

080114f4 <malloc>:
 80114f4:	4b02      	ldr	r3, [pc, #8]	; (8011500 <malloc+0xc>)
 80114f6:	4601      	mov	r1, r0
 80114f8:	6818      	ldr	r0, [r3, #0]
 80114fa:	f000 b823 	b.w	8011544 <_malloc_r>
 80114fe:	bf00      	nop
 8011500:	200000c4 	.word	0x200000c4

08011504 <sbrk_aligned>:
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	4e0e      	ldr	r6, [pc, #56]	; (8011540 <sbrk_aligned+0x3c>)
 8011508:	460c      	mov	r4, r1
 801150a:	6831      	ldr	r1, [r6, #0]
 801150c:	4605      	mov	r5, r0
 801150e:	b911      	cbnz	r1, 8011516 <sbrk_aligned+0x12>
 8011510:	f000 fe40 	bl	8012194 <_sbrk_r>
 8011514:	6030      	str	r0, [r6, #0]
 8011516:	4621      	mov	r1, r4
 8011518:	4628      	mov	r0, r5
 801151a:	f000 fe3b 	bl	8012194 <_sbrk_r>
 801151e:	1c43      	adds	r3, r0, #1
 8011520:	d00a      	beq.n	8011538 <sbrk_aligned+0x34>
 8011522:	1cc4      	adds	r4, r0, #3
 8011524:	f024 0403 	bic.w	r4, r4, #3
 8011528:	42a0      	cmp	r0, r4
 801152a:	d007      	beq.n	801153c <sbrk_aligned+0x38>
 801152c:	1a21      	subs	r1, r4, r0
 801152e:	4628      	mov	r0, r5
 8011530:	f000 fe30 	bl	8012194 <_sbrk_r>
 8011534:	3001      	adds	r0, #1
 8011536:	d101      	bne.n	801153c <sbrk_aligned+0x38>
 8011538:	f04f 34ff 	mov.w	r4, #4294967295
 801153c:	4620      	mov	r0, r4
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	2001d64c 	.word	0x2001d64c

08011544 <_malloc_r>:
 8011544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011548:	1ccd      	adds	r5, r1, #3
 801154a:	f025 0503 	bic.w	r5, r5, #3
 801154e:	3508      	adds	r5, #8
 8011550:	2d0c      	cmp	r5, #12
 8011552:	bf38      	it	cc
 8011554:	250c      	movcc	r5, #12
 8011556:	2d00      	cmp	r5, #0
 8011558:	4607      	mov	r7, r0
 801155a:	db01      	blt.n	8011560 <_malloc_r+0x1c>
 801155c:	42a9      	cmp	r1, r5
 801155e:	d905      	bls.n	801156c <_malloc_r+0x28>
 8011560:	230c      	movs	r3, #12
 8011562:	603b      	str	r3, [r7, #0]
 8011564:	2600      	movs	r6, #0
 8011566:	4630      	mov	r0, r6
 8011568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011640 <_malloc_r+0xfc>
 8011570:	f000 f868 	bl	8011644 <__malloc_lock>
 8011574:	f8d8 3000 	ldr.w	r3, [r8]
 8011578:	461c      	mov	r4, r3
 801157a:	bb5c      	cbnz	r4, 80115d4 <_malloc_r+0x90>
 801157c:	4629      	mov	r1, r5
 801157e:	4638      	mov	r0, r7
 8011580:	f7ff ffc0 	bl	8011504 <sbrk_aligned>
 8011584:	1c43      	adds	r3, r0, #1
 8011586:	4604      	mov	r4, r0
 8011588:	d155      	bne.n	8011636 <_malloc_r+0xf2>
 801158a:	f8d8 4000 	ldr.w	r4, [r8]
 801158e:	4626      	mov	r6, r4
 8011590:	2e00      	cmp	r6, #0
 8011592:	d145      	bne.n	8011620 <_malloc_r+0xdc>
 8011594:	2c00      	cmp	r4, #0
 8011596:	d048      	beq.n	801162a <_malloc_r+0xe6>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	4631      	mov	r1, r6
 801159c:	4638      	mov	r0, r7
 801159e:	eb04 0903 	add.w	r9, r4, r3
 80115a2:	f000 fdf7 	bl	8012194 <_sbrk_r>
 80115a6:	4581      	cmp	r9, r0
 80115a8:	d13f      	bne.n	801162a <_malloc_r+0xe6>
 80115aa:	6821      	ldr	r1, [r4, #0]
 80115ac:	1a6d      	subs	r5, r5, r1
 80115ae:	4629      	mov	r1, r5
 80115b0:	4638      	mov	r0, r7
 80115b2:	f7ff ffa7 	bl	8011504 <sbrk_aligned>
 80115b6:	3001      	adds	r0, #1
 80115b8:	d037      	beq.n	801162a <_malloc_r+0xe6>
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	442b      	add	r3, r5
 80115be:	6023      	str	r3, [r4, #0]
 80115c0:	f8d8 3000 	ldr.w	r3, [r8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d038      	beq.n	801163a <_malloc_r+0xf6>
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	42a2      	cmp	r2, r4
 80115cc:	d12b      	bne.n	8011626 <_malloc_r+0xe2>
 80115ce:	2200      	movs	r2, #0
 80115d0:	605a      	str	r2, [r3, #4]
 80115d2:	e00f      	b.n	80115f4 <_malloc_r+0xb0>
 80115d4:	6822      	ldr	r2, [r4, #0]
 80115d6:	1b52      	subs	r2, r2, r5
 80115d8:	d41f      	bmi.n	801161a <_malloc_r+0xd6>
 80115da:	2a0b      	cmp	r2, #11
 80115dc:	d917      	bls.n	801160e <_malloc_r+0xca>
 80115de:	1961      	adds	r1, r4, r5
 80115e0:	42a3      	cmp	r3, r4
 80115e2:	6025      	str	r5, [r4, #0]
 80115e4:	bf18      	it	ne
 80115e6:	6059      	strne	r1, [r3, #4]
 80115e8:	6863      	ldr	r3, [r4, #4]
 80115ea:	bf08      	it	eq
 80115ec:	f8c8 1000 	streq.w	r1, [r8]
 80115f0:	5162      	str	r2, [r4, r5]
 80115f2:	604b      	str	r3, [r1, #4]
 80115f4:	4638      	mov	r0, r7
 80115f6:	f104 060b 	add.w	r6, r4, #11
 80115fa:	f000 f829 	bl	8011650 <__malloc_unlock>
 80115fe:	f026 0607 	bic.w	r6, r6, #7
 8011602:	1d23      	adds	r3, r4, #4
 8011604:	1af2      	subs	r2, r6, r3
 8011606:	d0ae      	beq.n	8011566 <_malloc_r+0x22>
 8011608:	1b9b      	subs	r3, r3, r6
 801160a:	50a3      	str	r3, [r4, r2]
 801160c:	e7ab      	b.n	8011566 <_malloc_r+0x22>
 801160e:	42a3      	cmp	r3, r4
 8011610:	6862      	ldr	r2, [r4, #4]
 8011612:	d1dd      	bne.n	80115d0 <_malloc_r+0x8c>
 8011614:	f8c8 2000 	str.w	r2, [r8]
 8011618:	e7ec      	b.n	80115f4 <_malloc_r+0xb0>
 801161a:	4623      	mov	r3, r4
 801161c:	6864      	ldr	r4, [r4, #4]
 801161e:	e7ac      	b.n	801157a <_malloc_r+0x36>
 8011620:	4634      	mov	r4, r6
 8011622:	6876      	ldr	r6, [r6, #4]
 8011624:	e7b4      	b.n	8011590 <_malloc_r+0x4c>
 8011626:	4613      	mov	r3, r2
 8011628:	e7cc      	b.n	80115c4 <_malloc_r+0x80>
 801162a:	230c      	movs	r3, #12
 801162c:	603b      	str	r3, [r7, #0]
 801162e:	4638      	mov	r0, r7
 8011630:	f000 f80e 	bl	8011650 <__malloc_unlock>
 8011634:	e797      	b.n	8011566 <_malloc_r+0x22>
 8011636:	6025      	str	r5, [r4, #0]
 8011638:	e7dc      	b.n	80115f4 <_malloc_r+0xb0>
 801163a:	605b      	str	r3, [r3, #4]
 801163c:	deff      	udf	#255	; 0xff
 801163e:	bf00      	nop
 8011640:	2001d648 	.word	0x2001d648

08011644 <__malloc_lock>:
 8011644:	4801      	ldr	r0, [pc, #4]	; (801164c <__malloc_lock+0x8>)
 8011646:	f7ff b87e 	b.w	8010746 <__retarget_lock_acquire_recursive>
 801164a:	bf00      	nop
 801164c:	2001d644 	.word	0x2001d644

08011650 <__malloc_unlock>:
 8011650:	4801      	ldr	r0, [pc, #4]	; (8011658 <__malloc_unlock+0x8>)
 8011652:	f7ff b879 	b.w	8010748 <__retarget_lock_release_recursive>
 8011656:	bf00      	nop
 8011658:	2001d644 	.word	0x2001d644

0801165c <_Balloc>:
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	69c6      	ldr	r6, [r0, #28]
 8011660:	4604      	mov	r4, r0
 8011662:	460d      	mov	r5, r1
 8011664:	b976      	cbnz	r6, 8011684 <_Balloc+0x28>
 8011666:	2010      	movs	r0, #16
 8011668:	f7ff ff44 	bl	80114f4 <malloc>
 801166c:	4602      	mov	r2, r0
 801166e:	61e0      	str	r0, [r4, #28]
 8011670:	b920      	cbnz	r0, 801167c <_Balloc+0x20>
 8011672:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <_Balloc+0x78>)
 8011674:	4818      	ldr	r0, [pc, #96]	; (80116d8 <_Balloc+0x7c>)
 8011676:	216b      	movs	r1, #107	; 0x6b
 8011678:	f000 fd9c 	bl	80121b4 <__assert_func>
 801167c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011680:	6006      	str	r6, [r0, #0]
 8011682:	60c6      	str	r6, [r0, #12]
 8011684:	69e6      	ldr	r6, [r4, #28]
 8011686:	68f3      	ldr	r3, [r6, #12]
 8011688:	b183      	cbz	r3, 80116ac <_Balloc+0x50>
 801168a:	69e3      	ldr	r3, [r4, #28]
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011692:	b9b8      	cbnz	r0, 80116c4 <_Balloc+0x68>
 8011694:	2101      	movs	r1, #1
 8011696:	fa01 f605 	lsl.w	r6, r1, r5
 801169a:	1d72      	adds	r2, r6, #5
 801169c:	0092      	lsls	r2, r2, #2
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 fda6 	bl	80121f0 <_calloc_r>
 80116a4:	b160      	cbz	r0, 80116c0 <_Balloc+0x64>
 80116a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116aa:	e00e      	b.n	80116ca <_Balloc+0x6e>
 80116ac:	2221      	movs	r2, #33	; 0x21
 80116ae:	2104      	movs	r1, #4
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fd9d 	bl	80121f0 <_calloc_r>
 80116b6:	69e3      	ldr	r3, [r4, #28]
 80116b8:	60f0      	str	r0, [r6, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d1e4      	bne.n	801168a <_Balloc+0x2e>
 80116c0:	2000      	movs	r0, #0
 80116c2:	bd70      	pop	{r4, r5, r6, pc}
 80116c4:	6802      	ldr	r2, [r0, #0]
 80116c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116ca:	2300      	movs	r3, #0
 80116cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116d0:	e7f7      	b.n	80116c2 <_Balloc+0x66>
 80116d2:	bf00      	nop
 80116d4:	080145ed 	.word	0x080145ed
 80116d8:	0801466d 	.word	0x0801466d

080116dc <_Bfree>:
 80116dc:	b570      	push	{r4, r5, r6, lr}
 80116de:	69c6      	ldr	r6, [r0, #28]
 80116e0:	4605      	mov	r5, r0
 80116e2:	460c      	mov	r4, r1
 80116e4:	b976      	cbnz	r6, 8011704 <_Bfree+0x28>
 80116e6:	2010      	movs	r0, #16
 80116e8:	f7ff ff04 	bl	80114f4 <malloc>
 80116ec:	4602      	mov	r2, r0
 80116ee:	61e8      	str	r0, [r5, #28]
 80116f0:	b920      	cbnz	r0, 80116fc <_Bfree+0x20>
 80116f2:	4b09      	ldr	r3, [pc, #36]	; (8011718 <_Bfree+0x3c>)
 80116f4:	4809      	ldr	r0, [pc, #36]	; (801171c <_Bfree+0x40>)
 80116f6:	218f      	movs	r1, #143	; 0x8f
 80116f8:	f000 fd5c 	bl	80121b4 <__assert_func>
 80116fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011700:	6006      	str	r6, [r0, #0]
 8011702:	60c6      	str	r6, [r0, #12]
 8011704:	b13c      	cbz	r4, 8011716 <_Bfree+0x3a>
 8011706:	69eb      	ldr	r3, [r5, #28]
 8011708:	6862      	ldr	r2, [r4, #4]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011710:	6021      	str	r1, [r4, #0]
 8011712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011716:	bd70      	pop	{r4, r5, r6, pc}
 8011718:	080145ed 	.word	0x080145ed
 801171c:	0801466d 	.word	0x0801466d

08011720 <__multadd>:
 8011720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011724:	690d      	ldr	r5, [r1, #16]
 8011726:	4607      	mov	r7, r0
 8011728:	460c      	mov	r4, r1
 801172a:	461e      	mov	r6, r3
 801172c:	f101 0c14 	add.w	ip, r1, #20
 8011730:	2000      	movs	r0, #0
 8011732:	f8dc 3000 	ldr.w	r3, [ip]
 8011736:	b299      	uxth	r1, r3
 8011738:	fb02 6101 	mla	r1, r2, r1, r6
 801173c:	0c1e      	lsrs	r6, r3, #16
 801173e:	0c0b      	lsrs	r3, r1, #16
 8011740:	fb02 3306 	mla	r3, r2, r6, r3
 8011744:	b289      	uxth	r1, r1
 8011746:	3001      	adds	r0, #1
 8011748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801174c:	4285      	cmp	r5, r0
 801174e:	f84c 1b04 	str.w	r1, [ip], #4
 8011752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011756:	dcec      	bgt.n	8011732 <__multadd+0x12>
 8011758:	b30e      	cbz	r6, 801179e <__multadd+0x7e>
 801175a:	68a3      	ldr	r3, [r4, #8]
 801175c:	42ab      	cmp	r3, r5
 801175e:	dc19      	bgt.n	8011794 <__multadd+0x74>
 8011760:	6861      	ldr	r1, [r4, #4]
 8011762:	4638      	mov	r0, r7
 8011764:	3101      	adds	r1, #1
 8011766:	f7ff ff79 	bl	801165c <_Balloc>
 801176a:	4680      	mov	r8, r0
 801176c:	b928      	cbnz	r0, 801177a <__multadd+0x5a>
 801176e:	4602      	mov	r2, r0
 8011770:	4b0c      	ldr	r3, [pc, #48]	; (80117a4 <__multadd+0x84>)
 8011772:	480d      	ldr	r0, [pc, #52]	; (80117a8 <__multadd+0x88>)
 8011774:	21ba      	movs	r1, #186	; 0xba
 8011776:	f000 fd1d 	bl	80121b4 <__assert_func>
 801177a:	6922      	ldr	r2, [r4, #16]
 801177c:	3202      	adds	r2, #2
 801177e:	f104 010c 	add.w	r1, r4, #12
 8011782:	0092      	lsls	r2, r2, #2
 8011784:	300c      	adds	r0, #12
 8011786:	f7fe ffe0 	bl	801074a <memcpy>
 801178a:	4621      	mov	r1, r4
 801178c:	4638      	mov	r0, r7
 801178e:	f7ff ffa5 	bl	80116dc <_Bfree>
 8011792:	4644      	mov	r4, r8
 8011794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011798:	3501      	adds	r5, #1
 801179a:	615e      	str	r6, [r3, #20]
 801179c:	6125      	str	r5, [r4, #16]
 801179e:	4620      	mov	r0, r4
 80117a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a4:	0801465c 	.word	0x0801465c
 80117a8:	0801466d 	.word	0x0801466d

080117ac <__hi0bits>:
 80117ac:	0c03      	lsrs	r3, r0, #16
 80117ae:	041b      	lsls	r3, r3, #16
 80117b0:	b9d3      	cbnz	r3, 80117e8 <__hi0bits+0x3c>
 80117b2:	0400      	lsls	r0, r0, #16
 80117b4:	2310      	movs	r3, #16
 80117b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80117ba:	bf04      	itt	eq
 80117bc:	0200      	lsleq	r0, r0, #8
 80117be:	3308      	addeq	r3, #8
 80117c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80117c4:	bf04      	itt	eq
 80117c6:	0100      	lsleq	r0, r0, #4
 80117c8:	3304      	addeq	r3, #4
 80117ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80117ce:	bf04      	itt	eq
 80117d0:	0080      	lsleq	r0, r0, #2
 80117d2:	3302      	addeq	r3, #2
 80117d4:	2800      	cmp	r0, #0
 80117d6:	db05      	blt.n	80117e4 <__hi0bits+0x38>
 80117d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80117dc:	f103 0301 	add.w	r3, r3, #1
 80117e0:	bf08      	it	eq
 80117e2:	2320      	moveq	r3, #32
 80117e4:	4618      	mov	r0, r3
 80117e6:	4770      	bx	lr
 80117e8:	2300      	movs	r3, #0
 80117ea:	e7e4      	b.n	80117b6 <__hi0bits+0xa>

080117ec <__lo0bits>:
 80117ec:	6803      	ldr	r3, [r0, #0]
 80117ee:	f013 0207 	ands.w	r2, r3, #7
 80117f2:	d00c      	beq.n	801180e <__lo0bits+0x22>
 80117f4:	07d9      	lsls	r1, r3, #31
 80117f6:	d422      	bmi.n	801183e <__lo0bits+0x52>
 80117f8:	079a      	lsls	r2, r3, #30
 80117fa:	bf49      	itett	mi
 80117fc:	085b      	lsrmi	r3, r3, #1
 80117fe:	089b      	lsrpl	r3, r3, #2
 8011800:	6003      	strmi	r3, [r0, #0]
 8011802:	2201      	movmi	r2, #1
 8011804:	bf5c      	itt	pl
 8011806:	6003      	strpl	r3, [r0, #0]
 8011808:	2202      	movpl	r2, #2
 801180a:	4610      	mov	r0, r2
 801180c:	4770      	bx	lr
 801180e:	b299      	uxth	r1, r3
 8011810:	b909      	cbnz	r1, 8011816 <__lo0bits+0x2a>
 8011812:	0c1b      	lsrs	r3, r3, #16
 8011814:	2210      	movs	r2, #16
 8011816:	b2d9      	uxtb	r1, r3
 8011818:	b909      	cbnz	r1, 801181e <__lo0bits+0x32>
 801181a:	3208      	adds	r2, #8
 801181c:	0a1b      	lsrs	r3, r3, #8
 801181e:	0719      	lsls	r1, r3, #28
 8011820:	bf04      	itt	eq
 8011822:	091b      	lsreq	r3, r3, #4
 8011824:	3204      	addeq	r2, #4
 8011826:	0799      	lsls	r1, r3, #30
 8011828:	bf04      	itt	eq
 801182a:	089b      	lsreq	r3, r3, #2
 801182c:	3202      	addeq	r2, #2
 801182e:	07d9      	lsls	r1, r3, #31
 8011830:	d403      	bmi.n	801183a <__lo0bits+0x4e>
 8011832:	085b      	lsrs	r3, r3, #1
 8011834:	f102 0201 	add.w	r2, r2, #1
 8011838:	d003      	beq.n	8011842 <__lo0bits+0x56>
 801183a:	6003      	str	r3, [r0, #0]
 801183c:	e7e5      	b.n	801180a <__lo0bits+0x1e>
 801183e:	2200      	movs	r2, #0
 8011840:	e7e3      	b.n	801180a <__lo0bits+0x1e>
 8011842:	2220      	movs	r2, #32
 8011844:	e7e1      	b.n	801180a <__lo0bits+0x1e>
	...

08011848 <__i2b>:
 8011848:	b510      	push	{r4, lr}
 801184a:	460c      	mov	r4, r1
 801184c:	2101      	movs	r1, #1
 801184e:	f7ff ff05 	bl	801165c <_Balloc>
 8011852:	4602      	mov	r2, r0
 8011854:	b928      	cbnz	r0, 8011862 <__i2b+0x1a>
 8011856:	4b05      	ldr	r3, [pc, #20]	; (801186c <__i2b+0x24>)
 8011858:	4805      	ldr	r0, [pc, #20]	; (8011870 <__i2b+0x28>)
 801185a:	f240 1145 	movw	r1, #325	; 0x145
 801185e:	f000 fca9 	bl	80121b4 <__assert_func>
 8011862:	2301      	movs	r3, #1
 8011864:	6144      	str	r4, [r0, #20]
 8011866:	6103      	str	r3, [r0, #16]
 8011868:	bd10      	pop	{r4, pc}
 801186a:	bf00      	nop
 801186c:	0801465c 	.word	0x0801465c
 8011870:	0801466d 	.word	0x0801466d

08011874 <__multiply>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	4691      	mov	r9, r2
 801187a:	690a      	ldr	r2, [r1, #16]
 801187c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011880:	429a      	cmp	r2, r3
 8011882:	bfb8      	it	lt
 8011884:	460b      	movlt	r3, r1
 8011886:	460c      	mov	r4, r1
 8011888:	bfbc      	itt	lt
 801188a:	464c      	movlt	r4, r9
 801188c:	4699      	movlt	r9, r3
 801188e:	6927      	ldr	r7, [r4, #16]
 8011890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011894:	68a3      	ldr	r3, [r4, #8]
 8011896:	6861      	ldr	r1, [r4, #4]
 8011898:	eb07 060a 	add.w	r6, r7, sl
 801189c:	42b3      	cmp	r3, r6
 801189e:	b085      	sub	sp, #20
 80118a0:	bfb8      	it	lt
 80118a2:	3101      	addlt	r1, #1
 80118a4:	f7ff feda 	bl	801165c <_Balloc>
 80118a8:	b930      	cbnz	r0, 80118b8 <__multiply+0x44>
 80118aa:	4602      	mov	r2, r0
 80118ac:	4b44      	ldr	r3, [pc, #272]	; (80119c0 <__multiply+0x14c>)
 80118ae:	4845      	ldr	r0, [pc, #276]	; (80119c4 <__multiply+0x150>)
 80118b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80118b4:	f000 fc7e 	bl	80121b4 <__assert_func>
 80118b8:	f100 0514 	add.w	r5, r0, #20
 80118bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80118c0:	462b      	mov	r3, r5
 80118c2:	2200      	movs	r2, #0
 80118c4:	4543      	cmp	r3, r8
 80118c6:	d321      	bcc.n	801190c <__multiply+0x98>
 80118c8:	f104 0314 	add.w	r3, r4, #20
 80118cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80118d0:	f109 0314 	add.w	r3, r9, #20
 80118d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80118d8:	9202      	str	r2, [sp, #8]
 80118da:	1b3a      	subs	r2, r7, r4
 80118dc:	3a15      	subs	r2, #21
 80118de:	f022 0203 	bic.w	r2, r2, #3
 80118e2:	3204      	adds	r2, #4
 80118e4:	f104 0115 	add.w	r1, r4, #21
 80118e8:	428f      	cmp	r7, r1
 80118ea:	bf38      	it	cc
 80118ec:	2204      	movcc	r2, #4
 80118ee:	9201      	str	r2, [sp, #4]
 80118f0:	9a02      	ldr	r2, [sp, #8]
 80118f2:	9303      	str	r3, [sp, #12]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d80c      	bhi.n	8011912 <__multiply+0x9e>
 80118f8:	2e00      	cmp	r6, #0
 80118fa:	dd03      	ble.n	8011904 <__multiply+0x90>
 80118fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011900:	2b00      	cmp	r3, #0
 8011902:	d05b      	beq.n	80119bc <__multiply+0x148>
 8011904:	6106      	str	r6, [r0, #16]
 8011906:	b005      	add	sp, #20
 8011908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801190c:	f843 2b04 	str.w	r2, [r3], #4
 8011910:	e7d8      	b.n	80118c4 <__multiply+0x50>
 8011912:	f8b3 a000 	ldrh.w	sl, [r3]
 8011916:	f1ba 0f00 	cmp.w	sl, #0
 801191a:	d024      	beq.n	8011966 <__multiply+0xf2>
 801191c:	f104 0e14 	add.w	lr, r4, #20
 8011920:	46a9      	mov	r9, r5
 8011922:	f04f 0c00 	mov.w	ip, #0
 8011926:	f85e 2b04 	ldr.w	r2, [lr], #4
 801192a:	f8d9 1000 	ldr.w	r1, [r9]
 801192e:	fa1f fb82 	uxth.w	fp, r2
 8011932:	b289      	uxth	r1, r1
 8011934:	fb0a 110b 	mla	r1, sl, fp, r1
 8011938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801193c:	f8d9 2000 	ldr.w	r2, [r9]
 8011940:	4461      	add	r1, ip
 8011942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011946:	fb0a c20b 	mla	r2, sl, fp, ip
 801194a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801194e:	b289      	uxth	r1, r1
 8011950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011954:	4577      	cmp	r7, lr
 8011956:	f849 1b04 	str.w	r1, [r9], #4
 801195a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801195e:	d8e2      	bhi.n	8011926 <__multiply+0xb2>
 8011960:	9a01      	ldr	r2, [sp, #4]
 8011962:	f845 c002 	str.w	ip, [r5, r2]
 8011966:	9a03      	ldr	r2, [sp, #12]
 8011968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801196c:	3304      	adds	r3, #4
 801196e:	f1b9 0f00 	cmp.w	r9, #0
 8011972:	d021      	beq.n	80119b8 <__multiply+0x144>
 8011974:	6829      	ldr	r1, [r5, #0]
 8011976:	f104 0c14 	add.w	ip, r4, #20
 801197a:	46ae      	mov	lr, r5
 801197c:	f04f 0a00 	mov.w	sl, #0
 8011980:	f8bc b000 	ldrh.w	fp, [ip]
 8011984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011988:	fb09 220b 	mla	r2, r9, fp, r2
 801198c:	4452      	add	r2, sl
 801198e:	b289      	uxth	r1, r1
 8011990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011994:	f84e 1b04 	str.w	r1, [lr], #4
 8011998:	f85c 1b04 	ldr.w	r1, [ip], #4
 801199c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119a0:	f8be 1000 	ldrh.w	r1, [lr]
 80119a4:	fb09 110a 	mla	r1, r9, sl, r1
 80119a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80119ac:	4567      	cmp	r7, ip
 80119ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119b2:	d8e5      	bhi.n	8011980 <__multiply+0x10c>
 80119b4:	9a01      	ldr	r2, [sp, #4]
 80119b6:	50a9      	str	r1, [r5, r2]
 80119b8:	3504      	adds	r5, #4
 80119ba:	e799      	b.n	80118f0 <__multiply+0x7c>
 80119bc:	3e01      	subs	r6, #1
 80119be:	e79b      	b.n	80118f8 <__multiply+0x84>
 80119c0:	0801465c 	.word	0x0801465c
 80119c4:	0801466d 	.word	0x0801466d

080119c8 <__pow5mult>:
 80119c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119cc:	4615      	mov	r5, r2
 80119ce:	f012 0203 	ands.w	r2, r2, #3
 80119d2:	4606      	mov	r6, r0
 80119d4:	460f      	mov	r7, r1
 80119d6:	d007      	beq.n	80119e8 <__pow5mult+0x20>
 80119d8:	4c25      	ldr	r4, [pc, #148]	; (8011a70 <__pow5mult+0xa8>)
 80119da:	3a01      	subs	r2, #1
 80119dc:	2300      	movs	r3, #0
 80119de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80119e2:	f7ff fe9d 	bl	8011720 <__multadd>
 80119e6:	4607      	mov	r7, r0
 80119e8:	10ad      	asrs	r5, r5, #2
 80119ea:	d03d      	beq.n	8011a68 <__pow5mult+0xa0>
 80119ec:	69f4      	ldr	r4, [r6, #28]
 80119ee:	b97c      	cbnz	r4, 8011a10 <__pow5mult+0x48>
 80119f0:	2010      	movs	r0, #16
 80119f2:	f7ff fd7f 	bl	80114f4 <malloc>
 80119f6:	4602      	mov	r2, r0
 80119f8:	61f0      	str	r0, [r6, #28]
 80119fa:	b928      	cbnz	r0, 8011a08 <__pow5mult+0x40>
 80119fc:	4b1d      	ldr	r3, [pc, #116]	; (8011a74 <__pow5mult+0xac>)
 80119fe:	481e      	ldr	r0, [pc, #120]	; (8011a78 <__pow5mult+0xb0>)
 8011a00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a04:	f000 fbd6 	bl	80121b4 <__assert_func>
 8011a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a0c:	6004      	str	r4, [r0, #0]
 8011a0e:	60c4      	str	r4, [r0, #12]
 8011a10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a18:	b94c      	cbnz	r4, 8011a2e <__pow5mult+0x66>
 8011a1a:	f240 2171 	movw	r1, #625	; 0x271
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f7ff ff12 	bl	8011848 <__i2b>
 8011a24:	2300      	movs	r3, #0
 8011a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	6003      	str	r3, [r0, #0]
 8011a2e:	f04f 0900 	mov.w	r9, #0
 8011a32:	07eb      	lsls	r3, r5, #31
 8011a34:	d50a      	bpl.n	8011a4c <__pow5mult+0x84>
 8011a36:	4639      	mov	r1, r7
 8011a38:	4622      	mov	r2, r4
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	f7ff ff1a 	bl	8011874 <__multiply>
 8011a40:	4639      	mov	r1, r7
 8011a42:	4680      	mov	r8, r0
 8011a44:	4630      	mov	r0, r6
 8011a46:	f7ff fe49 	bl	80116dc <_Bfree>
 8011a4a:	4647      	mov	r7, r8
 8011a4c:	106d      	asrs	r5, r5, #1
 8011a4e:	d00b      	beq.n	8011a68 <__pow5mult+0xa0>
 8011a50:	6820      	ldr	r0, [r4, #0]
 8011a52:	b938      	cbnz	r0, 8011a64 <__pow5mult+0x9c>
 8011a54:	4622      	mov	r2, r4
 8011a56:	4621      	mov	r1, r4
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f7ff ff0b 	bl	8011874 <__multiply>
 8011a5e:	6020      	str	r0, [r4, #0]
 8011a60:	f8c0 9000 	str.w	r9, [r0]
 8011a64:	4604      	mov	r4, r0
 8011a66:	e7e4      	b.n	8011a32 <__pow5mult+0x6a>
 8011a68:	4638      	mov	r0, r7
 8011a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	bf00      	nop
 8011a70:	080147b8 	.word	0x080147b8
 8011a74:	080145ed 	.word	0x080145ed
 8011a78:	0801466d 	.word	0x0801466d

08011a7c <__lshift>:
 8011a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a80:	460c      	mov	r4, r1
 8011a82:	6849      	ldr	r1, [r1, #4]
 8011a84:	6923      	ldr	r3, [r4, #16]
 8011a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a8a:	68a3      	ldr	r3, [r4, #8]
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	4691      	mov	r9, r2
 8011a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a94:	f108 0601 	add.w	r6, r8, #1
 8011a98:	42b3      	cmp	r3, r6
 8011a9a:	db0b      	blt.n	8011ab4 <__lshift+0x38>
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f7ff fddd 	bl	801165c <_Balloc>
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	b948      	cbnz	r0, 8011aba <__lshift+0x3e>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	4b28      	ldr	r3, [pc, #160]	; (8011b4c <__lshift+0xd0>)
 8011aaa:	4829      	ldr	r0, [pc, #164]	; (8011b50 <__lshift+0xd4>)
 8011aac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011ab0:	f000 fb80 	bl	80121b4 <__assert_func>
 8011ab4:	3101      	adds	r1, #1
 8011ab6:	005b      	lsls	r3, r3, #1
 8011ab8:	e7ee      	b.n	8011a98 <__lshift+0x1c>
 8011aba:	2300      	movs	r3, #0
 8011abc:	f100 0114 	add.w	r1, r0, #20
 8011ac0:	f100 0210 	add.w	r2, r0, #16
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	4553      	cmp	r3, sl
 8011ac8:	db33      	blt.n	8011b32 <__lshift+0xb6>
 8011aca:	6920      	ldr	r0, [r4, #16]
 8011acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ad0:	f104 0314 	add.w	r3, r4, #20
 8011ad4:	f019 091f 	ands.w	r9, r9, #31
 8011ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011adc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ae0:	d02b      	beq.n	8011b3a <__lshift+0xbe>
 8011ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8011ae6:	468a      	mov	sl, r1
 8011ae8:	2200      	movs	r2, #0
 8011aea:	6818      	ldr	r0, [r3, #0]
 8011aec:	fa00 f009 	lsl.w	r0, r0, r9
 8011af0:	4310      	orrs	r0, r2
 8011af2:	f84a 0b04 	str.w	r0, [sl], #4
 8011af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011afa:	459c      	cmp	ip, r3
 8011afc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b00:	d8f3      	bhi.n	8011aea <__lshift+0x6e>
 8011b02:	ebac 0304 	sub.w	r3, ip, r4
 8011b06:	3b15      	subs	r3, #21
 8011b08:	f023 0303 	bic.w	r3, r3, #3
 8011b0c:	3304      	adds	r3, #4
 8011b0e:	f104 0015 	add.w	r0, r4, #21
 8011b12:	4584      	cmp	ip, r0
 8011b14:	bf38      	it	cc
 8011b16:	2304      	movcc	r3, #4
 8011b18:	50ca      	str	r2, [r1, r3]
 8011b1a:	b10a      	cbz	r2, 8011b20 <__lshift+0xa4>
 8011b1c:	f108 0602 	add.w	r6, r8, #2
 8011b20:	3e01      	subs	r6, #1
 8011b22:	4638      	mov	r0, r7
 8011b24:	612e      	str	r6, [r5, #16]
 8011b26:	4621      	mov	r1, r4
 8011b28:	f7ff fdd8 	bl	80116dc <_Bfree>
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b36:	3301      	adds	r3, #1
 8011b38:	e7c5      	b.n	8011ac6 <__lshift+0x4a>
 8011b3a:	3904      	subs	r1, #4
 8011b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b44:	459c      	cmp	ip, r3
 8011b46:	d8f9      	bhi.n	8011b3c <__lshift+0xc0>
 8011b48:	e7ea      	b.n	8011b20 <__lshift+0xa4>
 8011b4a:	bf00      	nop
 8011b4c:	0801465c 	.word	0x0801465c
 8011b50:	0801466d 	.word	0x0801466d

08011b54 <__mcmp>:
 8011b54:	b530      	push	{r4, r5, lr}
 8011b56:	6902      	ldr	r2, [r0, #16]
 8011b58:	690c      	ldr	r4, [r1, #16]
 8011b5a:	1b12      	subs	r2, r2, r4
 8011b5c:	d10e      	bne.n	8011b7c <__mcmp+0x28>
 8011b5e:	f100 0314 	add.w	r3, r0, #20
 8011b62:	3114      	adds	r1, #20
 8011b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011b74:	42a5      	cmp	r5, r4
 8011b76:	d003      	beq.n	8011b80 <__mcmp+0x2c>
 8011b78:	d305      	bcc.n	8011b86 <__mcmp+0x32>
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	bd30      	pop	{r4, r5, pc}
 8011b80:	4283      	cmp	r3, r0
 8011b82:	d3f3      	bcc.n	8011b6c <__mcmp+0x18>
 8011b84:	e7fa      	b.n	8011b7c <__mcmp+0x28>
 8011b86:	f04f 32ff 	mov.w	r2, #4294967295
 8011b8a:	e7f7      	b.n	8011b7c <__mcmp+0x28>

08011b8c <__mdiff>:
 8011b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	460c      	mov	r4, r1
 8011b92:	4606      	mov	r6, r0
 8011b94:	4611      	mov	r1, r2
 8011b96:	4620      	mov	r0, r4
 8011b98:	4690      	mov	r8, r2
 8011b9a:	f7ff ffdb 	bl	8011b54 <__mcmp>
 8011b9e:	1e05      	subs	r5, r0, #0
 8011ba0:	d110      	bne.n	8011bc4 <__mdiff+0x38>
 8011ba2:	4629      	mov	r1, r5
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f7ff fd59 	bl	801165c <_Balloc>
 8011baa:	b930      	cbnz	r0, 8011bba <__mdiff+0x2e>
 8011bac:	4b3a      	ldr	r3, [pc, #232]	; (8011c98 <__mdiff+0x10c>)
 8011bae:	4602      	mov	r2, r0
 8011bb0:	f240 2137 	movw	r1, #567	; 0x237
 8011bb4:	4839      	ldr	r0, [pc, #228]	; (8011c9c <__mdiff+0x110>)
 8011bb6:	f000 fafd 	bl	80121b4 <__assert_func>
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc4:	bfa4      	itt	ge
 8011bc6:	4643      	movge	r3, r8
 8011bc8:	46a0      	movge	r8, r4
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011bd0:	bfa6      	itte	ge
 8011bd2:	461c      	movge	r4, r3
 8011bd4:	2500      	movge	r5, #0
 8011bd6:	2501      	movlt	r5, #1
 8011bd8:	f7ff fd40 	bl	801165c <_Balloc>
 8011bdc:	b920      	cbnz	r0, 8011be8 <__mdiff+0x5c>
 8011bde:	4b2e      	ldr	r3, [pc, #184]	; (8011c98 <__mdiff+0x10c>)
 8011be0:	4602      	mov	r2, r0
 8011be2:	f240 2145 	movw	r1, #581	; 0x245
 8011be6:	e7e5      	b.n	8011bb4 <__mdiff+0x28>
 8011be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011bec:	6926      	ldr	r6, [r4, #16]
 8011bee:	60c5      	str	r5, [r0, #12]
 8011bf0:	f104 0914 	add.w	r9, r4, #20
 8011bf4:	f108 0514 	add.w	r5, r8, #20
 8011bf8:	f100 0e14 	add.w	lr, r0, #20
 8011bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c04:	f108 0210 	add.w	r2, r8, #16
 8011c08:	46f2      	mov	sl, lr
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c14:	fa11 f88b 	uxtah	r8, r1, fp
 8011c18:	b299      	uxth	r1, r3
 8011c1a:	0c1b      	lsrs	r3, r3, #16
 8011c1c:	eba8 0801 	sub.w	r8, r8, r1
 8011c20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011c24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011c28:	fa1f f888 	uxth.w	r8, r8
 8011c2c:	1419      	asrs	r1, r3, #16
 8011c2e:	454e      	cmp	r6, r9
 8011c30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011c34:	f84a 3b04 	str.w	r3, [sl], #4
 8011c38:	d8e8      	bhi.n	8011c0c <__mdiff+0x80>
 8011c3a:	1b33      	subs	r3, r6, r4
 8011c3c:	3b15      	subs	r3, #21
 8011c3e:	f023 0303 	bic.w	r3, r3, #3
 8011c42:	3304      	adds	r3, #4
 8011c44:	3415      	adds	r4, #21
 8011c46:	42a6      	cmp	r6, r4
 8011c48:	bf38      	it	cc
 8011c4a:	2304      	movcc	r3, #4
 8011c4c:	441d      	add	r5, r3
 8011c4e:	4473      	add	r3, lr
 8011c50:	469e      	mov	lr, r3
 8011c52:	462e      	mov	r6, r5
 8011c54:	4566      	cmp	r6, ip
 8011c56:	d30e      	bcc.n	8011c76 <__mdiff+0xea>
 8011c58:	f10c 0203 	add.w	r2, ip, #3
 8011c5c:	1b52      	subs	r2, r2, r5
 8011c5e:	f022 0203 	bic.w	r2, r2, #3
 8011c62:	3d03      	subs	r5, #3
 8011c64:	45ac      	cmp	ip, r5
 8011c66:	bf38      	it	cc
 8011c68:	2200      	movcc	r2, #0
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011c70:	b17a      	cbz	r2, 8011c92 <__mdiff+0x106>
 8011c72:	6107      	str	r7, [r0, #16]
 8011c74:	e7a4      	b.n	8011bc0 <__mdiff+0x34>
 8011c76:	f856 8b04 	ldr.w	r8, [r6], #4
 8011c7a:	fa11 f288 	uxtah	r2, r1, r8
 8011c7e:	1414      	asrs	r4, r2, #16
 8011c80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011c84:	b292      	uxth	r2, r2
 8011c86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011c8a:	f84e 2b04 	str.w	r2, [lr], #4
 8011c8e:	1421      	asrs	r1, r4, #16
 8011c90:	e7e0      	b.n	8011c54 <__mdiff+0xc8>
 8011c92:	3f01      	subs	r7, #1
 8011c94:	e7ea      	b.n	8011c6c <__mdiff+0xe0>
 8011c96:	bf00      	nop
 8011c98:	0801465c 	.word	0x0801465c
 8011c9c:	0801466d 	.word	0x0801466d

08011ca0 <__d2b>:
 8011ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ca4:	460f      	mov	r7, r1
 8011ca6:	2101      	movs	r1, #1
 8011ca8:	ec59 8b10 	vmov	r8, r9, d0
 8011cac:	4616      	mov	r6, r2
 8011cae:	f7ff fcd5 	bl	801165c <_Balloc>
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	b930      	cbnz	r0, 8011cc4 <__d2b+0x24>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	4b24      	ldr	r3, [pc, #144]	; (8011d4c <__d2b+0xac>)
 8011cba:	4825      	ldr	r0, [pc, #148]	; (8011d50 <__d2b+0xb0>)
 8011cbc:	f240 310f 	movw	r1, #783	; 0x30f
 8011cc0:	f000 fa78 	bl	80121b4 <__assert_func>
 8011cc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ccc:	bb2d      	cbnz	r5, 8011d1a <__d2b+0x7a>
 8011cce:	9301      	str	r3, [sp, #4]
 8011cd0:	f1b8 0300 	subs.w	r3, r8, #0
 8011cd4:	d026      	beq.n	8011d24 <__d2b+0x84>
 8011cd6:	4668      	mov	r0, sp
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	f7ff fd87 	bl	80117ec <__lo0bits>
 8011cde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ce2:	b1e8      	cbz	r0, 8011d20 <__d2b+0x80>
 8011ce4:	f1c0 0320 	rsb	r3, r0, #32
 8011ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cec:	430b      	orrs	r3, r1
 8011cee:	40c2      	lsrs	r2, r0
 8011cf0:	6163      	str	r3, [r4, #20]
 8011cf2:	9201      	str	r2, [sp, #4]
 8011cf4:	9b01      	ldr	r3, [sp, #4]
 8011cf6:	61a3      	str	r3, [r4, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bf14      	ite	ne
 8011cfc:	2202      	movne	r2, #2
 8011cfe:	2201      	moveq	r2, #1
 8011d00:	6122      	str	r2, [r4, #16]
 8011d02:	b1bd      	cbz	r5, 8011d34 <__d2b+0x94>
 8011d04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d08:	4405      	add	r5, r0
 8011d0a:	603d      	str	r5, [r7, #0]
 8011d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d10:	6030      	str	r0, [r6, #0]
 8011d12:	4620      	mov	r0, r4
 8011d14:	b003      	add	sp, #12
 8011d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d1e:	e7d6      	b.n	8011cce <__d2b+0x2e>
 8011d20:	6161      	str	r1, [r4, #20]
 8011d22:	e7e7      	b.n	8011cf4 <__d2b+0x54>
 8011d24:	a801      	add	r0, sp, #4
 8011d26:	f7ff fd61 	bl	80117ec <__lo0bits>
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	6163      	str	r3, [r4, #20]
 8011d2e:	3020      	adds	r0, #32
 8011d30:	2201      	movs	r2, #1
 8011d32:	e7e5      	b.n	8011d00 <__d2b+0x60>
 8011d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d3c:	6038      	str	r0, [r7, #0]
 8011d3e:	6918      	ldr	r0, [r3, #16]
 8011d40:	f7ff fd34 	bl	80117ac <__hi0bits>
 8011d44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d48:	e7e2      	b.n	8011d10 <__d2b+0x70>
 8011d4a:	bf00      	nop
 8011d4c:	0801465c 	.word	0x0801465c
 8011d50:	0801466d 	.word	0x0801466d

08011d54 <__ssputs_r>:
 8011d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d58:	688e      	ldr	r6, [r1, #8]
 8011d5a:	461f      	mov	r7, r3
 8011d5c:	42be      	cmp	r6, r7
 8011d5e:	680b      	ldr	r3, [r1, #0]
 8011d60:	4682      	mov	sl, r0
 8011d62:	460c      	mov	r4, r1
 8011d64:	4690      	mov	r8, r2
 8011d66:	d82c      	bhi.n	8011dc2 <__ssputs_r+0x6e>
 8011d68:	898a      	ldrh	r2, [r1, #12]
 8011d6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d6e:	d026      	beq.n	8011dbe <__ssputs_r+0x6a>
 8011d70:	6965      	ldr	r5, [r4, #20]
 8011d72:	6909      	ldr	r1, [r1, #16]
 8011d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d78:	eba3 0901 	sub.w	r9, r3, r1
 8011d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d80:	1c7b      	adds	r3, r7, #1
 8011d82:	444b      	add	r3, r9
 8011d84:	106d      	asrs	r5, r5, #1
 8011d86:	429d      	cmp	r5, r3
 8011d88:	bf38      	it	cc
 8011d8a:	461d      	movcc	r5, r3
 8011d8c:	0553      	lsls	r3, r2, #21
 8011d8e:	d527      	bpl.n	8011de0 <__ssputs_r+0x8c>
 8011d90:	4629      	mov	r1, r5
 8011d92:	f7ff fbd7 	bl	8011544 <_malloc_r>
 8011d96:	4606      	mov	r6, r0
 8011d98:	b360      	cbz	r0, 8011df4 <__ssputs_r+0xa0>
 8011d9a:	6921      	ldr	r1, [r4, #16]
 8011d9c:	464a      	mov	r2, r9
 8011d9e:	f7fe fcd4 	bl	801074a <memcpy>
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	6126      	str	r6, [r4, #16]
 8011db0:	6165      	str	r5, [r4, #20]
 8011db2:	444e      	add	r6, r9
 8011db4:	eba5 0509 	sub.w	r5, r5, r9
 8011db8:	6026      	str	r6, [r4, #0]
 8011dba:	60a5      	str	r5, [r4, #8]
 8011dbc:	463e      	mov	r6, r7
 8011dbe:	42be      	cmp	r6, r7
 8011dc0:	d900      	bls.n	8011dc4 <__ssputs_r+0x70>
 8011dc2:	463e      	mov	r6, r7
 8011dc4:	6820      	ldr	r0, [r4, #0]
 8011dc6:	4632      	mov	r2, r6
 8011dc8:	4641      	mov	r1, r8
 8011dca:	f000 f9c9 	bl	8012160 <memmove>
 8011dce:	68a3      	ldr	r3, [r4, #8]
 8011dd0:	1b9b      	subs	r3, r3, r6
 8011dd2:	60a3      	str	r3, [r4, #8]
 8011dd4:	6823      	ldr	r3, [r4, #0]
 8011dd6:	4433      	add	r3, r6
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	2000      	movs	r0, #0
 8011ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de0:	462a      	mov	r2, r5
 8011de2:	f000 fa2d 	bl	8012240 <_realloc_r>
 8011de6:	4606      	mov	r6, r0
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d1e0      	bne.n	8011dae <__ssputs_r+0x5a>
 8011dec:	6921      	ldr	r1, [r4, #16]
 8011dee:	4650      	mov	r0, sl
 8011df0:	f7ff fb34 	bl	801145c <_free_r>
 8011df4:	230c      	movs	r3, #12
 8011df6:	f8ca 3000 	str.w	r3, [sl]
 8011dfa:	89a3      	ldrh	r3, [r4, #12]
 8011dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e00:	81a3      	strh	r3, [r4, #12]
 8011e02:	f04f 30ff 	mov.w	r0, #4294967295
 8011e06:	e7e9      	b.n	8011ddc <__ssputs_r+0x88>

08011e08 <_svfiprintf_r>:
 8011e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e0c:	4698      	mov	r8, r3
 8011e0e:	898b      	ldrh	r3, [r1, #12]
 8011e10:	061b      	lsls	r3, r3, #24
 8011e12:	b09d      	sub	sp, #116	; 0x74
 8011e14:	4607      	mov	r7, r0
 8011e16:	460d      	mov	r5, r1
 8011e18:	4614      	mov	r4, r2
 8011e1a:	d50e      	bpl.n	8011e3a <_svfiprintf_r+0x32>
 8011e1c:	690b      	ldr	r3, [r1, #16]
 8011e1e:	b963      	cbnz	r3, 8011e3a <_svfiprintf_r+0x32>
 8011e20:	2140      	movs	r1, #64	; 0x40
 8011e22:	f7ff fb8f 	bl	8011544 <_malloc_r>
 8011e26:	6028      	str	r0, [r5, #0]
 8011e28:	6128      	str	r0, [r5, #16]
 8011e2a:	b920      	cbnz	r0, 8011e36 <_svfiprintf_r+0x2e>
 8011e2c:	230c      	movs	r3, #12
 8011e2e:	603b      	str	r3, [r7, #0]
 8011e30:	f04f 30ff 	mov.w	r0, #4294967295
 8011e34:	e0d0      	b.n	8011fd8 <_svfiprintf_r+0x1d0>
 8011e36:	2340      	movs	r3, #64	; 0x40
 8011e38:	616b      	str	r3, [r5, #20]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e3e:	2320      	movs	r3, #32
 8011e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e48:	2330      	movs	r3, #48	; 0x30
 8011e4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ff0 <_svfiprintf_r+0x1e8>
 8011e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e52:	f04f 0901 	mov.w	r9, #1
 8011e56:	4623      	mov	r3, r4
 8011e58:	469a      	mov	sl, r3
 8011e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e5e:	b10a      	cbz	r2, 8011e64 <_svfiprintf_r+0x5c>
 8011e60:	2a25      	cmp	r2, #37	; 0x25
 8011e62:	d1f9      	bne.n	8011e58 <_svfiprintf_r+0x50>
 8011e64:	ebba 0b04 	subs.w	fp, sl, r4
 8011e68:	d00b      	beq.n	8011e82 <_svfiprintf_r+0x7a>
 8011e6a:	465b      	mov	r3, fp
 8011e6c:	4622      	mov	r2, r4
 8011e6e:	4629      	mov	r1, r5
 8011e70:	4638      	mov	r0, r7
 8011e72:	f7ff ff6f 	bl	8011d54 <__ssputs_r>
 8011e76:	3001      	adds	r0, #1
 8011e78:	f000 80a9 	beq.w	8011fce <_svfiprintf_r+0x1c6>
 8011e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e7e:	445a      	add	r2, fp
 8011e80:	9209      	str	r2, [sp, #36]	; 0x24
 8011e82:	f89a 3000 	ldrb.w	r3, [sl]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f000 80a1 	beq.w	8011fce <_svfiprintf_r+0x1c6>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8011e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e96:	f10a 0a01 	add.w	sl, sl, #1
 8011e9a:	9304      	str	r3, [sp, #16]
 8011e9c:	9307      	str	r3, [sp, #28]
 8011e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8011ea4:	4654      	mov	r4, sl
 8011ea6:	2205      	movs	r2, #5
 8011ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eac:	4850      	ldr	r0, [pc, #320]	; (8011ff0 <_svfiprintf_r+0x1e8>)
 8011eae:	f7ee f9af 	bl	8000210 <memchr>
 8011eb2:	9a04      	ldr	r2, [sp, #16]
 8011eb4:	b9d8      	cbnz	r0, 8011eee <_svfiprintf_r+0xe6>
 8011eb6:	06d0      	lsls	r0, r2, #27
 8011eb8:	bf44      	itt	mi
 8011eba:	2320      	movmi	r3, #32
 8011ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ec0:	0711      	lsls	r1, r2, #28
 8011ec2:	bf44      	itt	mi
 8011ec4:	232b      	movmi	r3, #43	; 0x2b
 8011ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eca:	f89a 3000 	ldrb.w	r3, [sl]
 8011ece:	2b2a      	cmp	r3, #42	; 0x2a
 8011ed0:	d015      	beq.n	8011efe <_svfiprintf_r+0xf6>
 8011ed2:	9a07      	ldr	r2, [sp, #28]
 8011ed4:	4654      	mov	r4, sl
 8011ed6:	2000      	movs	r0, #0
 8011ed8:	f04f 0c0a 	mov.w	ip, #10
 8011edc:	4621      	mov	r1, r4
 8011ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ee2:	3b30      	subs	r3, #48	; 0x30
 8011ee4:	2b09      	cmp	r3, #9
 8011ee6:	d94d      	bls.n	8011f84 <_svfiprintf_r+0x17c>
 8011ee8:	b1b0      	cbz	r0, 8011f18 <_svfiprintf_r+0x110>
 8011eea:	9207      	str	r2, [sp, #28]
 8011eec:	e014      	b.n	8011f18 <_svfiprintf_r+0x110>
 8011eee:	eba0 0308 	sub.w	r3, r0, r8
 8011ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	46a2      	mov	sl, r4
 8011efc:	e7d2      	b.n	8011ea4 <_svfiprintf_r+0x9c>
 8011efe:	9b03      	ldr	r3, [sp, #12]
 8011f00:	1d19      	adds	r1, r3, #4
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	9103      	str	r1, [sp, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	bfbb      	ittet	lt
 8011f0a:	425b      	neglt	r3, r3
 8011f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f10:	9307      	strge	r3, [sp, #28]
 8011f12:	9307      	strlt	r3, [sp, #28]
 8011f14:	bfb8      	it	lt
 8011f16:	9204      	strlt	r2, [sp, #16]
 8011f18:	7823      	ldrb	r3, [r4, #0]
 8011f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8011f1c:	d10c      	bne.n	8011f38 <_svfiprintf_r+0x130>
 8011f1e:	7863      	ldrb	r3, [r4, #1]
 8011f20:	2b2a      	cmp	r3, #42	; 0x2a
 8011f22:	d134      	bne.n	8011f8e <_svfiprintf_r+0x186>
 8011f24:	9b03      	ldr	r3, [sp, #12]
 8011f26:	1d1a      	adds	r2, r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	9203      	str	r2, [sp, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	bfb8      	it	lt
 8011f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f34:	3402      	adds	r4, #2
 8011f36:	9305      	str	r3, [sp, #20]
 8011f38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012000 <_svfiprintf_r+0x1f8>
 8011f3c:	7821      	ldrb	r1, [r4, #0]
 8011f3e:	2203      	movs	r2, #3
 8011f40:	4650      	mov	r0, sl
 8011f42:	f7ee f965 	bl	8000210 <memchr>
 8011f46:	b138      	cbz	r0, 8011f58 <_svfiprintf_r+0x150>
 8011f48:	9b04      	ldr	r3, [sp, #16]
 8011f4a:	eba0 000a 	sub.w	r0, r0, sl
 8011f4e:	2240      	movs	r2, #64	; 0x40
 8011f50:	4082      	lsls	r2, r0
 8011f52:	4313      	orrs	r3, r2
 8011f54:	3401      	adds	r4, #1
 8011f56:	9304      	str	r3, [sp, #16]
 8011f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f5c:	4825      	ldr	r0, [pc, #148]	; (8011ff4 <_svfiprintf_r+0x1ec>)
 8011f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f62:	2206      	movs	r2, #6
 8011f64:	f7ee f954 	bl	8000210 <memchr>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d038      	beq.n	8011fde <_svfiprintf_r+0x1d6>
 8011f6c:	4b22      	ldr	r3, [pc, #136]	; (8011ff8 <_svfiprintf_r+0x1f0>)
 8011f6e:	bb1b      	cbnz	r3, 8011fb8 <_svfiprintf_r+0x1b0>
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	3307      	adds	r3, #7
 8011f74:	f023 0307 	bic.w	r3, r3, #7
 8011f78:	3308      	adds	r3, #8
 8011f7a:	9303      	str	r3, [sp, #12]
 8011f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f7e:	4433      	add	r3, r6
 8011f80:	9309      	str	r3, [sp, #36]	; 0x24
 8011f82:	e768      	b.n	8011e56 <_svfiprintf_r+0x4e>
 8011f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f88:	460c      	mov	r4, r1
 8011f8a:	2001      	movs	r0, #1
 8011f8c:	e7a6      	b.n	8011edc <_svfiprintf_r+0xd4>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	3401      	adds	r4, #1
 8011f92:	9305      	str	r3, [sp, #20]
 8011f94:	4619      	mov	r1, r3
 8011f96:	f04f 0c0a 	mov.w	ip, #10
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fa0:	3a30      	subs	r2, #48	; 0x30
 8011fa2:	2a09      	cmp	r2, #9
 8011fa4:	d903      	bls.n	8011fae <_svfiprintf_r+0x1a6>
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d0c6      	beq.n	8011f38 <_svfiprintf_r+0x130>
 8011faa:	9105      	str	r1, [sp, #20]
 8011fac:	e7c4      	b.n	8011f38 <_svfiprintf_r+0x130>
 8011fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	e7f0      	b.n	8011f9a <_svfiprintf_r+0x192>
 8011fb8:	ab03      	add	r3, sp, #12
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	462a      	mov	r2, r5
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	; (8011ffc <_svfiprintf_r+0x1f4>)
 8011fc0:	a904      	add	r1, sp, #16
 8011fc2:	4638      	mov	r0, r7
 8011fc4:	f7fd fe56 	bl	800fc74 <_printf_float>
 8011fc8:	1c42      	adds	r2, r0, #1
 8011fca:	4606      	mov	r6, r0
 8011fcc:	d1d6      	bne.n	8011f7c <_svfiprintf_r+0x174>
 8011fce:	89ab      	ldrh	r3, [r5, #12]
 8011fd0:	065b      	lsls	r3, r3, #25
 8011fd2:	f53f af2d 	bmi.w	8011e30 <_svfiprintf_r+0x28>
 8011fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fd8:	b01d      	add	sp, #116	; 0x74
 8011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fde:	ab03      	add	r3, sp, #12
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	462a      	mov	r2, r5
 8011fe4:	4b05      	ldr	r3, [pc, #20]	; (8011ffc <_svfiprintf_r+0x1f4>)
 8011fe6:	a904      	add	r1, sp, #16
 8011fe8:	4638      	mov	r0, r7
 8011fea:	f7fe f8e7 	bl	80101bc <_printf_i>
 8011fee:	e7eb      	b.n	8011fc8 <_svfiprintf_r+0x1c0>
 8011ff0:	080147c4 	.word	0x080147c4
 8011ff4:	080147ce 	.word	0x080147ce
 8011ff8:	0800fc75 	.word	0x0800fc75
 8011ffc:	08011d55 	.word	0x08011d55
 8012000:	080147ca 	.word	0x080147ca

08012004 <__sflush_r>:
 8012004:	898a      	ldrh	r2, [r1, #12]
 8012006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801200a:	4605      	mov	r5, r0
 801200c:	0710      	lsls	r0, r2, #28
 801200e:	460c      	mov	r4, r1
 8012010:	d458      	bmi.n	80120c4 <__sflush_r+0xc0>
 8012012:	684b      	ldr	r3, [r1, #4]
 8012014:	2b00      	cmp	r3, #0
 8012016:	dc05      	bgt.n	8012024 <__sflush_r+0x20>
 8012018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801201a:	2b00      	cmp	r3, #0
 801201c:	dc02      	bgt.n	8012024 <__sflush_r+0x20>
 801201e:	2000      	movs	r0, #0
 8012020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012026:	2e00      	cmp	r6, #0
 8012028:	d0f9      	beq.n	801201e <__sflush_r+0x1a>
 801202a:	2300      	movs	r3, #0
 801202c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012030:	682f      	ldr	r7, [r5, #0]
 8012032:	6a21      	ldr	r1, [r4, #32]
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	d032      	beq.n	801209e <__sflush_r+0x9a>
 8012038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801203a:	89a3      	ldrh	r3, [r4, #12]
 801203c:	075a      	lsls	r2, r3, #29
 801203e:	d505      	bpl.n	801204c <__sflush_r+0x48>
 8012040:	6863      	ldr	r3, [r4, #4]
 8012042:	1ac0      	subs	r0, r0, r3
 8012044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012046:	b10b      	cbz	r3, 801204c <__sflush_r+0x48>
 8012048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801204a:	1ac0      	subs	r0, r0, r3
 801204c:	2300      	movs	r3, #0
 801204e:	4602      	mov	r2, r0
 8012050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012052:	6a21      	ldr	r1, [r4, #32]
 8012054:	4628      	mov	r0, r5
 8012056:	47b0      	blx	r6
 8012058:	1c43      	adds	r3, r0, #1
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	d106      	bne.n	801206c <__sflush_r+0x68>
 801205e:	6829      	ldr	r1, [r5, #0]
 8012060:	291d      	cmp	r1, #29
 8012062:	d82b      	bhi.n	80120bc <__sflush_r+0xb8>
 8012064:	4a29      	ldr	r2, [pc, #164]	; (801210c <__sflush_r+0x108>)
 8012066:	410a      	asrs	r2, r1
 8012068:	07d6      	lsls	r6, r2, #31
 801206a:	d427      	bmi.n	80120bc <__sflush_r+0xb8>
 801206c:	2200      	movs	r2, #0
 801206e:	6062      	str	r2, [r4, #4]
 8012070:	04d9      	lsls	r1, r3, #19
 8012072:	6922      	ldr	r2, [r4, #16]
 8012074:	6022      	str	r2, [r4, #0]
 8012076:	d504      	bpl.n	8012082 <__sflush_r+0x7e>
 8012078:	1c42      	adds	r2, r0, #1
 801207a:	d101      	bne.n	8012080 <__sflush_r+0x7c>
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	b903      	cbnz	r3, 8012082 <__sflush_r+0x7e>
 8012080:	6560      	str	r0, [r4, #84]	; 0x54
 8012082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012084:	602f      	str	r7, [r5, #0]
 8012086:	2900      	cmp	r1, #0
 8012088:	d0c9      	beq.n	801201e <__sflush_r+0x1a>
 801208a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801208e:	4299      	cmp	r1, r3
 8012090:	d002      	beq.n	8012098 <__sflush_r+0x94>
 8012092:	4628      	mov	r0, r5
 8012094:	f7ff f9e2 	bl	801145c <_free_r>
 8012098:	2000      	movs	r0, #0
 801209a:	6360      	str	r0, [r4, #52]	; 0x34
 801209c:	e7c0      	b.n	8012020 <__sflush_r+0x1c>
 801209e:	2301      	movs	r3, #1
 80120a0:	4628      	mov	r0, r5
 80120a2:	47b0      	blx	r6
 80120a4:	1c41      	adds	r1, r0, #1
 80120a6:	d1c8      	bne.n	801203a <__sflush_r+0x36>
 80120a8:	682b      	ldr	r3, [r5, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d0c5      	beq.n	801203a <__sflush_r+0x36>
 80120ae:	2b1d      	cmp	r3, #29
 80120b0:	d001      	beq.n	80120b6 <__sflush_r+0xb2>
 80120b2:	2b16      	cmp	r3, #22
 80120b4:	d101      	bne.n	80120ba <__sflush_r+0xb6>
 80120b6:	602f      	str	r7, [r5, #0]
 80120b8:	e7b1      	b.n	801201e <__sflush_r+0x1a>
 80120ba:	89a3      	ldrh	r3, [r4, #12]
 80120bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120c0:	81a3      	strh	r3, [r4, #12]
 80120c2:	e7ad      	b.n	8012020 <__sflush_r+0x1c>
 80120c4:	690f      	ldr	r7, [r1, #16]
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	d0a9      	beq.n	801201e <__sflush_r+0x1a>
 80120ca:	0793      	lsls	r3, r2, #30
 80120cc:	680e      	ldr	r6, [r1, #0]
 80120ce:	bf08      	it	eq
 80120d0:	694b      	ldreq	r3, [r1, #20]
 80120d2:	600f      	str	r7, [r1, #0]
 80120d4:	bf18      	it	ne
 80120d6:	2300      	movne	r3, #0
 80120d8:	eba6 0807 	sub.w	r8, r6, r7
 80120dc:	608b      	str	r3, [r1, #8]
 80120de:	f1b8 0f00 	cmp.w	r8, #0
 80120e2:	dd9c      	ble.n	801201e <__sflush_r+0x1a>
 80120e4:	6a21      	ldr	r1, [r4, #32]
 80120e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120e8:	4643      	mov	r3, r8
 80120ea:	463a      	mov	r2, r7
 80120ec:	4628      	mov	r0, r5
 80120ee:	47b0      	blx	r6
 80120f0:	2800      	cmp	r0, #0
 80120f2:	dc06      	bgt.n	8012102 <__sflush_r+0xfe>
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120fa:	81a3      	strh	r3, [r4, #12]
 80120fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012100:	e78e      	b.n	8012020 <__sflush_r+0x1c>
 8012102:	4407      	add	r7, r0
 8012104:	eba8 0800 	sub.w	r8, r8, r0
 8012108:	e7e9      	b.n	80120de <__sflush_r+0xda>
 801210a:	bf00      	nop
 801210c:	dfbffffe 	.word	0xdfbffffe

08012110 <_fflush_r>:
 8012110:	b538      	push	{r3, r4, r5, lr}
 8012112:	690b      	ldr	r3, [r1, #16]
 8012114:	4605      	mov	r5, r0
 8012116:	460c      	mov	r4, r1
 8012118:	b913      	cbnz	r3, 8012120 <_fflush_r+0x10>
 801211a:	2500      	movs	r5, #0
 801211c:	4628      	mov	r0, r5
 801211e:	bd38      	pop	{r3, r4, r5, pc}
 8012120:	b118      	cbz	r0, 801212a <_fflush_r+0x1a>
 8012122:	6a03      	ldr	r3, [r0, #32]
 8012124:	b90b      	cbnz	r3, 801212a <_fflush_r+0x1a>
 8012126:	f7fe f9f7 	bl	8010518 <__sinit>
 801212a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d0f3      	beq.n	801211a <_fflush_r+0xa>
 8012132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012134:	07d0      	lsls	r0, r2, #31
 8012136:	d404      	bmi.n	8012142 <_fflush_r+0x32>
 8012138:	0599      	lsls	r1, r3, #22
 801213a:	d402      	bmi.n	8012142 <_fflush_r+0x32>
 801213c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801213e:	f7fe fb02 	bl	8010746 <__retarget_lock_acquire_recursive>
 8012142:	4628      	mov	r0, r5
 8012144:	4621      	mov	r1, r4
 8012146:	f7ff ff5d 	bl	8012004 <__sflush_r>
 801214a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801214c:	07da      	lsls	r2, r3, #31
 801214e:	4605      	mov	r5, r0
 8012150:	d4e4      	bmi.n	801211c <_fflush_r+0xc>
 8012152:	89a3      	ldrh	r3, [r4, #12]
 8012154:	059b      	lsls	r3, r3, #22
 8012156:	d4e1      	bmi.n	801211c <_fflush_r+0xc>
 8012158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801215a:	f7fe faf5 	bl	8010748 <__retarget_lock_release_recursive>
 801215e:	e7dd      	b.n	801211c <_fflush_r+0xc>

08012160 <memmove>:
 8012160:	4288      	cmp	r0, r1
 8012162:	b510      	push	{r4, lr}
 8012164:	eb01 0402 	add.w	r4, r1, r2
 8012168:	d902      	bls.n	8012170 <memmove+0x10>
 801216a:	4284      	cmp	r4, r0
 801216c:	4623      	mov	r3, r4
 801216e:	d807      	bhi.n	8012180 <memmove+0x20>
 8012170:	1e43      	subs	r3, r0, #1
 8012172:	42a1      	cmp	r1, r4
 8012174:	d008      	beq.n	8012188 <memmove+0x28>
 8012176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801217a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801217e:	e7f8      	b.n	8012172 <memmove+0x12>
 8012180:	4402      	add	r2, r0
 8012182:	4601      	mov	r1, r0
 8012184:	428a      	cmp	r2, r1
 8012186:	d100      	bne.n	801218a <memmove+0x2a>
 8012188:	bd10      	pop	{r4, pc}
 801218a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801218e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012192:	e7f7      	b.n	8012184 <memmove+0x24>

08012194 <_sbrk_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d06      	ldr	r5, [pc, #24]	; (80121b0 <_sbrk_r+0x1c>)
 8012198:	2300      	movs	r3, #0
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	602b      	str	r3, [r5, #0]
 80121a0:	f7f5 fa8c 	bl	80076bc <_sbrk>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d102      	bne.n	80121ae <_sbrk_r+0x1a>
 80121a8:	682b      	ldr	r3, [r5, #0]
 80121aa:	b103      	cbz	r3, 80121ae <_sbrk_r+0x1a>
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	2001d640 	.word	0x2001d640

080121b4 <__assert_func>:
 80121b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121b6:	4614      	mov	r4, r2
 80121b8:	461a      	mov	r2, r3
 80121ba:	4b09      	ldr	r3, [pc, #36]	; (80121e0 <__assert_func+0x2c>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4605      	mov	r5, r0
 80121c0:	68d8      	ldr	r0, [r3, #12]
 80121c2:	b14c      	cbz	r4, 80121d8 <__assert_func+0x24>
 80121c4:	4b07      	ldr	r3, [pc, #28]	; (80121e4 <__assert_func+0x30>)
 80121c6:	9100      	str	r1, [sp, #0]
 80121c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121cc:	4906      	ldr	r1, [pc, #24]	; (80121e8 <__assert_func+0x34>)
 80121ce:	462b      	mov	r3, r5
 80121d0:	f000 f872 	bl	80122b8 <fiprintf>
 80121d4:	f000 f882 	bl	80122dc <abort>
 80121d8:	4b04      	ldr	r3, [pc, #16]	; (80121ec <__assert_func+0x38>)
 80121da:	461c      	mov	r4, r3
 80121dc:	e7f3      	b.n	80121c6 <__assert_func+0x12>
 80121de:	bf00      	nop
 80121e0:	200000c4 	.word	0x200000c4
 80121e4:	080147df 	.word	0x080147df
 80121e8:	080147ec 	.word	0x080147ec
 80121ec:	0801481a 	.word	0x0801481a

080121f0 <_calloc_r>:
 80121f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121f2:	fba1 2402 	umull	r2, r4, r1, r2
 80121f6:	b94c      	cbnz	r4, 801220c <_calloc_r+0x1c>
 80121f8:	4611      	mov	r1, r2
 80121fa:	9201      	str	r2, [sp, #4]
 80121fc:	f7ff f9a2 	bl	8011544 <_malloc_r>
 8012200:	9a01      	ldr	r2, [sp, #4]
 8012202:	4605      	mov	r5, r0
 8012204:	b930      	cbnz	r0, 8012214 <_calloc_r+0x24>
 8012206:	4628      	mov	r0, r5
 8012208:	b003      	add	sp, #12
 801220a:	bd30      	pop	{r4, r5, pc}
 801220c:	220c      	movs	r2, #12
 801220e:	6002      	str	r2, [r0, #0]
 8012210:	2500      	movs	r5, #0
 8012212:	e7f8      	b.n	8012206 <_calloc_r+0x16>
 8012214:	4621      	mov	r1, r4
 8012216:	f7fe fa18 	bl	801064a <memset>
 801221a:	e7f4      	b.n	8012206 <_calloc_r+0x16>

0801221c <__ascii_mbtowc>:
 801221c:	b082      	sub	sp, #8
 801221e:	b901      	cbnz	r1, 8012222 <__ascii_mbtowc+0x6>
 8012220:	a901      	add	r1, sp, #4
 8012222:	b142      	cbz	r2, 8012236 <__ascii_mbtowc+0x1a>
 8012224:	b14b      	cbz	r3, 801223a <__ascii_mbtowc+0x1e>
 8012226:	7813      	ldrb	r3, [r2, #0]
 8012228:	600b      	str	r3, [r1, #0]
 801222a:	7812      	ldrb	r2, [r2, #0]
 801222c:	1e10      	subs	r0, r2, #0
 801222e:	bf18      	it	ne
 8012230:	2001      	movne	r0, #1
 8012232:	b002      	add	sp, #8
 8012234:	4770      	bx	lr
 8012236:	4610      	mov	r0, r2
 8012238:	e7fb      	b.n	8012232 <__ascii_mbtowc+0x16>
 801223a:	f06f 0001 	mvn.w	r0, #1
 801223e:	e7f8      	b.n	8012232 <__ascii_mbtowc+0x16>

08012240 <_realloc_r>:
 8012240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012244:	4680      	mov	r8, r0
 8012246:	4614      	mov	r4, r2
 8012248:	460e      	mov	r6, r1
 801224a:	b921      	cbnz	r1, 8012256 <_realloc_r+0x16>
 801224c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012250:	4611      	mov	r1, r2
 8012252:	f7ff b977 	b.w	8011544 <_malloc_r>
 8012256:	b92a      	cbnz	r2, 8012264 <_realloc_r+0x24>
 8012258:	f7ff f900 	bl	801145c <_free_r>
 801225c:	4625      	mov	r5, r4
 801225e:	4628      	mov	r0, r5
 8012260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012264:	f000 f841 	bl	80122ea <_malloc_usable_size_r>
 8012268:	4284      	cmp	r4, r0
 801226a:	4607      	mov	r7, r0
 801226c:	d802      	bhi.n	8012274 <_realloc_r+0x34>
 801226e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012272:	d812      	bhi.n	801229a <_realloc_r+0x5a>
 8012274:	4621      	mov	r1, r4
 8012276:	4640      	mov	r0, r8
 8012278:	f7ff f964 	bl	8011544 <_malloc_r>
 801227c:	4605      	mov	r5, r0
 801227e:	2800      	cmp	r0, #0
 8012280:	d0ed      	beq.n	801225e <_realloc_r+0x1e>
 8012282:	42bc      	cmp	r4, r7
 8012284:	4622      	mov	r2, r4
 8012286:	4631      	mov	r1, r6
 8012288:	bf28      	it	cs
 801228a:	463a      	movcs	r2, r7
 801228c:	f7fe fa5d 	bl	801074a <memcpy>
 8012290:	4631      	mov	r1, r6
 8012292:	4640      	mov	r0, r8
 8012294:	f7ff f8e2 	bl	801145c <_free_r>
 8012298:	e7e1      	b.n	801225e <_realloc_r+0x1e>
 801229a:	4635      	mov	r5, r6
 801229c:	e7df      	b.n	801225e <_realloc_r+0x1e>

0801229e <__ascii_wctomb>:
 801229e:	b149      	cbz	r1, 80122b4 <__ascii_wctomb+0x16>
 80122a0:	2aff      	cmp	r2, #255	; 0xff
 80122a2:	bf85      	ittet	hi
 80122a4:	238a      	movhi	r3, #138	; 0x8a
 80122a6:	6003      	strhi	r3, [r0, #0]
 80122a8:	700a      	strbls	r2, [r1, #0]
 80122aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80122ae:	bf98      	it	ls
 80122b0:	2001      	movls	r0, #1
 80122b2:	4770      	bx	lr
 80122b4:	4608      	mov	r0, r1
 80122b6:	4770      	bx	lr

080122b8 <fiprintf>:
 80122b8:	b40e      	push	{r1, r2, r3}
 80122ba:	b503      	push	{r0, r1, lr}
 80122bc:	4601      	mov	r1, r0
 80122be:	ab03      	add	r3, sp, #12
 80122c0:	4805      	ldr	r0, [pc, #20]	; (80122d8 <fiprintf+0x20>)
 80122c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80122c6:	6800      	ldr	r0, [r0, #0]
 80122c8:	9301      	str	r3, [sp, #4]
 80122ca:	f000 f83f 	bl	801234c <_vfiprintf_r>
 80122ce:	b002      	add	sp, #8
 80122d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80122d4:	b003      	add	sp, #12
 80122d6:	4770      	bx	lr
 80122d8:	200000c4 	.word	0x200000c4

080122dc <abort>:
 80122dc:	b508      	push	{r3, lr}
 80122de:	2006      	movs	r0, #6
 80122e0:	f000 fa0c 	bl	80126fc <raise>
 80122e4:	2001      	movs	r0, #1
 80122e6:	f7f5 f971 	bl	80075cc <_exit>

080122ea <_malloc_usable_size_r>:
 80122ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122ee:	1f18      	subs	r0, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	bfbc      	itt	lt
 80122f4:	580b      	ldrlt	r3, [r1, r0]
 80122f6:	18c0      	addlt	r0, r0, r3
 80122f8:	4770      	bx	lr

080122fa <__sfputc_r>:
 80122fa:	6893      	ldr	r3, [r2, #8]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	b410      	push	{r4}
 8012302:	6093      	str	r3, [r2, #8]
 8012304:	da08      	bge.n	8012318 <__sfputc_r+0x1e>
 8012306:	6994      	ldr	r4, [r2, #24]
 8012308:	42a3      	cmp	r3, r4
 801230a:	db01      	blt.n	8012310 <__sfputc_r+0x16>
 801230c:	290a      	cmp	r1, #10
 801230e:	d103      	bne.n	8012318 <__sfputc_r+0x1e>
 8012310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012314:	f000 b934 	b.w	8012580 <__swbuf_r>
 8012318:	6813      	ldr	r3, [r2, #0]
 801231a:	1c58      	adds	r0, r3, #1
 801231c:	6010      	str	r0, [r2, #0]
 801231e:	7019      	strb	r1, [r3, #0]
 8012320:	4608      	mov	r0, r1
 8012322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012326:	4770      	bx	lr

08012328 <__sfputs_r>:
 8012328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232a:	4606      	mov	r6, r0
 801232c:	460f      	mov	r7, r1
 801232e:	4614      	mov	r4, r2
 8012330:	18d5      	adds	r5, r2, r3
 8012332:	42ac      	cmp	r4, r5
 8012334:	d101      	bne.n	801233a <__sfputs_r+0x12>
 8012336:	2000      	movs	r0, #0
 8012338:	e007      	b.n	801234a <__sfputs_r+0x22>
 801233a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801233e:	463a      	mov	r2, r7
 8012340:	4630      	mov	r0, r6
 8012342:	f7ff ffda 	bl	80122fa <__sfputc_r>
 8012346:	1c43      	adds	r3, r0, #1
 8012348:	d1f3      	bne.n	8012332 <__sfputs_r+0xa>
 801234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801234c <_vfiprintf_r>:
 801234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012350:	460d      	mov	r5, r1
 8012352:	b09d      	sub	sp, #116	; 0x74
 8012354:	4614      	mov	r4, r2
 8012356:	4698      	mov	r8, r3
 8012358:	4606      	mov	r6, r0
 801235a:	b118      	cbz	r0, 8012364 <_vfiprintf_r+0x18>
 801235c:	6a03      	ldr	r3, [r0, #32]
 801235e:	b90b      	cbnz	r3, 8012364 <_vfiprintf_r+0x18>
 8012360:	f7fe f8da 	bl	8010518 <__sinit>
 8012364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012366:	07d9      	lsls	r1, r3, #31
 8012368:	d405      	bmi.n	8012376 <_vfiprintf_r+0x2a>
 801236a:	89ab      	ldrh	r3, [r5, #12]
 801236c:	059a      	lsls	r2, r3, #22
 801236e:	d402      	bmi.n	8012376 <_vfiprintf_r+0x2a>
 8012370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012372:	f7fe f9e8 	bl	8010746 <__retarget_lock_acquire_recursive>
 8012376:	89ab      	ldrh	r3, [r5, #12]
 8012378:	071b      	lsls	r3, r3, #28
 801237a:	d501      	bpl.n	8012380 <_vfiprintf_r+0x34>
 801237c:	692b      	ldr	r3, [r5, #16]
 801237e:	b99b      	cbnz	r3, 80123a8 <_vfiprintf_r+0x5c>
 8012380:	4629      	mov	r1, r5
 8012382:	4630      	mov	r0, r6
 8012384:	f000 f93a 	bl	80125fc <__swsetup_r>
 8012388:	b170      	cbz	r0, 80123a8 <_vfiprintf_r+0x5c>
 801238a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801238c:	07dc      	lsls	r4, r3, #31
 801238e:	d504      	bpl.n	801239a <_vfiprintf_r+0x4e>
 8012390:	f04f 30ff 	mov.w	r0, #4294967295
 8012394:	b01d      	add	sp, #116	; 0x74
 8012396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239a:	89ab      	ldrh	r3, [r5, #12]
 801239c:	0598      	lsls	r0, r3, #22
 801239e:	d4f7      	bmi.n	8012390 <_vfiprintf_r+0x44>
 80123a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123a2:	f7fe f9d1 	bl	8010748 <__retarget_lock_release_recursive>
 80123a6:	e7f3      	b.n	8012390 <_vfiprintf_r+0x44>
 80123a8:	2300      	movs	r3, #0
 80123aa:	9309      	str	r3, [sp, #36]	; 0x24
 80123ac:	2320      	movs	r3, #32
 80123ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80123b6:	2330      	movs	r3, #48	; 0x30
 80123b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801256c <_vfiprintf_r+0x220>
 80123bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123c0:	f04f 0901 	mov.w	r9, #1
 80123c4:	4623      	mov	r3, r4
 80123c6:	469a      	mov	sl, r3
 80123c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123cc:	b10a      	cbz	r2, 80123d2 <_vfiprintf_r+0x86>
 80123ce:	2a25      	cmp	r2, #37	; 0x25
 80123d0:	d1f9      	bne.n	80123c6 <_vfiprintf_r+0x7a>
 80123d2:	ebba 0b04 	subs.w	fp, sl, r4
 80123d6:	d00b      	beq.n	80123f0 <_vfiprintf_r+0xa4>
 80123d8:	465b      	mov	r3, fp
 80123da:	4622      	mov	r2, r4
 80123dc:	4629      	mov	r1, r5
 80123de:	4630      	mov	r0, r6
 80123e0:	f7ff ffa2 	bl	8012328 <__sfputs_r>
 80123e4:	3001      	adds	r0, #1
 80123e6:	f000 80a9 	beq.w	801253c <_vfiprintf_r+0x1f0>
 80123ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123ec:	445a      	add	r2, fp
 80123ee:	9209      	str	r2, [sp, #36]	; 0x24
 80123f0:	f89a 3000 	ldrb.w	r3, [sl]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f000 80a1 	beq.w	801253c <_vfiprintf_r+0x1f0>
 80123fa:	2300      	movs	r3, #0
 80123fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012404:	f10a 0a01 	add.w	sl, sl, #1
 8012408:	9304      	str	r3, [sp, #16]
 801240a:	9307      	str	r3, [sp, #28]
 801240c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012410:	931a      	str	r3, [sp, #104]	; 0x68
 8012412:	4654      	mov	r4, sl
 8012414:	2205      	movs	r2, #5
 8012416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801241a:	4854      	ldr	r0, [pc, #336]	; (801256c <_vfiprintf_r+0x220>)
 801241c:	f7ed fef8 	bl	8000210 <memchr>
 8012420:	9a04      	ldr	r2, [sp, #16]
 8012422:	b9d8      	cbnz	r0, 801245c <_vfiprintf_r+0x110>
 8012424:	06d1      	lsls	r1, r2, #27
 8012426:	bf44      	itt	mi
 8012428:	2320      	movmi	r3, #32
 801242a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801242e:	0713      	lsls	r3, r2, #28
 8012430:	bf44      	itt	mi
 8012432:	232b      	movmi	r3, #43	; 0x2b
 8012434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012438:	f89a 3000 	ldrb.w	r3, [sl]
 801243c:	2b2a      	cmp	r3, #42	; 0x2a
 801243e:	d015      	beq.n	801246c <_vfiprintf_r+0x120>
 8012440:	9a07      	ldr	r2, [sp, #28]
 8012442:	4654      	mov	r4, sl
 8012444:	2000      	movs	r0, #0
 8012446:	f04f 0c0a 	mov.w	ip, #10
 801244a:	4621      	mov	r1, r4
 801244c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012450:	3b30      	subs	r3, #48	; 0x30
 8012452:	2b09      	cmp	r3, #9
 8012454:	d94d      	bls.n	80124f2 <_vfiprintf_r+0x1a6>
 8012456:	b1b0      	cbz	r0, 8012486 <_vfiprintf_r+0x13a>
 8012458:	9207      	str	r2, [sp, #28]
 801245a:	e014      	b.n	8012486 <_vfiprintf_r+0x13a>
 801245c:	eba0 0308 	sub.w	r3, r0, r8
 8012460:	fa09 f303 	lsl.w	r3, r9, r3
 8012464:	4313      	orrs	r3, r2
 8012466:	9304      	str	r3, [sp, #16]
 8012468:	46a2      	mov	sl, r4
 801246a:	e7d2      	b.n	8012412 <_vfiprintf_r+0xc6>
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	1d19      	adds	r1, r3, #4
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	9103      	str	r1, [sp, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	bfbb      	ittet	lt
 8012478:	425b      	neglt	r3, r3
 801247a:	f042 0202 	orrlt.w	r2, r2, #2
 801247e:	9307      	strge	r3, [sp, #28]
 8012480:	9307      	strlt	r3, [sp, #28]
 8012482:	bfb8      	it	lt
 8012484:	9204      	strlt	r2, [sp, #16]
 8012486:	7823      	ldrb	r3, [r4, #0]
 8012488:	2b2e      	cmp	r3, #46	; 0x2e
 801248a:	d10c      	bne.n	80124a6 <_vfiprintf_r+0x15a>
 801248c:	7863      	ldrb	r3, [r4, #1]
 801248e:	2b2a      	cmp	r3, #42	; 0x2a
 8012490:	d134      	bne.n	80124fc <_vfiprintf_r+0x1b0>
 8012492:	9b03      	ldr	r3, [sp, #12]
 8012494:	1d1a      	adds	r2, r3, #4
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	9203      	str	r2, [sp, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	bfb8      	it	lt
 801249e:	f04f 33ff 	movlt.w	r3, #4294967295
 80124a2:	3402      	adds	r4, #2
 80124a4:	9305      	str	r3, [sp, #20]
 80124a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801257c <_vfiprintf_r+0x230>
 80124aa:	7821      	ldrb	r1, [r4, #0]
 80124ac:	2203      	movs	r2, #3
 80124ae:	4650      	mov	r0, sl
 80124b0:	f7ed feae 	bl	8000210 <memchr>
 80124b4:	b138      	cbz	r0, 80124c6 <_vfiprintf_r+0x17a>
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	eba0 000a 	sub.w	r0, r0, sl
 80124bc:	2240      	movs	r2, #64	; 0x40
 80124be:	4082      	lsls	r2, r0
 80124c0:	4313      	orrs	r3, r2
 80124c2:	3401      	adds	r4, #1
 80124c4:	9304      	str	r3, [sp, #16]
 80124c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ca:	4829      	ldr	r0, [pc, #164]	; (8012570 <_vfiprintf_r+0x224>)
 80124cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124d0:	2206      	movs	r2, #6
 80124d2:	f7ed fe9d 	bl	8000210 <memchr>
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d03f      	beq.n	801255a <_vfiprintf_r+0x20e>
 80124da:	4b26      	ldr	r3, [pc, #152]	; (8012574 <_vfiprintf_r+0x228>)
 80124dc:	bb1b      	cbnz	r3, 8012526 <_vfiprintf_r+0x1da>
 80124de:	9b03      	ldr	r3, [sp, #12]
 80124e0:	3307      	adds	r3, #7
 80124e2:	f023 0307 	bic.w	r3, r3, #7
 80124e6:	3308      	adds	r3, #8
 80124e8:	9303      	str	r3, [sp, #12]
 80124ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ec:	443b      	add	r3, r7
 80124ee:	9309      	str	r3, [sp, #36]	; 0x24
 80124f0:	e768      	b.n	80123c4 <_vfiprintf_r+0x78>
 80124f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80124f6:	460c      	mov	r4, r1
 80124f8:	2001      	movs	r0, #1
 80124fa:	e7a6      	b.n	801244a <_vfiprintf_r+0xfe>
 80124fc:	2300      	movs	r3, #0
 80124fe:	3401      	adds	r4, #1
 8012500:	9305      	str	r3, [sp, #20]
 8012502:	4619      	mov	r1, r3
 8012504:	f04f 0c0a 	mov.w	ip, #10
 8012508:	4620      	mov	r0, r4
 801250a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801250e:	3a30      	subs	r2, #48	; 0x30
 8012510:	2a09      	cmp	r2, #9
 8012512:	d903      	bls.n	801251c <_vfiprintf_r+0x1d0>
 8012514:	2b00      	cmp	r3, #0
 8012516:	d0c6      	beq.n	80124a6 <_vfiprintf_r+0x15a>
 8012518:	9105      	str	r1, [sp, #20]
 801251a:	e7c4      	b.n	80124a6 <_vfiprintf_r+0x15a>
 801251c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012520:	4604      	mov	r4, r0
 8012522:	2301      	movs	r3, #1
 8012524:	e7f0      	b.n	8012508 <_vfiprintf_r+0x1bc>
 8012526:	ab03      	add	r3, sp, #12
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	462a      	mov	r2, r5
 801252c:	4b12      	ldr	r3, [pc, #72]	; (8012578 <_vfiprintf_r+0x22c>)
 801252e:	a904      	add	r1, sp, #16
 8012530:	4630      	mov	r0, r6
 8012532:	f7fd fb9f 	bl	800fc74 <_printf_float>
 8012536:	4607      	mov	r7, r0
 8012538:	1c78      	adds	r0, r7, #1
 801253a:	d1d6      	bne.n	80124ea <_vfiprintf_r+0x19e>
 801253c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801253e:	07d9      	lsls	r1, r3, #31
 8012540:	d405      	bmi.n	801254e <_vfiprintf_r+0x202>
 8012542:	89ab      	ldrh	r3, [r5, #12]
 8012544:	059a      	lsls	r2, r3, #22
 8012546:	d402      	bmi.n	801254e <_vfiprintf_r+0x202>
 8012548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801254a:	f7fe f8fd 	bl	8010748 <__retarget_lock_release_recursive>
 801254e:	89ab      	ldrh	r3, [r5, #12]
 8012550:	065b      	lsls	r3, r3, #25
 8012552:	f53f af1d 	bmi.w	8012390 <_vfiprintf_r+0x44>
 8012556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012558:	e71c      	b.n	8012394 <_vfiprintf_r+0x48>
 801255a:	ab03      	add	r3, sp, #12
 801255c:	9300      	str	r3, [sp, #0]
 801255e:	462a      	mov	r2, r5
 8012560:	4b05      	ldr	r3, [pc, #20]	; (8012578 <_vfiprintf_r+0x22c>)
 8012562:	a904      	add	r1, sp, #16
 8012564:	4630      	mov	r0, r6
 8012566:	f7fd fe29 	bl	80101bc <_printf_i>
 801256a:	e7e4      	b.n	8012536 <_vfiprintf_r+0x1ea>
 801256c:	080147c4 	.word	0x080147c4
 8012570:	080147ce 	.word	0x080147ce
 8012574:	0800fc75 	.word	0x0800fc75
 8012578:	08012329 	.word	0x08012329
 801257c:	080147ca 	.word	0x080147ca

08012580 <__swbuf_r>:
 8012580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012582:	460e      	mov	r6, r1
 8012584:	4614      	mov	r4, r2
 8012586:	4605      	mov	r5, r0
 8012588:	b118      	cbz	r0, 8012592 <__swbuf_r+0x12>
 801258a:	6a03      	ldr	r3, [r0, #32]
 801258c:	b90b      	cbnz	r3, 8012592 <__swbuf_r+0x12>
 801258e:	f7fd ffc3 	bl	8010518 <__sinit>
 8012592:	69a3      	ldr	r3, [r4, #24]
 8012594:	60a3      	str	r3, [r4, #8]
 8012596:	89a3      	ldrh	r3, [r4, #12]
 8012598:	071a      	lsls	r2, r3, #28
 801259a:	d525      	bpl.n	80125e8 <__swbuf_r+0x68>
 801259c:	6923      	ldr	r3, [r4, #16]
 801259e:	b31b      	cbz	r3, 80125e8 <__swbuf_r+0x68>
 80125a0:	6823      	ldr	r3, [r4, #0]
 80125a2:	6922      	ldr	r2, [r4, #16]
 80125a4:	1a98      	subs	r0, r3, r2
 80125a6:	6963      	ldr	r3, [r4, #20]
 80125a8:	b2f6      	uxtb	r6, r6
 80125aa:	4283      	cmp	r3, r0
 80125ac:	4637      	mov	r7, r6
 80125ae:	dc04      	bgt.n	80125ba <__swbuf_r+0x3a>
 80125b0:	4621      	mov	r1, r4
 80125b2:	4628      	mov	r0, r5
 80125b4:	f7ff fdac 	bl	8012110 <_fflush_r>
 80125b8:	b9e0      	cbnz	r0, 80125f4 <__swbuf_r+0x74>
 80125ba:	68a3      	ldr	r3, [r4, #8]
 80125bc:	3b01      	subs	r3, #1
 80125be:	60a3      	str	r3, [r4, #8]
 80125c0:	6823      	ldr	r3, [r4, #0]
 80125c2:	1c5a      	adds	r2, r3, #1
 80125c4:	6022      	str	r2, [r4, #0]
 80125c6:	701e      	strb	r6, [r3, #0]
 80125c8:	6962      	ldr	r2, [r4, #20]
 80125ca:	1c43      	adds	r3, r0, #1
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d004      	beq.n	80125da <__swbuf_r+0x5a>
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	07db      	lsls	r3, r3, #31
 80125d4:	d506      	bpl.n	80125e4 <__swbuf_r+0x64>
 80125d6:	2e0a      	cmp	r6, #10
 80125d8:	d104      	bne.n	80125e4 <__swbuf_r+0x64>
 80125da:	4621      	mov	r1, r4
 80125dc:	4628      	mov	r0, r5
 80125de:	f7ff fd97 	bl	8012110 <_fflush_r>
 80125e2:	b938      	cbnz	r0, 80125f4 <__swbuf_r+0x74>
 80125e4:	4638      	mov	r0, r7
 80125e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125e8:	4621      	mov	r1, r4
 80125ea:	4628      	mov	r0, r5
 80125ec:	f000 f806 	bl	80125fc <__swsetup_r>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d0d5      	beq.n	80125a0 <__swbuf_r+0x20>
 80125f4:	f04f 37ff 	mov.w	r7, #4294967295
 80125f8:	e7f4      	b.n	80125e4 <__swbuf_r+0x64>
	...

080125fc <__swsetup_r>:
 80125fc:	b538      	push	{r3, r4, r5, lr}
 80125fe:	4b2a      	ldr	r3, [pc, #168]	; (80126a8 <__swsetup_r+0xac>)
 8012600:	4605      	mov	r5, r0
 8012602:	6818      	ldr	r0, [r3, #0]
 8012604:	460c      	mov	r4, r1
 8012606:	b118      	cbz	r0, 8012610 <__swsetup_r+0x14>
 8012608:	6a03      	ldr	r3, [r0, #32]
 801260a:	b90b      	cbnz	r3, 8012610 <__swsetup_r+0x14>
 801260c:	f7fd ff84 	bl	8010518 <__sinit>
 8012610:	89a3      	ldrh	r3, [r4, #12]
 8012612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012616:	0718      	lsls	r0, r3, #28
 8012618:	d422      	bmi.n	8012660 <__swsetup_r+0x64>
 801261a:	06d9      	lsls	r1, r3, #27
 801261c:	d407      	bmi.n	801262e <__swsetup_r+0x32>
 801261e:	2309      	movs	r3, #9
 8012620:	602b      	str	r3, [r5, #0]
 8012622:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012626:	81a3      	strh	r3, [r4, #12]
 8012628:	f04f 30ff 	mov.w	r0, #4294967295
 801262c:	e034      	b.n	8012698 <__swsetup_r+0x9c>
 801262e:	0758      	lsls	r0, r3, #29
 8012630:	d512      	bpl.n	8012658 <__swsetup_r+0x5c>
 8012632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012634:	b141      	cbz	r1, 8012648 <__swsetup_r+0x4c>
 8012636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801263a:	4299      	cmp	r1, r3
 801263c:	d002      	beq.n	8012644 <__swsetup_r+0x48>
 801263e:	4628      	mov	r0, r5
 8012640:	f7fe ff0c 	bl	801145c <_free_r>
 8012644:	2300      	movs	r3, #0
 8012646:	6363      	str	r3, [r4, #52]	; 0x34
 8012648:	89a3      	ldrh	r3, [r4, #12]
 801264a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801264e:	81a3      	strh	r3, [r4, #12]
 8012650:	2300      	movs	r3, #0
 8012652:	6063      	str	r3, [r4, #4]
 8012654:	6923      	ldr	r3, [r4, #16]
 8012656:	6023      	str	r3, [r4, #0]
 8012658:	89a3      	ldrh	r3, [r4, #12]
 801265a:	f043 0308 	orr.w	r3, r3, #8
 801265e:	81a3      	strh	r3, [r4, #12]
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	b94b      	cbnz	r3, 8012678 <__swsetup_r+0x7c>
 8012664:	89a3      	ldrh	r3, [r4, #12]
 8012666:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801266a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801266e:	d003      	beq.n	8012678 <__swsetup_r+0x7c>
 8012670:	4621      	mov	r1, r4
 8012672:	4628      	mov	r0, r5
 8012674:	f000 f884 	bl	8012780 <__smakebuf_r>
 8012678:	89a0      	ldrh	r0, [r4, #12]
 801267a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801267e:	f010 0301 	ands.w	r3, r0, #1
 8012682:	d00a      	beq.n	801269a <__swsetup_r+0x9e>
 8012684:	2300      	movs	r3, #0
 8012686:	60a3      	str	r3, [r4, #8]
 8012688:	6963      	ldr	r3, [r4, #20]
 801268a:	425b      	negs	r3, r3
 801268c:	61a3      	str	r3, [r4, #24]
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	b943      	cbnz	r3, 80126a4 <__swsetup_r+0xa8>
 8012692:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012696:	d1c4      	bne.n	8012622 <__swsetup_r+0x26>
 8012698:	bd38      	pop	{r3, r4, r5, pc}
 801269a:	0781      	lsls	r1, r0, #30
 801269c:	bf58      	it	pl
 801269e:	6963      	ldrpl	r3, [r4, #20]
 80126a0:	60a3      	str	r3, [r4, #8]
 80126a2:	e7f4      	b.n	801268e <__swsetup_r+0x92>
 80126a4:	2000      	movs	r0, #0
 80126a6:	e7f7      	b.n	8012698 <__swsetup_r+0x9c>
 80126a8:	200000c4 	.word	0x200000c4

080126ac <_raise_r>:
 80126ac:	291f      	cmp	r1, #31
 80126ae:	b538      	push	{r3, r4, r5, lr}
 80126b0:	4604      	mov	r4, r0
 80126b2:	460d      	mov	r5, r1
 80126b4:	d904      	bls.n	80126c0 <_raise_r+0x14>
 80126b6:	2316      	movs	r3, #22
 80126b8:	6003      	str	r3, [r0, #0]
 80126ba:	f04f 30ff 	mov.w	r0, #4294967295
 80126be:	bd38      	pop	{r3, r4, r5, pc}
 80126c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80126c2:	b112      	cbz	r2, 80126ca <_raise_r+0x1e>
 80126c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126c8:	b94b      	cbnz	r3, 80126de <_raise_r+0x32>
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 f830 	bl	8012730 <_getpid_r>
 80126d0:	462a      	mov	r2, r5
 80126d2:	4601      	mov	r1, r0
 80126d4:	4620      	mov	r0, r4
 80126d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126da:	f000 b817 	b.w	801270c <_kill_r>
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d00a      	beq.n	80126f8 <_raise_r+0x4c>
 80126e2:	1c59      	adds	r1, r3, #1
 80126e4:	d103      	bne.n	80126ee <_raise_r+0x42>
 80126e6:	2316      	movs	r3, #22
 80126e8:	6003      	str	r3, [r0, #0]
 80126ea:	2001      	movs	r0, #1
 80126ec:	e7e7      	b.n	80126be <_raise_r+0x12>
 80126ee:	2400      	movs	r4, #0
 80126f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126f4:	4628      	mov	r0, r5
 80126f6:	4798      	blx	r3
 80126f8:	2000      	movs	r0, #0
 80126fa:	e7e0      	b.n	80126be <_raise_r+0x12>

080126fc <raise>:
 80126fc:	4b02      	ldr	r3, [pc, #8]	; (8012708 <raise+0xc>)
 80126fe:	4601      	mov	r1, r0
 8012700:	6818      	ldr	r0, [r3, #0]
 8012702:	f7ff bfd3 	b.w	80126ac <_raise_r>
 8012706:	bf00      	nop
 8012708:	200000c4 	.word	0x200000c4

0801270c <_kill_r>:
 801270c:	b538      	push	{r3, r4, r5, lr}
 801270e:	4d07      	ldr	r5, [pc, #28]	; (801272c <_kill_r+0x20>)
 8012710:	2300      	movs	r3, #0
 8012712:	4604      	mov	r4, r0
 8012714:	4608      	mov	r0, r1
 8012716:	4611      	mov	r1, r2
 8012718:	602b      	str	r3, [r5, #0]
 801271a:	f7f4 ff47 	bl	80075ac <_kill>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	d102      	bne.n	8012728 <_kill_r+0x1c>
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	b103      	cbz	r3, 8012728 <_kill_r+0x1c>
 8012726:	6023      	str	r3, [r4, #0]
 8012728:	bd38      	pop	{r3, r4, r5, pc}
 801272a:	bf00      	nop
 801272c:	2001d640 	.word	0x2001d640

08012730 <_getpid_r>:
 8012730:	f7f4 bf34 	b.w	800759c <_getpid>

08012734 <__swhatbuf_r>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	460c      	mov	r4, r1
 8012738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801273c:	2900      	cmp	r1, #0
 801273e:	b096      	sub	sp, #88	; 0x58
 8012740:	4615      	mov	r5, r2
 8012742:	461e      	mov	r6, r3
 8012744:	da0d      	bge.n	8012762 <__swhatbuf_r+0x2e>
 8012746:	89a3      	ldrh	r3, [r4, #12]
 8012748:	f013 0f80 	tst.w	r3, #128	; 0x80
 801274c:	f04f 0100 	mov.w	r1, #0
 8012750:	bf0c      	ite	eq
 8012752:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012756:	2340      	movne	r3, #64	; 0x40
 8012758:	2000      	movs	r0, #0
 801275a:	6031      	str	r1, [r6, #0]
 801275c:	602b      	str	r3, [r5, #0]
 801275e:	b016      	add	sp, #88	; 0x58
 8012760:	bd70      	pop	{r4, r5, r6, pc}
 8012762:	466a      	mov	r2, sp
 8012764:	f000 f848 	bl	80127f8 <_fstat_r>
 8012768:	2800      	cmp	r0, #0
 801276a:	dbec      	blt.n	8012746 <__swhatbuf_r+0x12>
 801276c:	9901      	ldr	r1, [sp, #4]
 801276e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012772:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012776:	4259      	negs	r1, r3
 8012778:	4159      	adcs	r1, r3
 801277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801277e:	e7eb      	b.n	8012758 <__swhatbuf_r+0x24>

08012780 <__smakebuf_r>:
 8012780:	898b      	ldrh	r3, [r1, #12]
 8012782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012784:	079d      	lsls	r5, r3, #30
 8012786:	4606      	mov	r6, r0
 8012788:	460c      	mov	r4, r1
 801278a:	d507      	bpl.n	801279c <__smakebuf_r+0x1c>
 801278c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012790:	6023      	str	r3, [r4, #0]
 8012792:	6123      	str	r3, [r4, #16]
 8012794:	2301      	movs	r3, #1
 8012796:	6163      	str	r3, [r4, #20]
 8012798:	b002      	add	sp, #8
 801279a:	bd70      	pop	{r4, r5, r6, pc}
 801279c:	ab01      	add	r3, sp, #4
 801279e:	466a      	mov	r2, sp
 80127a0:	f7ff ffc8 	bl	8012734 <__swhatbuf_r>
 80127a4:	9900      	ldr	r1, [sp, #0]
 80127a6:	4605      	mov	r5, r0
 80127a8:	4630      	mov	r0, r6
 80127aa:	f7fe fecb 	bl	8011544 <_malloc_r>
 80127ae:	b948      	cbnz	r0, 80127c4 <__smakebuf_r+0x44>
 80127b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127b4:	059a      	lsls	r2, r3, #22
 80127b6:	d4ef      	bmi.n	8012798 <__smakebuf_r+0x18>
 80127b8:	f023 0303 	bic.w	r3, r3, #3
 80127bc:	f043 0302 	orr.w	r3, r3, #2
 80127c0:	81a3      	strh	r3, [r4, #12]
 80127c2:	e7e3      	b.n	801278c <__smakebuf_r+0xc>
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	6020      	str	r0, [r4, #0]
 80127c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	9b00      	ldr	r3, [sp, #0]
 80127d0:	6163      	str	r3, [r4, #20]
 80127d2:	9b01      	ldr	r3, [sp, #4]
 80127d4:	6120      	str	r0, [r4, #16]
 80127d6:	b15b      	cbz	r3, 80127f0 <__smakebuf_r+0x70>
 80127d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127dc:	4630      	mov	r0, r6
 80127de:	f000 f81d 	bl	801281c <_isatty_r>
 80127e2:	b128      	cbz	r0, 80127f0 <__smakebuf_r+0x70>
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	f023 0303 	bic.w	r3, r3, #3
 80127ea:	f043 0301 	orr.w	r3, r3, #1
 80127ee:	81a3      	strh	r3, [r4, #12]
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	431d      	orrs	r5, r3
 80127f4:	81a5      	strh	r5, [r4, #12]
 80127f6:	e7cf      	b.n	8012798 <__smakebuf_r+0x18>

080127f8 <_fstat_r>:
 80127f8:	b538      	push	{r3, r4, r5, lr}
 80127fa:	4d07      	ldr	r5, [pc, #28]	; (8012818 <_fstat_r+0x20>)
 80127fc:	2300      	movs	r3, #0
 80127fe:	4604      	mov	r4, r0
 8012800:	4608      	mov	r0, r1
 8012802:	4611      	mov	r1, r2
 8012804:	602b      	str	r3, [r5, #0]
 8012806:	f7f4 ff30 	bl	800766a <_fstat>
 801280a:	1c43      	adds	r3, r0, #1
 801280c:	d102      	bne.n	8012814 <_fstat_r+0x1c>
 801280e:	682b      	ldr	r3, [r5, #0]
 8012810:	b103      	cbz	r3, 8012814 <_fstat_r+0x1c>
 8012812:	6023      	str	r3, [r4, #0]
 8012814:	bd38      	pop	{r3, r4, r5, pc}
 8012816:	bf00      	nop
 8012818:	2001d640 	.word	0x2001d640

0801281c <_isatty_r>:
 801281c:	b538      	push	{r3, r4, r5, lr}
 801281e:	4d06      	ldr	r5, [pc, #24]	; (8012838 <_isatty_r+0x1c>)
 8012820:	2300      	movs	r3, #0
 8012822:	4604      	mov	r4, r0
 8012824:	4608      	mov	r0, r1
 8012826:	602b      	str	r3, [r5, #0]
 8012828:	f7f4 ff2f 	bl	800768a <_isatty>
 801282c:	1c43      	adds	r3, r0, #1
 801282e:	d102      	bne.n	8012836 <_isatty_r+0x1a>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	b103      	cbz	r3, 8012836 <_isatty_r+0x1a>
 8012834:	6023      	str	r3, [r4, #0]
 8012836:	bd38      	pop	{r3, r4, r5, pc}
 8012838:	2001d640 	.word	0x2001d640

0801283c <atan2>:
 801283c:	f000 bb3c 	b.w	8012eb8 <__ieee754_atan2>

08012840 <sqrt>:
 8012840:	b538      	push	{r3, r4, r5, lr}
 8012842:	ed2d 8b02 	vpush	{d8}
 8012846:	ec55 4b10 	vmov	r4, r5, d0
 801284a:	f000 f8d1 	bl	80129f0 <__ieee754_sqrt>
 801284e:	4622      	mov	r2, r4
 8012850:	462b      	mov	r3, r5
 8012852:	4620      	mov	r0, r4
 8012854:	4629      	mov	r1, r5
 8012856:	eeb0 8a40 	vmov.f32	s16, s0
 801285a:	eef0 8a60 	vmov.f32	s17, s1
 801285e:	f7ee f985 	bl	8000b6c <__aeabi_dcmpun>
 8012862:	b990      	cbnz	r0, 801288a <sqrt+0x4a>
 8012864:	2200      	movs	r2, #0
 8012866:	2300      	movs	r3, #0
 8012868:	4620      	mov	r0, r4
 801286a:	4629      	mov	r1, r5
 801286c:	f7ee f956 	bl	8000b1c <__aeabi_dcmplt>
 8012870:	b158      	cbz	r0, 801288a <sqrt+0x4a>
 8012872:	f7fd ff3d 	bl	80106f0 <__errno>
 8012876:	2321      	movs	r3, #33	; 0x21
 8012878:	6003      	str	r3, [r0, #0]
 801287a:	2200      	movs	r2, #0
 801287c:	2300      	movs	r3, #0
 801287e:	4610      	mov	r0, r2
 8012880:	4619      	mov	r1, r3
 8012882:	f7ee f803 	bl	800088c <__aeabi_ddiv>
 8012886:	ec41 0b18 	vmov	d8, r0, r1
 801288a:	eeb0 0a48 	vmov.f32	s0, s16
 801288e:	eef0 0a68 	vmov.f32	s1, s17
 8012892:	ecbd 8b02 	vpop	{d8}
 8012896:	bd38      	pop	{r3, r4, r5, pc}

08012898 <cos>:
 8012898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801289a:	ec53 2b10 	vmov	r2, r3, d0
 801289e:	4826      	ldr	r0, [pc, #152]	; (8012938 <cos+0xa0>)
 80128a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80128a4:	4281      	cmp	r1, r0
 80128a6:	dc06      	bgt.n	80128b6 <cos+0x1e>
 80128a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012930 <cos+0x98>
 80128ac:	b005      	add	sp, #20
 80128ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80128b2:	f000 b979 	b.w	8012ba8 <__kernel_cos>
 80128b6:	4821      	ldr	r0, [pc, #132]	; (801293c <cos+0xa4>)
 80128b8:	4281      	cmp	r1, r0
 80128ba:	dd09      	ble.n	80128d0 <cos+0x38>
 80128bc:	ee10 0a10 	vmov	r0, s0
 80128c0:	4619      	mov	r1, r3
 80128c2:	f7ed fd01 	bl	80002c8 <__aeabi_dsub>
 80128c6:	ec41 0b10 	vmov	d0, r0, r1
 80128ca:	b005      	add	sp, #20
 80128cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80128d0:	4668      	mov	r0, sp
 80128d2:	f000 fbb9 	bl	8013048 <__ieee754_rem_pio2>
 80128d6:	f000 0003 	and.w	r0, r0, #3
 80128da:	2801      	cmp	r0, #1
 80128dc:	d00b      	beq.n	80128f6 <cos+0x5e>
 80128de:	2802      	cmp	r0, #2
 80128e0:	d016      	beq.n	8012910 <cos+0x78>
 80128e2:	b9e0      	cbnz	r0, 801291e <cos+0x86>
 80128e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128e8:	ed9d 0b00 	vldr	d0, [sp]
 80128ec:	f000 f95c 	bl	8012ba8 <__kernel_cos>
 80128f0:	ec51 0b10 	vmov	r0, r1, d0
 80128f4:	e7e7      	b.n	80128c6 <cos+0x2e>
 80128f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80128fa:	ed9d 0b00 	vldr	d0, [sp]
 80128fe:	f000 fa1b 	bl	8012d38 <__kernel_sin>
 8012902:	ec53 2b10 	vmov	r2, r3, d0
 8012906:	ee10 0a10 	vmov	r0, s0
 801290a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801290e:	e7da      	b.n	80128c6 <cos+0x2e>
 8012910:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012914:	ed9d 0b00 	vldr	d0, [sp]
 8012918:	f000 f946 	bl	8012ba8 <__kernel_cos>
 801291c:	e7f1      	b.n	8012902 <cos+0x6a>
 801291e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012922:	ed9d 0b00 	vldr	d0, [sp]
 8012926:	2001      	movs	r0, #1
 8012928:	f000 fa06 	bl	8012d38 <__kernel_sin>
 801292c:	e7e0      	b.n	80128f0 <cos+0x58>
 801292e:	bf00      	nop
	...
 8012938:	3fe921fb 	.word	0x3fe921fb
 801293c:	7fefffff 	.word	0x7fefffff

08012940 <sin>:
 8012940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012942:	ec53 2b10 	vmov	r2, r3, d0
 8012946:	4828      	ldr	r0, [pc, #160]	; (80129e8 <sin+0xa8>)
 8012948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801294c:	4281      	cmp	r1, r0
 801294e:	dc07      	bgt.n	8012960 <sin+0x20>
 8012950:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80129e0 <sin+0xa0>
 8012954:	2000      	movs	r0, #0
 8012956:	b005      	add	sp, #20
 8012958:	f85d eb04 	ldr.w	lr, [sp], #4
 801295c:	f000 b9ec 	b.w	8012d38 <__kernel_sin>
 8012960:	4822      	ldr	r0, [pc, #136]	; (80129ec <sin+0xac>)
 8012962:	4281      	cmp	r1, r0
 8012964:	dd09      	ble.n	801297a <sin+0x3a>
 8012966:	ee10 0a10 	vmov	r0, s0
 801296a:	4619      	mov	r1, r3
 801296c:	f7ed fcac 	bl	80002c8 <__aeabi_dsub>
 8012970:	ec41 0b10 	vmov	d0, r0, r1
 8012974:	b005      	add	sp, #20
 8012976:	f85d fb04 	ldr.w	pc, [sp], #4
 801297a:	4668      	mov	r0, sp
 801297c:	f000 fb64 	bl	8013048 <__ieee754_rem_pio2>
 8012980:	f000 0003 	and.w	r0, r0, #3
 8012984:	2801      	cmp	r0, #1
 8012986:	d00c      	beq.n	80129a2 <sin+0x62>
 8012988:	2802      	cmp	r0, #2
 801298a:	d011      	beq.n	80129b0 <sin+0x70>
 801298c:	b9f0      	cbnz	r0, 80129cc <sin+0x8c>
 801298e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012992:	ed9d 0b00 	vldr	d0, [sp]
 8012996:	2001      	movs	r0, #1
 8012998:	f000 f9ce 	bl	8012d38 <__kernel_sin>
 801299c:	ec51 0b10 	vmov	r0, r1, d0
 80129a0:	e7e6      	b.n	8012970 <sin+0x30>
 80129a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80129a6:	ed9d 0b00 	vldr	d0, [sp]
 80129aa:	f000 f8fd 	bl	8012ba8 <__kernel_cos>
 80129ae:	e7f5      	b.n	801299c <sin+0x5c>
 80129b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80129b4:	ed9d 0b00 	vldr	d0, [sp]
 80129b8:	2001      	movs	r0, #1
 80129ba:	f000 f9bd 	bl	8012d38 <__kernel_sin>
 80129be:	ec53 2b10 	vmov	r2, r3, d0
 80129c2:	ee10 0a10 	vmov	r0, s0
 80129c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129ca:	e7d1      	b.n	8012970 <sin+0x30>
 80129cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80129d0:	ed9d 0b00 	vldr	d0, [sp]
 80129d4:	f000 f8e8 	bl	8012ba8 <__kernel_cos>
 80129d8:	e7f1      	b.n	80129be <sin+0x7e>
 80129da:	bf00      	nop
 80129dc:	f3af 8000 	nop.w
	...
 80129e8:	3fe921fb 	.word	0x3fe921fb
 80129ec:	7fefffff 	.word	0x7fefffff

080129f0 <__ieee754_sqrt>:
 80129f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	ec55 4b10 	vmov	r4, r5, d0
 80129f8:	4e67      	ldr	r6, [pc, #412]	; (8012b98 <__ieee754_sqrt+0x1a8>)
 80129fa:	43ae      	bics	r6, r5
 80129fc:	ee10 0a10 	vmov	r0, s0
 8012a00:	ee10 2a10 	vmov	r2, s0
 8012a04:	4629      	mov	r1, r5
 8012a06:	462b      	mov	r3, r5
 8012a08:	d10d      	bne.n	8012a26 <__ieee754_sqrt+0x36>
 8012a0a:	f7ed fe15 	bl	8000638 <__aeabi_dmul>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	460b      	mov	r3, r1
 8012a12:	4620      	mov	r0, r4
 8012a14:	4629      	mov	r1, r5
 8012a16:	f7ed fc59 	bl	80002cc <__adddf3>
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	ec45 4b10 	vmov	d0, r4, r5
 8012a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a26:	2d00      	cmp	r5, #0
 8012a28:	dc0b      	bgt.n	8012a42 <__ieee754_sqrt+0x52>
 8012a2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012a2e:	4326      	orrs	r6, r4
 8012a30:	d0f5      	beq.n	8012a1e <__ieee754_sqrt+0x2e>
 8012a32:	b135      	cbz	r5, 8012a42 <__ieee754_sqrt+0x52>
 8012a34:	f7ed fc48 	bl	80002c8 <__aeabi_dsub>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	f7ed ff26 	bl	800088c <__aeabi_ddiv>
 8012a40:	e7eb      	b.n	8012a1a <__ieee754_sqrt+0x2a>
 8012a42:	1509      	asrs	r1, r1, #20
 8012a44:	f000 808d 	beq.w	8012b62 <__ieee754_sqrt+0x172>
 8012a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a4c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a54:	07c9      	lsls	r1, r1, #31
 8012a56:	bf5c      	itt	pl
 8012a58:	005b      	lslpl	r3, r3, #1
 8012a5a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a62:	bf58      	it	pl
 8012a64:	0052      	lslpl	r2, r2, #1
 8012a66:	2500      	movs	r5, #0
 8012a68:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012a6c:	1076      	asrs	r6, r6, #1
 8012a6e:	0052      	lsls	r2, r2, #1
 8012a70:	f04f 0e16 	mov.w	lr, #22
 8012a74:	46ac      	mov	ip, r5
 8012a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012a7a:	eb0c 0001 	add.w	r0, ip, r1
 8012a7e:	4298      	cmp	r0, r3
 8012a80:	bfde      	ittt	le
 8012a82:	1a1b      	suble	r3, r3, r0
 8012a84:	eb00 0c01 	addle.w	ip, r0, r1
 8012a88:	186d      	addle	r5, r5, r1
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	f1be 0e01 	subs.w	lr, lr, #1
 8012a90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012a94:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012a98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012a9c:	d1ed      	bne.n	8012a7a <__ieee754_sqrt+0x8a>
 8012a9e:	4674      	mov	r4, lr
 8012aa0:	2720      	movs	r7, #32
 8012aa2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012aa6:	4563      	cmp	r3, ip
 8012aa8:	eb01 000e 	add.w	r0, r1, lr
 8012aac:	dc02      	bgt.n	8012ab4 <__ieee754_sqrt+0xc4>
 8012aae:	d113      	bne.n	8012ad8 <__ieee754_sqrt+0xe8>
 8012ab0:	4290      	cmp	r0, r2
 8012ab2:	d811      	bhi.n	8012ad8 <__ieee754_sqrt+0xe8>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	eb00 0e01 	add.w	lr, r0, r1
 8012aba:	da57      	bge.n	8012b6c <__ieee754_sqrt+0x17c>
 8012abc:	f1be 0f00 	cmp.w	lr, #0
 8012ac0:	db54      	blt.n	8012b6c <__ieee754_sqrt+0x17c>
 8012ac2:	f10c 0801 	add.w	r8, ip, #1
 8012ac6:	eba3 030c 	sub.w	r3, r3, ip
 8012aca:	4290      	cmp	r0, r2
 8012acc:	bf88      	it	hi
 8012ace:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012ad2:	1a12      	subs	r2, r2, r0
 8012ad4:	440c      	add	r4, r1
 8012ad6:	46c4      	mov	ip, r8
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	3f01      	subs	r7, #1
 8012adc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012ae0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012ae4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012ae8:	d1dd      	bne.n	8012aa6 <__ieee754_sqrt+0xb6>
 8012aea:	4313      	orrs	r3, r2
 8012aec:	d01b      	beq.n	8012b26 <__ieee754_sqrt+0x136>
 8012aee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012b9c <__ieee754_sqrt+0x1ac>
 8012af2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012ba0 <__ieee754_sqrt+0x1b0>
 8012af6:	e9da 0100 	ldrd	r0, r1, [sl]
 8012afa:	e9db 2300 	ldrd	r2, r3, [fp]
 8012afe:	f7ed fbe3 	bl	80002c8 <__aeabi_dsub>
 8012b02:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b06:	4602      	mov	r2, r0
 8012b08:	460b      	mov	r3, r1
 8012b0a:	4640      	mov	r0, r8
 8012b0c:	4649      	mov	r1, r9
 8012b0e:	f7ee f80f 	bl	8000b30 <__aeabi_dcmple>
 8012b12:	b140      	cbz	r0, 8012b26 <__ieee754_sqrt+0x136>
 8012b14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012b18:	e9da 0100 	ldrd	r0, r1, [sl]
 8012b1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012b20:	d126      	bne.n	8012b70 <__ieee754_sqrt+0x180>
 8012b22:	3501      	adds	r5, #1
 8012b24:	463c      	mov	r4, r7
 8012b26:	106a      	asrs	r2, r5, #1
 8012b28:	0863      	lsrs	r3, r4, #1
 8012b2a:	07e9      	lsls	r1, r5, #31
 8012b2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012b30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012b34:	bf48      	it	mi
 8012b36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012b3a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012b3e:	461c      	mov	r4, r3
 8012b40:	e76d      	b.n	8012a1e <__ieee754_sqrt+0x2e>
 8012b42:	0ad3      	lsrs	r3, r2, #11
 8012b44:	3815      	subs	r0, #21
 8012b46:	0552      	lsls	r2, r2, #21
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d0fa      	beq.n	8012b42 <__ieee754_sqrt+0x152>
 8012b4c:	02dc      	lsls	r4, r3, #11
 8012b4e:	d50a      	bpl.n	8012b66 <__ieee754_sqrt+0x176>
 8012b50:	f1c1 0420 	rsb	r4, r1, #32
 8012b54:	fa22 f404 	lsr.w	r4, r2, r4
 8012b58:	1e4d      	subs	r5, r1, #1
 8012b5a:	408a      	lsls	r2, r1
 8012b5c:	4323      	orrs	r3, r4
 8012b5e:	1b41      	subs	r1, r0, r5
 8012b60:	e772      	b.n	8012a48 <__ieee754_sqrt+0x58>
 8012b62:	4608      	mov	r0, r1
 8012b64:	e7f0      	b.n	8012b48 <__ieee754_sqrt+0x158>
 8012b66:	005b      	lsls	r3, r3, #1
 8012b68:	3101      	adds	r1, #1
 8012b6a:	e7ef      	b.n	8012b4c <__ieee754_sqrt+0x15c>
 8012b6c:	46e0      	mov	r8, ip
 8012b6e:	e7aa      	b.n	8012ac6 <__ieee754_sqrt+0xd6>
 8012b70:	f7ed fbac 	bl	80002cc <__adddf3>
 8012b74:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b78:	4602      	mov	r2, r0
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	4640      	mov	r0, r8
 8012b7e:	4649      	mov	r1, r9
 8012b80:	f7ed ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8012b84:	b120      	cbz	r0, 8012b90 <__ieee754_sqrt+0x1a0>
 8012b86:	1ca0      	adds	r0, r4, #2
 8012b88:	bf08      	it	eq
 8012b8a:	3501      	addeq	r5, #1
 8012b8c:	3402      	adds	r4, #2
 8012b8e:	e7ca      	b.n	8012b26 <__ieee754_sqrt+0x136>
 8012b90:	3401      	adds	r4, #1
 8012b92:	f024 0401 	bic.w	r4, r4, #1
 8012b96:	e7c6      	b.n	8012b26 <__ieee754_sqrt+0x136>
 8012b98:	7ff00000 	.word	0x7ff00000
 8012b9c:	20000238 	.word	0x20000238
 8012ba0:	20000240 	.word	0x20000240
 8012ba4:	00000000 	.word	0x00000000

08012ba8 <__kernel_cos>:
 8012ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bac:	ec57 6b10 	vmov	r6, r7, d0
 8012bb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012bb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012bb8:	ed8d 1b00 	vstr	d1, [sp]
 8012bbc:	da07      	bge.n	8012bce <__kernel_cos+0x26>
 8012bbe:	ee10 0a10 	vmov	r0, s0
 8012bc2:	4639      	mov	r1, r7
 8012bc4:	f7ed ffe8 	bl	8000b98 <__aeabi_d2iz>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	f000 8088 	beq.w	8012cde <__kernel_cos+0x136>
 8012bce:	4632      	mov	r2, r6
 8012bd0:	463b      	mov	r3, r7
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	4639      	mov	r1, r7
 8012bd6:	f7ed fd2f 	bl	8000638 <__aeabi_dmul>
 8012bda:	4b51      	ldr	r3, [pc, #324]	; (8012d20 <__kernel_cos+0x178>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	4604      	mov	r4, r0
 8012be0:	460d      	mov	r5, r1
 8012be2:	f7ed fd29 	bl	8000638 <__aeabi_dmul>
 8012be6:	a340      	add	r3, pc, #256	; (adr r3, 8012ce8 <__kernel_cos+0x140>)
 8012be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bec:	4682      	mov	sl, r0
 8012bee:	468b      	mov	fp, r1
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	f7ed fd20 	bl	8000638 <__aeabi_dmul>
 8012bf8:	a33d      	add	r3, pc, #244	; (adr r3, 8012cf0 <__kernel_cos+0x148>)
 8012bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfe:	f7ed fb65 	bl	80002cc <__adddf3>
 8012c02:	4622      	mov	r2, r4
 8012c04:	462b      	mov	r3, r5
 8012c06:	f7ed fd17 	bl	8000638 <__aeabi_dmul>
 8012c0a:	a33b      	add	r3, pc, #236	; (adr r3, 8012cf8 <__kernel_cos+0x150>)
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	f7ed fb5a 	bl	80002c8 <__aeabi_dsub>
 8012c14:	4622      	mov	r2, r4
 8012c16:	462b      	mov	r3, r5
 8012c18:	f7ed fd0e 	bl	8000638 <__aeabi_dmul>
 8012c1c:	a338      	add	r3, pc, #224	; (adr r3, 8012d00 <__kernel_cos+0x158>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c22:	f7ed fb53 	bl	80002cc <__adddf3>
 8012c26:	4622      	mov	r2, r4
 8012c28:	462b      	mov	r3, r5
 8012c2a:	f7ed fd05 	bl	8000638 <__aeabi_dmul>
 8012c2e:	a336      	add	r3, pc, #216	; (adr r3, 8012d08 <__kernel_cos+0x160>)
 8012c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c34:	f7ed fb48 	bl	80002c8 <__aeabi_dsub>
 8012c38:	4622      	mov	r2, r4
 8012c3a:	462b      	mov	r3, r5
 8012c3c:	f7ed fcfc 	bl	8000638 <__aeabi_dmul>
 8012c40:	a333      	add	r3, pc, #204	; (adr r3, 8012d10 <__kernel_cos+0x168>)
 8012c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c46:	f7ed fb41 	bl	80002cc <__adddf3>
 8012c4a:	4622      	mov	r2, r4
 8012c4c:	462b      	mov	r3, r5
 8012c4e:	f7ed fcf3 	bl	8000638 <__aeabi_dmul>
 8012c52:	4622      	mov	r2, r4
 8012c54:	462b      	mov	r3, r5
 8012c56:	f7ed fcef 	bl	8000638 <__aeabi_dmul>
 8012c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c5e:	4604      	mov	r4, r0
 8012c60:	460d      	mov	r5, r1
 8012c62:	4630      	mov	r0, r6
 8012c64:	4639      	mov	r1, r7
 8012c66:	f7ed fce7 	bl	8000638 <__aeabi_dmul>
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	4629      	mov	r1, r5
 8012c70:	4620      	mov	r0, r4
 8012c72:	f7ed fb29 	bl	80002c8 <__aeabi_dsub>
 8012c76:	4b2b      	ldr	r3, [pc, #172]	; (8012d24 <__kernel_cos+0x17c>)
 8012c78:	4598      	cmp	r8, r3
 8012c7a:	4606      	mov	r6, r0
 8012c7c:	460f      	mov	r7, r1
 8012c7e:	dc10      	bgt.n	8012ca2 <__kernel_cos+0xfa>
 8012c80:	4602      	mov	r2, r0
 8012c82:	460b      	mov	r3, r1
 8012c84:	4650      	mov	r0, sl
 8012c86:	4659      	mov	r1, fp
 8012c88:	f7ed fb1e 	bl	80002c8 <__aeabi_dsub>
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	4926      	ldr	r1, [pc, #152]	; (8012d28 <__kernel_cos+0x180>)
 8012c90:	4602      	mov	r2, r0
 8012c92:	2000      	movs	r0, #0
 8012c94:	f7ed fb18 	bl	80002c8 <__aeabi_dsub>
 8012c98:	ec41 0b10 	vmov	d0, r0, r1
 8012c9c:	b003      	add	sp, #12
 8012c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca2:	4b22      	ldr	r3, [pc, #136]	; (8012d2c <__kernel_cos+0x184>)
 8012ca4:	4920      	ldr	r1, [pc, #128]	; (8012d28 <__kernel_cos+0x180>)
 8012ca6:	4598      	cmp	r8, r3
 8012ca8:	bfcc      	ite	gt
 8012caa:	4d21      	ldrgt	r5, [pc, #132]	; (8012d30 <__kernel_cos+0x188>)
 8012cac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012cb0:	2400      	movs	r4, #0
 8012cb2:	4622      	mov	r2, r4
 8012cb4:	462b      	mov	r3, r5
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	f7ed fb06 	bl	80002c8 <__aeabi_dsub>
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	4680      	mov	r8, r0
 8012cc0:	4689      	mov	r9, r1
 8012cc2:	462b      	mov	r3, r5
 8012cc4:	4650      	mov	r0, sl
 8012cc6:	4659      	mov	r1, fp
 8012cc8:	f7ed fafe 	bl	80002c8 <__aeabi_dsub>
 8012ccc:	4632      	mov	r2, r6
 8012cce:	463b      	mov	r3, r7
 8012cd0:	f7ed fafa 	bl	80002c8 <__aeabi_dsub>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4640      	mov	r0, r8
 8012cda:	4649      	mov	r1, r9
 8012cdc:	e7da      	b.n	8012c94 <__kernel_cos+0xec>
 8012cde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012d18 <__kernel_cos+0x170>
 8012ce2:	e7db      	b.n	8012c9c <__kernel_cos+0xf4>
 8012ce4:	f3af 8000 	nop.w
 8012ce8:	be8838d4 	.word	0xbe8838d4
 8012cec:	bda8fae9 	.word	0xbda8fae9
 8012cf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012cf4:	3e21ee9e 	.word	0x3e21ee9e
 8012cf8:	809c52ad 	.word	0x809c52ad
 8012cfc:	3e927e4f 	.word	0x3e927e4f
 8012d00:	19cb1590 	.word	0x19cb1590
 8012d04:	3efa01a0 	.word	0x3efa01a0
 8012d08:	16c15177 	.word	0x16c15177
 8012d0c:	3f56c16c 	.word	0x3f56c16c
 8012d10:	5555554c 	.word	0x5555554c
 8012d14:	3fa55555 	.word	0x3fa55555
 8012d18:	00000000 	.word	0x00000000
 8012d1c:	3ff00000 	.word	0x3ff00000
 8012d20:	3fe00000 	.word	0x3fe00000
 8012d24:	3fd33332 	.word	0x3fd33332
 8012d28:	3ff00000 	.word	0x3ff00000
 8012d2c:	3fe90000 	.word	0x3fe90000
 8012d30:	3fd20000 	.word	0x3fd20000
 8012d34:	00000000 	.word	0x00000000

08012d38 <__kernel_sin>:
 8012d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3c:	ed2d 8b04 	vpush	{d8-d9}
 8012d40:	eeb0 8a41 	vmov.f32	s16, s2
 8012d44:	eef0 8a61 	vmov.f32	s17, s3
 8012d48:	ec55 4b10 	vmov	r4, r5, d0
 8012d4c:	b083      	sub	sp, #12
 8012d4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012d52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012d56:	9001      	str	r0, [sp, #4]
 8012d58:	da06      	bge.n	8012d68 <__kernel_sin+0x30>
 8012d5a:	ee10 0a10 	vmov	r0, s0
 8012d5e:	4629      	mov	r1, r5
 8012d60:	f7ed ff1a 	bl	8000b98 <__aeabi_d2iz>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d051      	beq.n	8012e0c <__kernel_sin+0xd4>
 8012d68:	4622      	mov	r2, r4
 8012d6a:	462b      	mov	r3, r5
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	4629      	mov	r1, r5
 8012d70:	f7ed fc62 	bl	8000638 <__aeabi_dmul>
 8012d74:	4682      	mov	sl, r0
 8012d76:	468b      	mov	fp, r1
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	4629      	mov	r1, r5
 8012d80:	f7ed fc5a 	bl	8000638 <__aeabi_dmul>
 8012d84:	a341      	add	r3, pc, #260	; (adr r3, 8012e8c <__kernel_sin+0x154>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	4680      	mov	r8, r0
 8012d8c:	4689      	mov	r9, r1
 8012d8e:	4650      	mov	r0, sl
 8012d90:	4659      	mov	r1, fp
 8012d92:	f7ed fc51 	bl	8000638 <__aeabi_dmul>
 8012d96:	a33f      	add	r3, pc, #252	; (adr r3, 8012e94 <__kernel_sin+0x15c>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	f7ed fa94 	bl	80002c8 <__aeabi_dsub>
 8012da0:	4652      	mov	r2, sl
 8012da2:	465b      	mov	r3, fp
 8012da4:	f7ed fc48 	bl	8000638 <__aeabi_dmul>
 8012da8:	a33c      	add	r3, pc, #240	; (adr r3, 8012e9c <__kernel_sin+0x164>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	f7ed fa8d 	bl	80002cc <__adddf3>
 8012db2:	4652      	mov	r2, sl
 8012db4:	465b      	mov	r3, fp
 8012db6:	f7ed fc3f 	bl	8000638 <__aeabi_dmul>
 8012dba:	a33a      	add	r3, pc, #232	; (adr r3, 8012ea4 <__kernel_sin+0x16c>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa82 	bl	80002c8 <__aeabi_dsub>
 8012dc4:	4652      	mov	r2, sl
 8012dc6:	465b      	mov	r3, fp
 8012dc8:	f7ed fc36 	bl	8000638 <__aeabi_dmul>
 8012dcc:	a337      	add	r3, pc, #220	; (adr r3, 8012eac <__kernel_sin+0x174>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	f7ed fa7b 	bl	80002cc <__adddf3>
 8012dd6:	9b01      	ldr	r3, [sp, #4]
 8012dd8:	4606      	mov	r6, r0
 8012dda:	460f      	mov	r7, r1
 8012ddc:	b9eb      	cbnz	r3, 8012e1a <__kernel_sin+0xe2>
 8012dde:	4602      	mov	r2, r0
 8012de0:	460b      	mov	r3, r1
 8012de2:	4650      	mov	r0, sl
 8012de4:	4659      	mov	r1, fp
 8012de6:	f7ed fc27 	bl	8000638 <__aeabi_dmul>
 8012dea:	a325      	add	r3, pc, #148	; (adr r3, 8012e80 <__kernel_sin+0x148>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	f7ed fa6a 	bl	80002c8 <__aeabi_dsub>
 8012df4:	4642      	mov	r2, r8
 8012df6:	464b      	mov	r3, r9
 8012df8:	f7ed fc1e 	bl	8000638 <__aeabi_dmul>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4620      	mov	r0, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	f7ed fa62 	bl	80002cc <__adddf3>
 8012e08:	4604      	mov	r4, r0
 8012e0a:	460d      	mov	r5, r1
 8012e0c:	ec45 4b10 	vmov	d0, r4, r5
 8012e10:	b003      	add	sp, #12
 8012e12:	ecbd 8b04 	vpop	{d8-d9}
 8012e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1a:	4b1b      	ldr	r3, [pc, #108]	; (8012e88 <__kernel_sin+0x150>)
 8012e1c:	ec51 0b18 	vmov	r0, r1, d8
 8012e20:	2200      	movs	r2, #0
 8012e22:	f7ed fc09 	bl	8000638 <__aeabi_dmul>
 8012e26:	4632      	mov	r2, r6
 8012e28:	ec41 0b19 	vmov	d9, r0, r1
 8012e2c:	463b      	mov	r3, r7
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fc01 	bl	8000638 <__aeabi_dmul>
 8012e36:	4602      	mov	r2, r0
 8012e38:	460b      	mov	r3, r1
 8012e3a:	ec51 0b19 	vmov	r0, r1, d9
 8012e3e:	f7ed fa43 	bl	80002c8 <__aeabi_dsub>
 8012e42:	4652      	mov	r2, sl
 8012e44:	465b      	mov	r3, fp
 8012e46:	f7ed fbf7 	bl	8000638 <__aeabi_dmul>
 8012e4a:	ec53 2b18 	vmov	r2, r3, d8
 8012e4e:	f7ed fa3b 	bl	80002c8 <__aeabi_dsub>
 8012e52:	a30b      	add	r3, pc, #44	; (adr r3, 8012e80 <__kernel_sin+0x148>)
 8012e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e58:	4606      	mov	r6, r0
 8012e5a:	460f      	mov	r7, r1
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	4649      	mov	r1, r9
 8012e60:	f7ed fbea 	bl	8000638 <__aeabi_dmul>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	4630      	mov	r0, r6
 8012e6a:	4639      	mov	r1, r7
 8012e6c:	f7ed fa2e 	bl	80002cc <__adddf3>
 8012e70:	4602      	mov	r2, r0
 8012e72:	460b      	mov	r3, r1
 8012e74:	4620      	mov	r0, r4
 8012e76:	4629      	mov	r1, r5
 8012e78:	f7ed fa26 	bl	80002c8 <__aeabi_dsub>
 8012e7c:	e7c4      	b.n	8012e08 <__kernel_sin+0xd0>
 8012e7e:	bf00      	nop
 8012e80:	55555549 	.word	0x55555549
 8012e84:	3fc55555 	.word	0x3fc55555
 8012e88:	3fe00000 	.word	0x3fe00000
 8012e8c:	5acfd57c 	.word	0x5acfd57c
 8012e90:	3de5d93a 	.word	0x3de5d93a
 8012e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8012e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8012e9c:	57b1fe7d 	.word	0x57b1fe7d
 8012ea0:	3ec71de3 	.word	0x3ec71de3
 8012ea4:	19c161d5 	.word	0x19c161d5
 8012ea8:	3f2a01a0 	.word	0x3f2a01a0
 8012eac:	1110f8a6 	.word	0x1110f8a6
 8012eb0:	3f811111 	.word	0x3f811111
 8012eb4:	00000000 	.word	0x00000000

08012eb8 <__ieee754_atan2>:
 8012eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ebc:	ec57 6b11 	vmov	r6, r7, d1
 8012ec0:	4273      	negs	r3, r6
 8012ec2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8013040 <__ieee754_atan2+0x188>
 8012ec6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012eca:	4333      	orrs	r3, r6
 8012ecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012ed0:	4543      	cmp	r3, r8
 8012ed2:	ec51 0b10 	vmov	r0, r1, d0
 8012ed6:	ee11 5a10 	vmov	r5, s2
 8012eda:	d80a      	bhi.n	8012ef2 <__ieee754_atan2+0x3a>
 8012edc:	4244      	negs	r4, r0
 8012ede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ee2:	4304      	orrs	r4, r0
 8012ee4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012ee8:	4544      	cmp	r4, r8
 8012eea:	ee10 9a10 	vmov	r9, s0
 8012eee:	468e      	mov	lr, r1
 8012ef0:	d907      	bls.n	8012f02 <__ieee754_atan2+0x4a>
 8012ef2:	4632      	mov	r2, r6
 8012ef4:	463b      	mov	r3, r7
 8012ef6:	f7ed f9e9 	bl	80002cc <__adddf3>
 8012efa:	ec41 0b10 	vmov	d0, r0, r1
 8012efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012f06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012f0a:	4334      	orrs	r4, r6
 8012f0c:	d103      	bne.n	8012f16 <__ieee754_atan2+0x5e>
 8012f0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f12:	f000 baa1 	b.w	8013458 <atan>
 8012f16:	17bc      	asrs	r4, r7, #30
 8012f18:	f004 0402 	and.w	r4, r4, #2
 8012f1c:	ea53 0909 	orrs.w	r9, r3, r9
 8012f20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012f24:	d107      	bne.n	8012f36 <__ieee754_atan2+0x7e>
 8012f26:	2c02      	cmp	r4, #2
 8012f28:	d05f      	beq.n	8012fea <__ieee754_atan2+0x132>
 8012f2a:	2c03      	cmp	r4, #3
 8012f2c:	d1e5      	bne.n	8012efa <__ieee754_atan2+0x42>
 8012f2e:	a140      	add	r1, pc, #256	; (adr r1, 8013030 <__ieee754_atan2+0x178>)
 8012f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f34:	e7e1      	b.n	8012efa <__ieee754_atan2+0x42>
 8012f36:	4315      	orrs	r5, r2
 8012f38:	d106      	bne.n	8012f48 <__ieee754_atan2+0x90>
 8012f3a:	f1be 0f00 	cmp.w	lr, #0
 8012f3e:	da5f      	bge.n	8013000 <__ieee754_atan2+0x148>
 8012f40:	a13d      	add	r1, pc, #244	; (adr r1, 8013038 <__ieee754_atan2+0x180>)
 8012f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f46:	e7d8      	b.n	8012efa <__ieee754_atan2+0x42>
 8012f48:	4542      	cmp	r2, r8
 8012f4a:	d10f      	bne.n	8012f6c <__ieee754_atan2+0xb4>
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012f52:	d107      	bne.n	8012f64 <__ieee754_atan2+0xac>
 8012f54:	2c02      	cmp	r4, #2
 8012f56:	d84c      	bhi.n	8012ff2 <__ieee754_atan2+0x13a>
 8012f58:	4b33      	ldr	r3, [pc, #204]	; (8013028 <__ieee754_atan2+0x170>)
 8012f5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f62:	e7ca      	b.n	8012efa <__ieee754_atan2+0x42>
 8012f64:	2c02      	cmp	r4, #2
 8012f66:	d848      	bhi.n	8012ffa <__ieee754_atan2+0x142>
 8012f68:	4b30      	ldr	r3, [pc, #192]	; (801302c <__ieee754_atan2+0x174>)
 8012f6a:	e7f6      	b.n	8012f5a <__ieee754_atan2+0xa2>
 8012f6c:	4543      	cmp	r3, r8
 8012f6e:	d0e4      	beq.n	8012f3a <__ieee754_atan2+0x82>
 8012f70:	1a9b      	subs	r3, r3, r2
 8012f72:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012f76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012f7a:	da1e      	bge.n	8012fba <__ieee754_atan2+0x102>
 8012f7c:	2f00      	cmp	r7, #0
 8012f7e:	da01      	bge.n	8012f84 <__ieee754_atan2+0xcc>
 8012f80:	323c      	adds	r2, #60	; 0x3c
 8012f82:	db1e      	blt.n	8012fc2 <__ieee754_atan2+0x10a>
 8012f84:	4632      	mov	r2, r6
 8012f86:	463b      	mov	r3, r7
 8012f88:	f7ed fc80 	bl	800088c <__aeabi_ddiv>
 8012f8c:	ec41 0b10 	vmov	d0, r0, r1
 8012f90:	f000 fc02 	bl	8013798 <fabs>
 8012f94:	f000 fa60 	bl	8013458 <atan>
 8012f98:	ec51 0b10 	vmov	r0, r1, d0
 8012f9c:	2c01      	cmp	r4, #1
 8012f9e:	d013      	beq.n	8012fc8 <__ieee754_atan2+0x110>
 8012fa0:	2c02      	cmp	r4, #2
 8012fa2:	d015      	beq.n	8012fd0 <__ieee754_atan2+0x118>
 8012fa4:	2c00      	cmp	r4, #0
 8012fa6:	d0a8      	beq.n	8012efa <__ieee754_atan2+0x42>
 8012fa8:	a317      	add	r3, pc, #92	; (adr r3, 8013008 <__ieee754_atan2+0x150>)
 8012faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fae:	f7ed f98b 	bl	80002c8 <__aeabi_dsub>
 8012fb2:	a317      	add	r3, pc, #92	; (adr r3, 8013010 <__ieee754_atan2+0x158>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	e014      	b.n	8012fe4 <__ieee754_atan2+0x12c>
 8012fba:	a117      	add	r1, pc, #92	; (adr r1, 8013018 <__ieee754_atan2+0x160>)
 8012fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fc0:	e7ec      	b.n	8012f9c <__ieee754_atan2+0xe4>
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	e7e9      	b.n	8012f9c <__ieee754_atan2+0xe4>
 8012fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fcc:	4619      	mov	r1, r3
 8012fce:	e794      	b.n	8012efa <__ieee754_atan2+0x42>
 8012fd0:	a30d      	add	r3, pc, #52	; (adr r3, 8013008 <__ieee754_atan2+0x150>)
 8012fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd6:	f7ed f977 	bl	80002c8 <__aeabi_dsub>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	460b      	mov	r3, r1
 8012fde:	a10c      	add	r1, pc, #48	; (adr r1, 8013010 <__ieee754_atan2+0x158>)
 8012fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fe4:	f7ed f970 	bl	80002c8 <__aeabi_dsub>
 8012fe8:	e787      	b.n	8012efa <__ieee754_atan2+0x42>
 8012fea:	a109      	add	r1, pc, #36	; (adr r1, 8013010 <__ieee754_atan2+0x158>)
 8012fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ff0:	e783      	b.n	8012efa <__ieee754_atan2+0x42>
 8012ff2:	a10b      	add	r1, pc, #44	; (adr r1, 8013020 <__ieee754_atan2+0x168>)
 8012ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ff8:	e77f      	b.n	8012efa <__ieee754_atan2+0x42>
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	e77c      	b.n	8012efa <__ieee754_atan2+0x42>
 8013000:	a105      	add	r1, pc, #20	; (adr r1, 8013018 <__ieee754_atan2+0x160>)
 8013002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013006:	e778      	b.n	8012efa <__ieee754_atan2+0x42>
 8013008:	33145c07 	.word	0x33145c07
 801300c:	3ca1a626 	.word	0x3ca1a626
 8013010:	54442d18 	.word	0x54442d18
 8013014:	400921fb 	.word	0x400921fb
 8013018:	54442d18 	.word	0x54442d18
 801301c:	3ff921fb 	.word	0x3ff921fb
 8013020:	54442d18 	.word	0x54442d18
 8013024:	3fe921fb 	.word	0x3fe921fb
 8013028:	08014920 	.word	0x08014920
 801302c:	08014938 	.word	0x08014938
 8013030:	54442d18 	.word	0x54442d18
 8013034:	c00921fb 	.word	0xc00921fb
 8013038:	54442d18 	.word	0x54442d18
 801303c:	bff921fb 	.word	0xbff921fb
 8013040:	7ff00000 	.word	0x7ff00000
 8013044:	00000000 	.word	0x00000000

08013048 <__ieee754_rem_pio2>:
 8013048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801304c:	ed2d 8b02 	vpush	{d8}
 8013050:	ec55 4b10 	vmov	r4, r5, d0
 8013054:	4bca      	ldr	r3, [pc, #808]	; (8013380 <__ieee754_rem_pio2+0x338>)
 8013056:	b08b      	sub	sp, #44	; 0x2c
 8013058:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801305c:	4598      	cmp	r8, r3
 801305e:	4682      	mov	sl, r0
 8013060:	9502      	str	r5, [sp, #8]
 8013062:	dc08      	bgt.n	8013076 <__ieee754_rem_pio2+0x2e>
 8013064:	2200      	movs	r2, #0
 8013066:	2300      	movs	r3, #0
 8013068:	ed80 0b00 	vstr	d0, [r0]
 801306c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013070:	f04f 0b00 	mov.w	fp, #0
 8013074:	e028      	b.n	80130c8 <__ieee754_rem_pio2+0x80>
 8013076:	4bc3      	ldr	r3, [pc, #780]	; (8013384 <__ieee754_rem_pio2+0x33c>)
 8013078:	4598      	cmp	r8, r3
 801307a:	dc78      	bgt.n	801316e <__ieee754_rem_pio2+0x126>
 801307c:	9b02      	ldr	r3, [sp, #8]
 801307e:	4ec2      	ldr	r6, [pc, #776]	; (8013388 <__ieee754_rem_pio2+0x340>)
 8013080:	2b00      	cmp	r3, #0
 8013082:	ee10 0a10 	vmov	r0, s0
 8013086:	a3b0      	add	r3, pc, #704	; (adr r3, 8013348 <__ieee754_rem_pio2+0x300>)
 8013088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308c:	4629      	mov	r1, r5
 801308e:	dd39      	ble.n	8013104 <__ieee754_rem_pio2+0xbc>
 8013090:	f7ed f91a 	bl	80002c8 <__aeabi_dsub>
 8013094:	45b0      	cmp	r8, r6
 8013096:	4604      	mov	r4, r0
 8013098:	460d      	mov	r5, r1
 801309a:	d01b      	beq.n	80130d4 <__ieee754_rem_pio2+0x8c>
 801309c:	a3ac      	add	r3, pc, #688	; (adr r3, 8013350 <__ieee754_rem_pio2+0x308>)
 801309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a2:	f7ed f911 	bl	80002c8 <__aeabi_dsub>
 80130a6:	4602      	mov	r2, r0
 80130a8:	460b      	mov	r3, r1
 80130aa:	e9ca 2300 	strd	r2, r3, [sl]
 80130ae:	4620      	mov	r0, r4
 80130b0:	4629      	mov	r1, r5
 80130b2:	f7ed f909 	bl	80002c8 <__aeabi_dsub>
 80130b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013350 <__ieee754_rem_pio2+0x308>)
 80130b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130bc:	f7ed f904 	bl	80002c8 <__aeabi_dsub>
 80130c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80130c4:	f04f 0b01 	mov.w	fp, #1
 80130c8:	4658      	mov	r0, fp
 80130ca:	b00b      	add	sp, #44	; 0x2c
 80130cc:	ecbd 8b02 	vpop	{d8}
 80130d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8013358 <__ieee754_rem_pio2+0x310>)
 80130d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130da:	f7ed f8f5 	bl	80002c8 <__aeabi_dsub>
 80130de:	a3a0      	add	r3, pc, #640	; (adr r3, 8013360 <__ieee754_rem_pio2+0x318>)
 80130e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e4:	4604      	mov	r4, r0
 80130e6:	460d      	mov	r5, r1
 80130e8:	f7ed f8ee 	bl	80002c8 <__aeabi_dsub>
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	e9ca 2300 	strd	r2, r3, [sl]
 80130f4:	4620      	mov	r0, r4
 80130f6:	4629      	mov	r1, r5
 80130f8:	f7ed f8e6 	bl	80002c8 <__aeabi_dsub>
 80130fc:	a398      	add	r3, pc, #608	; (adr r3, 8013360 <__ieee754_rem_pio2+0x318>)
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	e7db      	b.n	80130bc <__ieee754_rem_pio2+0x74>
 8013104:	f7ed f8e2 	bl	80002cc <__adddf3>
 8013108:	45b0      	cmp	r8, r6
 801310a:	4604      	mov	r4, r0
 801310c:	460d      	mov	r5, r1
 801310e:	d016      	beq.n	801313e <__ieee754_rem_pio2+0xf6>
 8013110:	a38f      	add	r3, pc, #572	; (adr r3, 8013350 <__ieee754_rem_pio2+0x308>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	f7ed f8d9 	bl	80002cc <__adddf3>
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	e9ca 2300 	strd	r2, r3, [sl]
 8013122:	4620      	mov	r0, r4
 8013124:	4629      	mov	r1, r5
 8013126:	f7ed f8cf 	bl	80002c8 <__aeabi_dsub>
 801312a:	a389      	add	r3, pc, #548	; (adr r3, 8013350 <__ieee754_rem_pio2+0x308>)
 801312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013130:	f7ed f8cc 	bl	80002cc <__adddf3>
 8013134:	f04f 3bff 	mov.w	fp, #4294967295
 8013138:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801313c:	e7c4      	b.n	80130c8 <__ieee754_rem_pio2+0x80>
 801313e:	a386      	add	r3, pc, #536	; (adr r3, 8013358 <__ieee754_rem_pio2+0x310>)
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f7ed f8c2 	bl	80002cc <__adddf3>
 8013148:	a385      	add	r3, pc, #532	; (adr r3, 8013360 <__ieee754_rem_pio2+0x318>)
 801314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314e:	4604      	mov	r4, r0
 8013150:	460d      	mov	r5, r1
 8013152:	f7ed f8bb 	bl	80002cc <__adddf3>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	e9ca 2300 	strd	r2, r3, [sl]
 801315e:	4620      	mov	r0, r4
 8013160:	4629      	mov	r1, r5
 8013162:	f7ed f8b1 	bl	80002c8 <__aeabi_dsub>
 8013166:	a37e      	add	r3, pc, #504	; (adr r3, 8013360 <__ieee754_rem_pio2+0x318>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	e7e0      	b.n	8013130 <__ieee754_rem_pio2+0xe8>
 801316e:	4b87      	ldr	r3, [pc, #540]	; (801338c <__ieee754_rem_pio2+0x344>)
 8013170:	4598      	cmp	r8, r3
 8013172:	f300 80d8 	bgt.w	8013326 <__ieee754_rem_pio2+0x2de>
 8013176:	f000 fb0f 	bl	8013798 <fabs>
 801317a:	ec55 4b10 	vmov	r4, r5, d0
 801317e:	ee10 0a10 	vmov	r0, s0
 8013182:	a379      	add	r3, pc, #484	; (adr r3, 8013368 <__ieee754_rem_pio2+0x320>)
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	4629      	mov	r1, r5
 801318a:	f7ed fa55 	bl	8000638 <__aeabi_dmul>
 801318e:	4b80      	ldr	r3, [pc, #512]	; (8013390 <__ieee754_rem_pio2+0x348>)
 8013190:	2200      	movs	r2, #0
 8013192:	f7ed f89b 	bl	80002cc <__adddf3>
 8013196:	f7ed fcff 	bl	8000b98 <__aeabi_d2iz>
 801319a:	4683      	mov	fp, r0
 801319c:	f7ed f9e2 	bl	8000564 <__aeabi_i2d>
 80131a0:	4602      	mov	r2, r0
 80131a2:	460b      	mov	r3, r1
 80131a4:	ec43 2b18 	vmov	d8, r2, r3
 80131a8:	a367      	add	r3, pc, #412	; (adr r3, 8013348 <__ieee754_rem_pio2+0x300>)
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	f7ed fa43 	bl	8000638 <__aeabi_dmul>
 80131b2:	4602      	mov	r2, r0
 80131b4:	460b      	mov	r3, r1
 80131b6:	4620      	mov	r0, r4
 80131b8:	4629      	mov	r1, r5
 80131ba:	f7ed f885 	bl	80002c8 <__aeabi_dsub>
 80131be:	a364      	add	r3, pc, #400	; (adr r3, 8013350 <__ieee754_rem_pio2+0x308>)
 80131c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c4:	4606      	mov	r6, r0
 80131c6:	460f      	mov	r7, r1
 80131c8:	ec51 0b18 	vmov	r0, r1, d8
 80131cc:	f7ed fa34 	bl	8000638 <__aeabi_dmul>
 80131d0:	f1bb 0f1f 	cmp.w	fp, #31
 80131d4:	4604      	mov	r4, r0
 80131d6:	460d      	mov	r5, r1
 80131d8:	dc0d      	bgt.n	80131f6 <__ieee754_rem_pio2+0x1ae>
 80131da:	4b6e      	ldr	r3, [pc, #440]	; (8013394 <__ieee754_rem_pio2+0x34c>)
 80131dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80131e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e4:	4543      	cmp	r3, r8
 80131e6:	d006      	beq.n	80131f6 <__ieee754_rem_pio2+0x1ae>
 80131e8:	4622      	mov	r2, r4
 80131ea:	462b      	mov	r3, r5
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f7ed f86a 	bl	80002c8 <__aeabi_dsub>
 80131f4:	e00e      	b.n	8013214 <__ieee754_rem_pio2+0x1cc>
 80131f6:	462b      	mov	r3, r5
 80131f8:	4622      	mov	r2, r4
 80131fa:	4630      	mov	r0, r6
 80131fc:	4639      	mov	r1, r7
 80131fe:	f7ed f863 	bl	80002c8 <__aeabi_dsub>
 8013202:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013206:	9303      	str	r3, [sp, #12]
 8013208:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801320c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013210:	2b10      	cmp	r3, #16
 8013212:	dc02      	bgt.n	801321a <__ieee754_rem_pio2+0x1d2>
 8013214:	e9ca 0100 	strd	r0, r1, [sl]
 8013218:	e039      	b.n	801328e <__ieee754_rem_pio2+0x246>
 801321a:	a34f      	add	r3, pc, #316	; (adr r3, 8013358 <__ieee754_rem_pio2+0x310>)
 801321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013220:	ec51 0b18 	vmov	r0, r1, d8
 8013224:	f7ed fa08 	bl	8000638 <__aeabi_dmul>
 8013228:	4604      	mov	r4, r0
 801322a:	460d      	mov	r5, r1
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	4630      	mov	r0, r6
 8013232:	4639      	mov	r1, r7
 8013234:	f7ed f848 	bl	80002c8 <__aeabi_dsub>
 8013238:	4602      	mov	r2, r0
 801323a:	460b      	mov	r3, r1
 801323c:	4680      	mov	r8, r0
 801323e:	4689      	mov	r9, r1
 8013240:	4630      	mov	r0, r6
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed f840 	bl	80002c8 <__aeabi_dsub>
 8013248:	4622      	mov	r2, r4
 801324a:	462b      	mov	r3, r5
 801324c:	f7ed f83c 	bl	80002c8 <__aeabi_dsub>
 8013250:	a343      	add	r3, pc, #268	; (adr r3, 8013360 <__ieee754_rem_pio2+0x318>)
 8013252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013256:	4604      	mov	r4, r0
 8013258:	460d      	mov	r5, r1
 801325a:	ec51 0b18 	vmov	r0, r1, d8
 801325e:	f7ed f9eb 	bl	8000638 <__aeabi_dmul>
 8013262:	4622      	mov	r2, r4
 8013264:	462b      	mov	r3, r5
 8013266:	f7ed f82f 	bl	80002c8 <__aeabi_dsub>
 801326a:	4602      	mov	r2, r0
 801326c:	460b      	mov	r3, r1
 801326e:	4604      	mov	r4, r0
 8013270:	460d      	mov	r5, r1
 8013272:	4640      	mov	r0, r8
 8013274:	4649      	mov	r1, r9
 8013276:	f7ed f827 	bl	80002c8 <__aeabi_dsub>
 801327a:	9a03      	ldr	r2, [sp, #12]
 801327c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013280:	1ad3      	subs	r3, r2, r3
 8013282:	2b31      	cmp	r3, #49	; 0x31
 8013284:	dc24      	bgt.n	80132d0 <__ieee754_rem_pio2+0x288>
 8013286:	e9ca 0100 	strd	r0, r1, [sl]
 801328a:	4646      	mov	r6, r8
 801328c:	464f      	mov	r7, r9
 801328e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013292:	4630      	mov	r0, r6
 8013294:	4642      	mov	r2, r8
 8013296:	464b      	mov	r3, r9
 8013298:	4639      	mov	r1, r7
 801329a:	f7ed f815 	bl	80002c8 <__aeabi_dsub>
 801329e:	462b      	mov	r3, r5
 80132a0:	4622      	mov	r2, r4
 80132a2:	f7ed f811 	bl	80002c8 <__aeabi_dsub>
 80132a6:	9b02      	ldr	r3, [sp, #8]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80132ae:	f6bf af0b 	bge.w	80130c8 <__ieee754_rem_pio2+0x80>
 80132b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80132b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80132ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132be:	f8ca 8000 	str.w	r8, [sl]
 80132c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80132c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80132ca:	f1cb 0b00 	rsb	fp, fp, #0
 80132ce:	e6fb      	b.n	80130c8 <__ieee754_rem_pio2+0x80>
 80132d0:	a327      	add	r3, pc, #156	; (adr r3, 8013370 <__ieee754_rem_pio2+0x328>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	ec51 0b18 	vmov	r0, r1, d8
 80132da:	f7ed f9ad 	bl	8000638 <__aeabi_dmul>
 80132de:	4604      	mov	r4, r0
 80132e0:	460d      	mov	r5, r1
 80132e2:	4602      	mov	r2, r0
 80132e4:	460b      	mov	r3, r1
 80132e6:	4640      	mov	r0, r8
 80132e8:	4649      	mov	r1, r9
 80132ea:	f7ec ffed 	bl	80002c8 <__aeabi_dsub>
 80132ee:	4602      	mov	r2, r0
 80132f0:	460b      	mov	r3, r1
 80132f2:	4606      	mov	r6, r0
 80132f4:	460f      	mov	r7, r1
 80132f6:	4640      	mov	r0, r8
 80132f8:	4649      	mov	r1, r9
 80132fa:	f7ec ffe5 	bl	80002c8 <__aeabi_dsub>
 80132fe:	4622      	mov	r2, r4
 8013300:	462b      	mov	r3, r5
 8013302:	f7ec ffe1 	bl	80002c8 <__aeabi_dsub>
 8013306:	a31c      	add	r3, pc, #112	; (adr r3, 8013378 <__ieee754_rem_pio2+0x330>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	4604      	mov	r4, r0
 801330e:	460d      	mov	r5, r1
 8013310:	ec51 0b18 	vmov	r0, r1, d8
 8013314:	f7ed f990 	bl	8000638 <__aeabi_dmul>
 8013318:	4622      	mov	r2, r4
 801331a:	462b      	mov	r3, r5
 801331c:	f7ec ffd4 	bl	80002c8 <__aeabi_dsub>
 8013320:	4604      	mov	r4, r0
 8013322:	460d      	mov	r5, r1
 8013324:	e760      	b.n	80131e8 <__ieee754_rem_pio2+0x1a0>
 8013326:	4b1c      	ldr	r3, [pc, #112]	; (8013398 <__ieee754_rem_pio2+0x350>)
 8013328:	4598      	cmp	r8, r3
 801332a:	dd37      	ble.n	801339c <__ieee754_rem_pio2+0x354>
 801332c:	ee10 2a10 	vmov	r2, s0
 8013330:	462b      	mov	r3, r5
 8013332:	4620      	mov	r0, r4
 8013334:	4629      	mov	r1, r5
 8013336:	f7ec ffc7 	bl	80002c8 <__aeabi_dsub>
 801333a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801333e:	e9ca 0100 	strd	r0, r1, [sl]
 8013342:	e695      	b.n	8013070 <__ieee754_rem_pio2+0x28>
 8013344:	f3af 8000 	nop.w
 8013348:	54400000 	.word	0x54400000
 801334c:	3ff921fb 	.word	0x3ff921fb
 8013350:	1a626331 	.word	0x1a626331
 8013354:	3dd0b461 	.word	0x3dd0b461
 8013358:	1a600000 	.word	0x1a600000
 801335c:	3dd0b461 	.word	0x3dd0b461
 8013360:	2e037073 	.word	0x2e037073
 8013364:	3ba3198a 	.word	0x3ba3198a
 8013368:	6dc9c883 	.word	0x6dc9c883
 801336c:	3fe45f30 	.word	0x3fe45f30
 8013370:	2e000000 	.word	0x2e000000
 8013374:	3ba3198a 	.word	0x3ba3198a
 8013378:	252049c1 	.word	0x252049c1
 801337c:	397b839a 	.word	0x397b839a
 8013380:	3fe921fb 	.word	0x3fe921fb
 8013384:	4002d97b 	.word	0x4002d97b
 8013388:	3ff921fb 	.word	0x3ff921fb
 801338c:	413921fb 	.word	0x413921fb
 8013390:	3fe00000 	.word	0x3fe00000
 8013394:	08014950 	.word	0x08014950
 8013398:	7fefffff 	.word	0x7fefffff
 801339c:	ea4f 5628 	mov.w	r6, r8, asr #20
 80133a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80133a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80133a8:	4620      	mov	r0, r4
 80133aa:	460d      	mov	r5, r1
 80133ac:	f7ed fbf4 	bl	8000b98 <__aeabi_d2iz>
 80133b0:	f7ed f8d8 	bl	8000564 <__aeabi_i2d>
 80133b4:	4602      	mov	r2, r0
 80133b6:	460b      	mov	r3, r1
 80133b8:	4620      	mov	r0, r4
 80133ba:	4629      	mov	r1, r5
 80133bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80133c0:	f7ec ff82 	bl	80002c8 <__aeabi_dsub>
 80133c4:	4b21      	ldr	r3, [pc, #132]	; (801344c <__ieee754_rem_pio2+0x404>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	f7ed f936 	bl	8000638 <__aeabi_dmul>
 80133cc:	460d      	mov	r5, r1
 80133ce:	4604      	mov	r4, r0
 80133d0:	f7ed fbe2 	bl	8000b98 <__aeabi_d2iz>
 80133d4:	f7ed f8c6 	bl	8000564 <__aeabi_i2d>
 80133d8:	4602      	mov	r2, r0
 80133da:	460b      	mov	r3, r1
 80133dc:	4620      	mov	r0, r4
 80133de:	4629      	mov	r1, r5
 80133e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80133e4:	f7ec ff70 	bl	80002c8 <__aeabi_dsub>
 80133e8:	4b18      	ldr	r3, [pc, #96]	; (801344c <__ieee754_rem_pio2+0x404>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	f7ed f924 	bl	8000638 <__aeabi_dmul>
 80133f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80133f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80133f8:	2703      	movs	r7, #3
 80133fa:	2400      	movs	r4, #0
 80133fc:	2500      	movs	r5, #0
 80133fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8013402:	4622      	mov	r2, r4
 8013404:	462b      	mov	r3, r5
 8013406:	46b9      	mov	r9, r7
 8013408:	3f01      	subs	r7, #1
 801340a:	f7ed fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 801340e:	2800      	cmp	r0, #0
 8013410:	d1f5      	bne.n	80133fe <__ieee754_rem_pio2+0x3b6>
 8013412:	4b0f      	ldr	r3, [pc, #60]	; (8013450 <__ieee754_rem_pio2+0x408>)
 8013414:	9301      	str	r3, [sp, #4]
 8013416:	2302      	movs	r3, #2
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	4632      	mov	r2, r6
 801341c:	464b      	mov	r3, r9
 801341e:	4651      	mov	r1, sl
 8013420:	a804      	add	r0, sp, #16
 8013422:	f000 f9c5 	bl	80137b0 <__kernel_rem_pio2>
 8013426:	9b02      	ldr	r3, [sp, #8]
 8013428:	2b00      	cmp	r3, #0
 801342a:	4683      	mov	fp, r0
 801342c:	f6bf ae4c 	bge.w	80130c8 <__ieee754_rem_pio2+0x80>
 8013430:	e9da 2100 	ldrd	r2, r1, [sl]
 8013434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013438:	e9ca 2300 	strd	r2, r3, [sl]
 801343c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013444:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013448:	e73f      	b.n	80132ca <__ieee754_rem_pio2+0x282>
 801344a:	bf00      	nop
 801344c:	41700000 	.word	0x41700000
 8013450:	080149d0 	.word	0x080149d0
 8013454:	00000000 	.word	0x00000000

08013458 <atan>:
 8013458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345c:	ec55 4b10 	vmov	r4, r5, d0
 8013460:	4bc3      	ldr	r3, [pc, #780]	; (8013770 <atan+0x318>)
 8013462:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013466:	429e      	cmp	r6, r3
 8013468:	46ab      	mov	fp, r5
 801346a:	dd18      	ble.n	801349e <atan+0x46>
 801346c:	4bc1      	ldr	r3, [pc, #772]	; (8013774 <atan+0x31c>)
 801346e:	429e      	cmp	r6, r3
 8013470:	dc01      	bgt.n	8013476 <atan+0x1e>
 8013472:	d109      	bne.n	8013488 <atan+0x30>
 8013474:	b144      	cbz	r4, 8013488 <atan+0x30>
 8013476:	4622      	mov	r2, r4
 8013478:	462b      	mov	r3, r5
 801347a:	4620      	mov	r0, r4
 801347c:	4629      	mov	r1, r5
 801347e:	f7ec ff25 	bl	80002cc <__adddf3>
 8013482:	4604      	mov	r4, r0
 8013484:	460d      	mov	r5, r1
 8013486:	e006      	b.n	8013496 <atan+0x3e>
 8013488:	f1bb 0f00 	cmp.w	fp, #0
 801348c:	f300 8131 	bgt.w	80136f2 <atan+0x29a>
 8013490:	a59b      	add	r5, pc, #620	; (adr r5, 8013700 <atan+0x2a8>)
 8013492:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013496:	ec45 4b10 	vmov	d0, r4, r5
 801349a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349e:	4bb6      	ldr	r3, [pc, #728]	; (8013778 <atan+0x320>)
 80134a0:	429e      	cmp	r6, r3
 80134a2:	dc14      	bgt.n	80134ce <atan+0x76>
 80134a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80134a8:	429e      	cmp	r6, r3
 80134aa:	dc0d      	bgt.n	80134c8 <atan+0x70>
 80134ac:	a396      	add	r3, pc, #600	; (adr r3, 8013708 <atan+0x2b0>)
 80134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b2:	ee10 0a10 	vmov	r0, s0
 80134b6:	4629      	mov	r1, r5
 80134b8:	f7ec ff08 	bl	80002cc <__adddf3>
 80134bc:	4baf      	ldr	r3, [pc, #700]	; (801377c <atan+0x324>)
 80134be:	2200      	movs	r2, #0
 80134c0:	f7ed fb4a 	bl	8000b58 <__aeabi_dcmpgt>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d1e6      	bne.n	8013496 <atan+0x3e>
 80134c8:	f04f 3aff 	mov.w	sl, #4294967295
 80134cc:	e02b      	b.n	8013526 <atan+0xce>
 80134ce:	f000 f963 	bl	8013798 <fabs>
 80134d2:	4bab      	ldr	r3, [pc, #684]	; (8013780 <atan+0x328>)
 80134d4:	429e      	cmp	r6, r3
 80134d6:	ec55 4b10 	vmov	r4, r5, d0
 80134da:	f300 80bf 	bgt.w	801365c <atan+0x204>
 80134de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80134e2:	429e      	cmp	r6, r3
 80134e4:	f300 80a0 	bgt.w	8013628 <atan+0x1d0>
 80134e8:	ee10 2a10 	vmov	r2, s0
 80134ec:	ee10 0a10 	vmov	r0, s0
 80134f0:	462b      	mov	r3, r5
 80134f2:	4629      	mov	r1, r5
 80134f4:	f7ec feea 	bl	80002cc <__adddf3>
 80134f8:	4ba0      	ldr	r3, [pc, #640]	; (801377c <atan+0x324>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	f7ec fee4 	bl	80002c8 <__aeabi_dsub>
 8013500:	2200      	movs	r2, #0
 8013502:	4606      	mov	r6, r0
 8013504:	460f      	mov	r7, r1
 8013506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801350a:	4620      	mov	r0, r4
 801350c:	4629      	mov	r1, r5
 801350e:	f7ec fedd 	bl	80002cc <__adddf3>
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	4630      	mov	r0, r6
 8013518:	4639      	mov	r1, r7
 801351a:	f7ed f9b7 	bl	800088c <__aeabi_ddiv>
 801351e:	f04f 0a00 	mov.w	sl, #0
 8013522:	4604      	mov	r4, r0
 8013524:	460d      	mov	r5, r1
 8013526:	4622      	mov	r2, r4
 8013528:	462b      	mov	r3, r5
 801352a:	4620      	mov	r0, r4
 801352c:	4629      	mov	r1, r5
 801352e:	f7ed f883 	bl	8000638 <__aeabi_dmul>
 8013532:	4602      	mov	r2, r0
 8013534:	460b      	mov	r3, r1
 8013536:	4680      	mov	r8, r0
 8013538:	4689      	mov	r9, r1
 801353a:	f7ed f87d 	bl	8000638 <__aeabi_dmul>
 801353e:	a374      	add	r3, pc, #464	; (adr r3, 8013710 <atan+0x2b8>)
 8013540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013544:	4606      	mov	r6, r0
 8013546:	460f      	mov	r7, r1
 8013548:	f7ed f876 	bl	8000638 <__aeabi_dmul>
 801354c:	a372      	add	r3, pc, #456	; (adr r3, 8013718 <atan+0x2c0>)
 801354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013552:	f7ec febb 	bl	80002cc <__adddf3>
 8013556:	4632      	mov	r2, r6
 8013558:	463b      	mov	r3, r7
 801355a:	f7ed f86d 	bl	8000638 <__aeabi_dmul>
 801355e:	a370      	add	r3, pc, #448	; (adr r3, 8013720 <atan+0x2c8>)
 8013560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013564:	f7ec feb2 	bl	80002cc <__adddf3>
 8013568:	4632      	mov	r2, r6
 801356a:	463b      	mov	r3, r7
 801356c:	f7ed f864 	bl	8000638 <__aeabi_dmul>
 8013570:	a36d      	add	r3, pc, #436	; (adr r3, 8013728 <atan+0x2d0>)
 8013572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013576:	f7ec fea9 	bl	80002cc <__adddf3>
 801357a:	4632      	mov	r2, r6
 801357c:	463b      	mov	r3, r7
 801357e:	f7ed f85b 	bl	8000638 <__aeabi_dmul>
 8013582:	a36b      	add	r3, pc, #428	; (adr r3, 8013730 <atan+0x2d8>)
 8013584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013588:	f7ec fea0 	bl	80002cc <__adddf3>
 801358c:	4632      	mov	r2, r6
 801358e:	463b      	mov	r3, r7
 8013590:	f7ed f852 	bl	8000638 <__aeabi_dmul>
 8013594:	a368      	add	r3, pc, #416	; (adr r3, 8013738 <atan+0x2e0>)
 8013596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359a:	f7ec fe97 	bl	80002cc <__adddf3>
 801359e:	4642      	mov	r2, r8
 80135a0:	464b      	mov	r3, r9
 80135a2:	f7ed f849 	bl	8000638 <__aeabi_dmul>
 80135a6:	a366      	add	r3, pc, #408	; (adr r3, 8013740 <atan+0x2e8>)
 80135a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ac:	4680      	mov	r8, r0
 80135ae:	4689      	mov	r9, r1
 80135b0:	4630      	mov	r0, r6
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ed f840 	bl	8000638 <__aeabi_dmul>
 80135b8:	a363      	add	r3, pc, #396	; (adr r3, 8013748 <atan+0x2f0>)
 80135ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135be:	f7ec fe83 	bl	80002c8 <__aeabi_dsub>
 80135c2:	4632      	mov	r2, r6
 80135c4:	463b      	mov	r3, r7
 80135c6:	f7ed f837 	bl	8000638 <__aeabi_dmul>
 80135ca:	a361      	add	r3, pc, #388	; (adr r3, 8013750 <atan+0x2f8>)
 80135cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d0:	f7ec fe7a 	bl	80002c8 <__aeabi_dsub>
 80135d4:	4632      	mov	r2, r6
 80135d6:	463b      	mov	r3, r7
 80135d8:	f7ed f82e 	bl	8000638 <__aeabi_dmul>
 80135dc:	a35e      	add	r3, pc, #376	; (adr r3, 8013758 <atan+0x300>)
 80135de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e2:	f7ec fe71 	bl	80002c8 <__aeabi_dsub>
 80135e6:	4632      	mov	r2, r6
 80135e8:	463b      	mov	r3, r7
 80135ea:	f7ed f825 	bl	8000638 <__aeabi_dmul>
 80135ee:	a35c      	add	r3, pc, #368	; (adr r3, 8013760 <atan+0x308>)
 80135f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f4:	f7ec fe68 	bl	80002c8 <__aeabi_dsub>
 80135f8:	4632      	mov	r2, r6
 80135fa:	463b      	mov	r3, r7
 80135fc:	f7ed f81c 	bl	8000638 <__aeabi_dmul>
 8013600:	4602      	mov	r2, r0
 8013602:	460b      	mov	r3, r1
 8013604:	4640      	mov	r0, r8
 8013606:	4649      	mov	r1, r9
 8013608:	f7ec fe60 	bl	80002cc <__adddf3>
 801360c:	4622      	mov	r2, r4
 801360e:	462b      	mov	r3, r5
 8013610:	f7ed f812 	bl	8000638 <__aeabi_dmul>
 8013614:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	d14b      	bne.n	80136b6 <atan+0x25e>
 801361e:	4620      	mov	r0, r4
 8013620:	4629      	mov	r1, r5
 8013622:	f7ec fe51 	bl	80002c8 <__aeabi_dsub>
 8013626:	e72c      	b.n	8013482 <atan+0x2a>
 8013628:	ee10 0a10 	vmov	r0, s0
 801362c:	4b53      	ldr	r3, [pc, #332]	; (801377c <atan+0x324>)
 801362e:	2200      	movs	r2, #0
 8013630:	4629      	mov	r1, r5
 8013632:	f7ec fe49 	bl	80002c8 <__aeabi_dsub>
 8013636:	4b51      	ldr	r3, [pc, #324]	; (801377c <atan+0x324>)
 8013638:	4606      	mov	r6, r0
 801363a:	460f      	mov	r7, r1
 801363c:	2200      	movs	r2, #0
 801363e:	4620      	mov	r0, r4
 8013640:	4629      	mov	r1, r5
 8013642:	f7ec fe43 	bl	80002cc <__adddf3>
 8013646:	4602      	mov	r2, r0
 8013648:	460b      	mov	r3, r1
 801364a:	4630      	mov	r0, r6
 801364c:	4639      	mov	r1, r7
 801364e:	f7ed f91d 	bl	800088c <__aeabi_ddiv>
 8013652:	f04f 0a01 	mov.w	sl, #1
 8013656:	4604      	mov	r4, r0
 8013658:	460d      	mov	r5, r1
 801365a:	e764      	b.n	8013526 <atan+0xce>
 801365c:	4b49      	ldr	r3, [pc, #292]	; (8013784 <atan+0x32c>)
 801365e:	429e      	cmp	r6, r3
 8013660:	da1d      	bge.n	801369e <atan+0x246>
 8013662:	ee10 0a10 	vmov	r0, s0
 8013666:	4b48      	ldr	r3, [pc, #288]	; (8013788 <atan+0x330>)
 8013668:	2200      	movs	r2, #0
 801366a:	4629      	mov	r1, r5
 801366c:	f7ec fe2c 	bl	80002c8 <__aeabi_dsub>
 8013670:	4b45      	ldr	r3, [pc, #276]	; (8013788 <atan+0x330>)
 8013672:	4606      	mov	r6, r0
 8013674:	460f      	mov	r7, r1
 8013676:	2200      	movs	r2, #0
 8013678:	4620      	mov	r0, r4
 801367a:	4629      	mov	r1, r5
 801367c:	f7ec ffdc 	bl	8000638 <__aeabi_dmul>
 8013680:	4b3e      	ldr	r3, [pc, #248]	; (801377c <atan+0x324>)
 8013682:	2200      	movs	r2, #0
 8013684:	f7ec fe22 	bl	80002cc <__adddf3>
 8013688:	4602      	mov	r2, r0
 801368a:	460b      	mov	r3, r1
 801368c:	4630      	mov	r0, r6
 801368e:	4639      	mov	r1, r7
 8013690:	f7ed f8fc 	bl	800088c <__aeabi_ddiv>
 8013694:	f04f 0a02 	mov.w	sl, #2
 8013698:	4604      	mov	r4, r0
 801369a:	460d      	mov	r5, r1
 801369c:	e743      	b.n	8013526 <atan+0xce>
 801369e:	462b      	mov	r3, r5
 80136a0:	ee10 2a10 	vmov	r2, s0
 80136a4:	4939      	ldr	r1, [pc, #228]	; (801378c <atan+0x334>)
 80136a6:	2000      	movs	r0, #0
 80136a8:	f7ed f8f0 	bl	800088c <__aeabi_ddiv>
 80136ac:	f04f 0a03 	mov.w	sl, #3
 80136b0:	4604      	mov	r4, r0
 80136b2:	460d      	mov	r5, r1
 80136b4:	e737      	b.n	8013526 <atan+0xce>
 80136b6:	4b36      	ldr	r3, [pc, #216]	; (8013790 <atan+0x338>)
 80136b8:	4e36      	ldr	r6, [pc, #216]	; (8013794 <atan+0x33c>)
 80136ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	f7ec fe01 	bl	80002c8 <__aeabi_dsub>
 80136c6:	4622      	mov	r2, r4
 80136c8:	462b      	mov	r3, r5
 80136ca:	f7ec fdfd 	bl	80002c8 <__aeabi_dsub>
 80136ce:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80136da:	f7ec fdf5 	bl	80002c8 <__aeabi_dsub>
 80136de:	f1bb 0f00 	cmp.w	fp, #0
 80136e2:	4604      	mov	r4, r0
 80136e4:	460d      	mov	r5, r1
 80136e6:	f6bf aed6 	bge.w	8013496 <atan+0x3e>
 80136ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136ee:	461d      	mov	r5, r3
 80136f0:	e6d1      	b.n	8013496 <atan+0x3e>
 80136f2:	a51d      	add	r5, pc, #116	; (adr r5, 8013768 <atan+0x310>)
 80136f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80136f8:	e6cd      	b.n	8013496 <atan+0x3e>
 80136fa:	bf00      	nop
 80136fc:	f3af 8000 	nop.w
 8013700:	54442d18 	.word	0x54442d18
 8013704:	bff921fb 	.word	0xbff921fb
 8013708:	8800759c 	.word	0x8800759c
 801370c:	7e37e43c 	.word	0x7e37e43c
 8013710:	e322da11 	.word	0xe322da11
 8013714:	3f90ad3a 	.word	0x3f90ad3a
 8013718:	24760deb 	.word	0x24760deb
 801371c:	3fa97b4b 	.word	0x3fa97b4b
 8013720:	a0d03d51 	.word	0xa0d03d51
 8013724:	3fb10d66 	.word	0x3fb10d66
 8013728:	c54c206e 	.word	0xc54c206e
 801372c:	3fb745cd 	.word	0x3fb745cd
 8013730:	920083ff 	.word	0x920083ff
 8013734:	3fc24924 	.word	0x3fc24924
 8013738:	5555550d 	.word	0x5555550d
 801373c:	3fd55555 	.word	0x3fd55555
 8013740:	2c6a6c2f 	.word	0x2c6a6c2f
 8013744:	bfa2b444 	.word	0xbfa2b444
 8013748:	52defd9a 	.word	0x52defd9a
 801374c:	3fadde2d 	.word	0x3fadde2d
 8013750:	af749a6d 	.word	0xaf749a6d
 8013754:	3fb3b0f2 	.word	0x3fb3b0f2
 8013758:	fe231671 	.word	0xfe231671
 801375c:	3fbc71c6 	.word	0x3fbc71c6
 8013760:	9998ebc4 	.word	0x9998ebc4
 8013764:	3fc99999 	.word	0x3fc99999
 8013768:	54442d18 	.word	0x54442d18
 801376c:	3ff921fb 	.word	0x3ff921fb
 8013770:	440fffff 	.word	0x440fffff
 8013774:	7ff00000 	.word	0x7ff00000
 8013778:	3fdbffff 	.word	0x3fdbffff
 801377c:	3ff00000 	.word	0x3ff00000
 8013780:	3ff2ffff 	.word	0x3ff2ffff
 8013784:	40038000 	.word	0x40038000
 8013788:	3ff80000 	.word	0x3ff80000
 801378c:	bff00000 	.word	0xbff00000
 8013790:	08014af8 	.word	0x08014af8
 8013794:	08014ad8 	.word	0x08014ad8

08013798 <fabs>:
 8013798:	ec51 0b10 	vmov	r0, r1, d0
 801379c:	ee10 2a10 	vmov	r2, s0
 80137a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137a4:	ec43 2b10 	vmov	d0, r2, r3
 80137a8:	4770      	bx	lr
 80137aa:	0000      	movs	r0, r0
 80137ac:	0000      	movs	r0, r0
	...

080137b0 <__kernel_rem_pio2>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	ed2d 8b02 	vpush	{d8}
 80137b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80137bc:	f112 0f14 	cmn.w	r2, #20
 80137c0:	9306      	str	r3, [sp, #24]
 80137c2:	9104      	str	r1, [sp, #16]
 80137c4:	4bc2      	ldr	r3, [pc, #776]	; (8013ad0 <__kernel_rem_pio2+0x320>)
 80137c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80137c8:	9009      	str	r0, [sp, #36]	; 0x24
 80137ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	9b06      	ldr	r3, [sp, #24]
 80137d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80137d6:	bfa8      	it	ge
 80137d8:	1ed4      	subge	r4, r2, #3
 80137da:	9305      	str	r3, [sp, #20]
 80137dc:	bfb2      	itee	lt
 80137de:	2400      	movlt	r4, #0
 80137e0:	2318      	movge	r3, #24
 80137e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80137e6:	f06f 0317 	mvn.w	r3, #23
 80137ea:	fb04 3303 	mla	r3, r4, r3, r3
 80137ee:	eb03 0a02 	add.w	sl, r3, r2
 80137f2:	9b00      	ldr	r3, [sp, #0]
 80137f4:	9a05      	ldr	r2, [sp, #20]
 80137f6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8013ac0 <__kernel_rem_pio2+0x310>
 80137fa:	eb03 0802 	add.w	r8, r3, r2
 80137fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013800:	1aa7      	subs	r7, r4, r2
 8013802:	ae20      	add	r6, sp, #128	; 0x80
 8013804:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013808:	2500      	movs	r5, #0
 801380a:	4545      	cmp	r5, r8
 801380c:	dd13      	ble.n	8013836 <__kernel_rem_pio2+0x86>
 801380e:	9b06      	ldr	r3, [sp, #24]
 8013810:	aa20      	add	r2, sp, #128	; 0x80
 8013812:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013816:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801381a:	f04f 0800 	mov.w	r8, #0
 801381e:	9b00      	ldr	r3, [sp, #0]
 8013820:	4598      	cmp	r8, r3
 8013822:	dc31      	bgt.n	8013888 <__kernel_rem_pio2+0xd8>
 8013824:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8013ac0 <__kernel_rem_pio2+0x310>
 8013828:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801382c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013830:	462f      	mov	r7, r5
 8013832:	2600      	movs	r6, #0
 8013834:	e01b      	b.n	801386e <__kernel_rem_pio2+0xbe>
 8013836:	42ef      	cmn	r7, r5
 8013838:	d407      	bmi.n	801384a <__kernel_rem_pio2+0x9a>
 801383a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801383e:	f7ec fe91 	bl	8000564 <__aeabi_i2d>
 8013842:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013846:	3501      	adds	r5, #1
 8013848:	e7df      	b.n	801380a <__kernel_rem_pio2+0x5a>
 801384a:	ec51 0b18 	vmov	r0, r1, d8
 801384e:	e7f8      	b.n	8013842 <__kernel_rem_pio2+0x92>
 8013850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013854:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013858:	f7ec feee 	bl	8000638 <__aeabi_dmul>
 801385c:	4602      	mov	r2, r0
 801385e:	460b      	mov	r3, r1
 8013860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013864:	f7ec fd32 	bl	80002cc <__adddf3>
 8013868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801386c:	3601      	adds	r6, #1
 801386e:	9b05      	ldr	r3, [sp, #20]
 8013870:	429e      	cmp	r6, r3
 8013872:	f1a7 0708 	sub.w	r7, r7, #8
 8013876:	ddeb      	ble.n	8013850 <__kernel_rem_pio2+0xa0>
 8013878:	ed9d 7b02 	vldr	d7, [sp, #8]
 801387c:	f108 0801 	add.w	r8, r8, #1
 8013880:	ecab 7b02 	vstmia	fp!, {d7}
 8013884:	3508      	adds	r5, #8
 8013886:	e7ca      	b.n	801381e <__kernel_rem_pio2+0x6e>
 8013888:	9b00      	ldr	r3, [sp, #0]
 801388a:	aa0c      	add	r2, sp, #48	; 0x30
 801388c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013890:	930b      	str	r3, [sp, #44]	; 0x2c
 8013892:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013894:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013898:	9c00      	ldr	r4, [sp, #0]
 801389a:	930a      	str	r3, [sp, #40]	; 0x28
 801389c:	00e3      	lsls	r3, r4, #3
 801389e:	9308      	str	r3, [sp, #32]
 80138a0:	ab98      	add	r3, sp, #608	; 0x260
 80138a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80138a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80138aa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80138ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80138b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80138b4:	46c3      	mov	fp, r8
 80138b6:	46a1      	mov	r9, r4
 80138b8:	f1b9 0f00 	cmp.w	r9, #0
 80138bc:	f1a5 0508 	sub.w	r5, r5, #8
 80138c0:	dc77      	bgt.n	80139b2 <__kernel_rem_pio2+0x202>
 80138c2:	ec47 6b10 	vmov	d0, r6, r7
 80138c6:	4650      	mov	r0, sl
 80138c8:	f000 fac2 	bl	8013e50 <scalbn>
 80138cc:	ec57 6b10 	vmov	r6, r7, d0
 80138d0:	2200      	movs	r2, #0
 80138d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80138d6:	ee10 0a10 	vmov	r0, s0
 80138da:	4639      	mov	r1, r7
 80138dc:	f7ec feac 	bl	8000638 <__aeabi_dmul>
 80138e0:	ec41 0b10 	vmov	d0, r0, r1
 80138e4:	f000 fb34 	bl	8013f50 <floor>
 80138e8:	4b7a      	ldr	r3, [pc, #488]	; (8013ad4 <__kernel_rem_pio2+0x324>)
 80138ea:	ec51 0b10 	vmov	r0, r1, d0
 80138ee:	2200      	movs	r2, #0
 80138f0:	f7ec fea2 	bl	8000638 <__aeabi_dmul>
 80138f4:	4602      	mov	r2, r0
 80138f6:	460b      	mov	r3, r1
 80138f8:	4630      	mov	r0, r6
 80138fa:	4639      	mov	r1, r7
 80138fc:	f7ec fce4 	bl	80002c8 <__aeabi_dsub>
 8013900:	460f      	mov	r7, r1
 8013902:	4606      	mov	r6, r0
 8013904:	f7ed f948 	bl	8000b98 <__aeabi_d2iz>
 8013908:	9002      	str	r0, [sp, #8]
 801390a:	f7ec fe2b 	bl	8000564 <__aeabi_i2d>
 801390e:	4602      	mov	r2, r0
 8013910:	460b      	mov	r3, r1
 8013912:	4630      	mov	r0, r6
 8013914:	4639      	mov	r1, r7
 8013916:	f7ec fcd7 	bl	80002c8 <__aeabi_dsub>
 801391a:	f1ba 0f00 	cmp.w	sl, #0
 801391e:	4606      	mov	r6, r0
 8013920:	460f      	mov	r7, r1
 8013922:	dd6d      	ble.n	8013a00 <__kernel_rem_pio2+0x250>
 8013924:	1e61      	subs	r1, r4, #1
 8013926:	ab0c      	add	r3, sp, #48	; 0x30
 8013928:	9d02      	ldr	r5, [sp, #8]
 801392a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801392e:	f1ca 0018 	rsb	r0, sl, #24
 8013932:	fa43 f200 	asr.w	r2, r3, r0
 8013936:	4415      	add	r5, r2
 8013938:	4082      	lsls	r2, r0
 801393a:	1a9b      	subs	r3, r3, r2
 801393c:	aa0c      	add	r2, sp, #48	; 0x30
 801393e:	9502      	str	r5, [sp, #8]
 8013940:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013944:	f1ca 0217 	rsb	r2, sl, #23
 8013948:	fa43 fb02 	asr.w	fp, r3, r2
 801394c:	f1bb 0f00 	cmp.w	fp, #0
 8013950:	dd65      	ble.n	8013a1e <__kernel_rem_pio2+0x26e>
 8013952:	9b02      	ldr	r3, [sp, #8]
 8013954:	2200      	movs	r2, #0
 8013956:	3301      	adds	r3, #1
 8013958:	9302      	str	r3, [sp, #8]
 801395a:	4615      	mov	r5, r2
 801395c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013960:	4294      	cmp	r4, r2
 8013962:	f300 809f 	bgt.w	8013aa4 <__kernel_rem_pio2+0x2f4>
 8013966:	f1ba 0f00 	cmp.w	sl, #0
 801396a:	dd07      	ble.n	801397c <__kernel_rem_pio2+0x1cc>
 801396c:	f1ba 0f01 	cmp.w	sl, #1
 8013970:	f000 80c1 	beq.w	8013af6 <__kernel_rem_pio2+0x346>
 8013974:	f1ba 0f02 	cmp.w	sl, #2
 8013978:	f000 80c7 	beq.w	8013b0a <__kernel_rem_pio2+0x35a>
 801397c:	f1bb 0f02 	cmp.w	fp, #2
 8013980:	d14d      	bne.n	8013a1e <__kernel_rem_pio2+0x26e>
 8013982:	4632      	mov	r2, r6
 8013984:	463b      	mov	r3, r7
 8013986:	4954      	ldr	r1, [pc, #336]	; (8013ad8 <__kernel_rem_pio2+0x328>)
 8013988:	2000      	movs	r0, #0
 801398a:	f7ec fc9d 	bl	80002c8 <__aeabi_dsub>
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	2d00      	cmp	r5, #0
 8013994:	d043      	beq.n	8013a1e <__kernel_rem_pio2+0x26e>
 8013996:	4650      	mov	r0, sl
 8013998:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8013ac8 <__kernel_rem_pio2+0x318>
 801399c:	f000 fa58 	bl	8013e50 <scalbn>
 80139a0:	4630      	mov	r0, r6
 80139a2:	4639      	mov	r1, r7
 80139a4:	ec53 2b10 	vmov	r2, r3, d0
 80139a8:	f7ec fc8e 	bl	80002c8 <__aeabi_dsub>
 80139ac:	4606      	mov	r6, r0
 80139ae:	460f      	mov	r7, r1
 80139b0:	e035      	b.n	8013a1e <__kernel_rem_pio2+0x26e>
 80139b2:	4b4a      	ldr	r3, [pc, #296]	; (8013adc <__kernel_rem_pio2+0x32c>)
 80139b4:	2200      	movs	r2, #0
 80139b6:	4630      	mov	r0, r6
 80139b8:	4639      	mov	r1, r7
 80139ba:	f7ec fe3d 	bl	8000638 <__aeabi_dmul>
 80139be:	f7ed f8eb 	bl	8000b98 <__aeabi_d2iz>
 80139c2:	f7ec fdcf 	bl	8000564 <__aeabi_i2d>
 80139c6:	4602      	mov	r2, r0
 80139c8:	460b      	mov	r3, r1
 80139ca:	ec43 2b18 	vmov	d8, r2, r3
 80139ce:	4b44      	ldr	r3, [pc, #272]	; (8013ae0 <__kernel_rem_pio2+0x330>)
 80139d0:	2200      	movs	r2, #0
 80139d2:	f7ec fe31 	bl	8000638 <__aeabi_dmul>
 80139d6:	4602      	mov	r2, r0
 80139d8:	460b      	mov	r3, r1
 80139da:	4630      	mov	r0, r6
 80139dc:	4639      	mov	r1, r7
 80139de:	f7ec fc73 	bl	80002c8 <__aeabi_dsub>
 80139e2:	f7ed f8d9 	bl	8000b98 <__aeabi_d2iz>
 80139e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80139ea:	f84b 0b04 	str.w	r0, [fp], #4
 80139ee:	ec51 0b18 	vmov	r0, r1, d8
 80139f2:	f7ec fc6b 	bl	80002cc <__adddf3>
 80139f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80139fa:	4606      	mov	r6, r0
 80139fc:	460f      	mov	r7, r1
 80139fe:	e75b      	b.n	80138b8 <__kernel_rem_pio2+0x108>
 8013a00:	d106      	bne.n	8013a10 <__kernel_rem_pio2+0x260>
 8013a02:	1e63      	subs	r3, r4, #1
 8013a04:	aa0c      	add	r2, sp, #48	; 0x30
 8013a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a0a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8013a0e:	e79d      	b.n	801394c <__kernel_rem_pio2+0x19c>
 8013a10:	4b34      	ldr	r3, [pc, #208]	; (8013ae4 <__kernel_rem_pio2+0x334>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	f7ed f896 	bl	8000b44 <__aeabi_dcmpge>
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	d140      	bne.n	8013a9e <__kernel_rem_pio2+0x2ee>
 8013a1c:	4683      	mov	fp, r0
 8013a1e:	2200      	movs	r2, #0
 8013a20:	2300      	movs	r3, #0
 8013a22:	4630      	mov	r0, r6
 8013a24:	4639      	mov	r1, r7
 8013a26:	f7ed f86f 	bl	8000b08 <__aeabi_dcmpeq>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	f000 80c1 	beq.w	8013bb2 <__kernel_rem_pio2+0x402>
 8013a30:	1e65      	subs	r5, r4, #1
 8013a32:	462b      	mov	r3, r5
 8013a34:	2200      	movs	r2, #0
 8013a36:	9900      	ldr	r1, [sp, #0]
 8013a38:	428b      	cmp	r3, r1
 8013a3a:	da6d      	bge.n	8013b18 <__kernel_rem_pio2+0x368>
 8013a3c:	2a00      	cmp	r2, #0
 8013a3e:	f000 808a 	beq.w	8013b56 <__kernel_rem_pio2+0x3a6>
 8013a42:	ab0c      	add	r3, sp, #48	; 0x30
 8013a44:	f1aa 0a18 	sub.w	sl, sl, #24
 8013a48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 80ae 	beq.w	8013bae <__kernel_rem_pio2+0x3fe>
 8013a52:	4650      	mov	r0, sl
 8013a54:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8013ac8 <__kernel_rem_pio2+0x318>
 8013a58:	f000 f9fa 	bl	8013e50 <scalbn>
 8013a5c:	1c6b      	adds	r3, r5, #1
 8013a5e:	00da      	lsls	r2, r3, #3
 8013a60:	9205      	str	r2, [sp, #20]
 8013a62:	ec57 6b10 	vmov	r6, r7, d0
 8013a66:	aa70      	add	r2, sp, #448	; 0x1c0
 8013a68:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8013adc <__kernel_rem_pio2+0x32c>
 8013a6c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8013a70:	462c      	mov	r4, r5
 8013a72:	f04f 0800 	mov.w	r8, #0
 8013a76:	2c00      	cmp	r4, #0
 8013a78:	f280 80d4 	bge.w	8013c24 <__kernel_rem_pio2+0x474>
 8013a7c:	462c      	mov	r4, r5
 8013a7e:	2c00      	cmp	r4, #0
 8013a80:	f2c0 8102 	blt.w	8013c88 <__kernel_rem_pio2+0x4d8>
 8013a84:	4b18      	ldr	r3, [pc, #96]	; (8013ae8 <__kernel_rem_pio2+0x338>)
 8013a86:	461e      	mov	r6, r3
 8013a88:	ab70      	add	r3, sp, #448	; 0x1c0
 8013a8a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013a8e:	1b2b      	subs	r3, r5, r4
 8013a90:	f04f 0900 	mov.w	r9, #0
 8013a94:	f04f 0a00 	mov.w	sl, #0
 8013a98:	2700      	movs	r7, #0
 8013a9a:	9306      	str	r3, [sp, #24]
 8013a9c:	e0e6      	b.n	8013c6c <__kernel_rem_pio2+0x4bc>
 8013a9e:	f04f 0b02 	mov.w	fp, #2
 8013aa2:	e756      	b.n	8013952 <__kernel_rem_pio2+0x1a2>
 8013aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8013aa8:	bb05      	cbnz	r5, 8013aec <__kernel_rem_pio2+0x33c>
 8013aaa:	b123      	cbz	r3, 8013ab6 <__kernel_rem_pio2+0x306>
 8013aac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013ab0:	f8c8 3000 	str.w	r3, [r8]
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	3201      	adds	r2, #1
 8013ab8:	f108 0804 	add.w	r8, r8, #4
 8013abc:	461d      	mov	r5, r3
 8013abe:	e74f      	b.n	8013960 <__kernel_rem_pio2+0x1b0>
	...
 8013acc:	3ff00000 	.word	0x3ff00000
 8013ad0:	08014b58 	.word	0x08014b58
 8013ad4:	40200000 	.word	0x40200000
 8013ad8:	3ff00000 	.word	0x3ff00000
 8013adc:	3e700000 	.word	0x3e700000
 8013ae0:	41700000 	.word	0x41700000
 8013ae4:	3fe00000 	.word	0x3fe00000
 8013ae8:	08014b18 	.word	0x08014b18
 8013aec:	1acb      	subs	r3, r1, r3
 8013aee:	f8c8 3000 	str.w	r3, [r8]
 8013af2:	462b      	mov	r3, r5
 8013af4:	e7df      	b.n	8013ab6 <__kernel_rem_pio2+0x306>
 8013af6:	1e62      	subs	r2, r4, #1
 8013af8:	ab0c      	add	r3, sp, #48	; 0x30
 8013afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013b02:	a90c      	add	r1, sp, #48	; 0x30
 8013b04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013b08:	e738      	b.n	801397c <__kernel_rem_pio2+0x1cc>
 8013b0a:	1e62      	subs	r2, r4, #1
 8013b0c:	ab0c      	add	r3, sp, #48	; 0x30
 8013b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013b16:	e7f4      	b.n	8013b02 <__kernel_rem_pio2+0x352>
 8013b18:	a90c      	add	r1, sp, #48	; 0x30
 8013b1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	430a      	orrs	r2, r1
 8013b22:	e788      	b.n	8013a36 <__kernel_rem_pio2+0x286>
 8013b24:	3301      	adds	r3, #1
 8013b26:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013b2a:	2900      	cmp	r1, #0
 8013b2c:	d0fa      	beq.n	8013b24 <__kernel_rem_pio2+0x374>
 8013b2e:	9a08      	ldr	r2, [sp, #32]
 8013b30:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8013b34:	446a      	add	r2, sp
 8013b36:	3a98      	subs	r2, #152	; 0x98
 8013b38:	9208      	str	r2, [sp, #32]
 8013b3a:	9a06      	ldr	r2, [sp, #24]
 8013b3c:	a920      	add	r1, sp, #128	; 0x80
 8013b3e:	18a2      	adds	r2, r4, r2
 8013b40:	18e3      	adds	r3, r4, r3
 8013b42:	f104 0801 	add.w	r8, r4, #1
 8013b46:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013b4a:	9302      	str	r3, [sp, #8]
 8013b4c:	9b02      	ldr	r3, [sp, #8]
 8013b4e:	4543      	cmp	r3, r8
 8013b50:	da04      	bge.n	8013b5c <__kernel_rem_pio2+0x3ac>
 8013b52:	461c      	mov	r4, r3
 8013b54:	e6a2      	b.n	801389c <__kernel_rem_pio2+0xec>
 8013b56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e7e4      	b.n	8013b26 <__kernel_rem_pio2+0x376>
 8013b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b5e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013b62:	f7ec fcff 	bl	8000564 <__aeabi_i2d>
 8013b66:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b6c:	46ab      	mov	fp, r5
 8013b6e:	461c      	mov	r4, r3
 8013b70:	f04f 0900 	mov.w	r9, #0
 8013b74:	2600      	movs	r6, #0
 8013b76:	2700      	movs	r7, #0
 8013b78:	9b05      	ldr	r3, [sp, #20]
 8013b7a:	4599      	cmp	r9, r3
 8013b7c:	dd06      	ble.n	8013b8c <__kernel_rem_pio2+0x3dc>
 8013b7e:	9b08      	ldr	r3, [sp, #32]
 8013b80:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013b84:	f108 0801 	add.w	r8, r8, #1
 8013b88:	9308      	str	r3, [sp, #32]
 8013b8a:	e7df      	b.n	8013b4c <__kernel_rem_pio2+0x39c>
 8013b8c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013b90:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013b94:	f7ec fd50 	bl	8000638 <__aeabi_dmul>
 8013b98:	4602      	mov	r2, r0
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	4639      	mov	r1, r7
 8013ba0:	f7ec fb94 	bl	80002cc <__adddf3>
 8013ba4:	f109 0901 	add.w	r9, r9, #1
 8013ba8:	4606      	mov	r6, r0
 8013baa:	460f      	mov	r7, r1
 8013bac:	e7e4      	b.n	8013b78 <__kernel_rem_pio2+0x3c8>
 8013bae:	3d01      	subs	r5, #1
 8013bb0:	e747      	b.n	8013a42 <__kernel_rem_pio2+0x292>
 8013bb2:	ec47 6b10 	vmov	d0, r6, r7
 8013bb6:	f1ca 0000 	rsb	r0, sl, #0
 8013bba:	f000 f949 	bl	8013e50 <scalbn>
 8013bbe:	ec57 6b10 	vmov	r6, r7, d0
 8013bc2:	4ba0      	ldr	r3, [pc, #640]	; (8013e44 <__kernel_rem_pio2+0x694>)
 8013bc4:	ee10 0a10 	vmov	r0, s0
 8013bc8:	2200      	movs	r2, #0
 8013bca:	4639      	mov	r1, r7
 8013bcc:	f7ec ffba 	bl	8000b44 <__aeabi_dcmpge>
 8013bd0:	b1f8      	cbz	r0, 8013c12 <__kernel_rem_pio2+0x462>
 8013bd2:	4b9d      	ldr	r3, [pc, #628]	; (8013e48 <__kernel_rem_pio2+0x698>)
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	4639      	mov	r1, r7
 8013bda:	f7ec fd2d 	bl	8000638 <__aeabi_dmul>
 8013bde:	f7ec ffdb 	bl	8000b98 <__aeabi_d2iz>
 8013be2:	4680      	mov	r8, r0
 8013be4:	f7ec fcbe 	bl	8000564 <__aeabi_i2d>
 8013be8:	4b96      	ldr	r3, [pc, #600]	; (8013e44 <__kernel_rem_pio2+0x694>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	f7ec fd24 	bl	8000638 <__aeabi_dmul>
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	f7ec fb66 	bl	80002c8 <__aeabi_dsub>
 8013bfc:	f7ec ffcc 	bl	8000b98 <__aeabi_d2iz>
 8013c00:	1c65      	adds	r5, r4, #1
 8013c02:	ab0c      	add	r3, sp, #48	; 0x30
 8013c04:	f10a 0a18 	add.w	sl, sl, #24
 8013c08:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013c0c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013c10:	e71f      	b.n	8013a52 <__kernel_rem_pio2+0x2a2>
 8013c12:	4630      	mov	r0, r6
 8013c14:	4639      	mov	r1, r7
 8013c16:	f7ec ffbf 	bl	8000b98 <__aeabi_d2iz>
 8013c1a:	ab0c      	add	r3, sp, #48	; 0x30
 8013c1c:	4625      	mov	r5, r4
 8013c1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013c22:	e716      	b.n	8013a52 <__kernel_rem_pio2+0x2a2>
 8013c24:	ab0c      	add	r3, sp, #48	; 0x30
 8013c26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c2a:	f7ec fc9b 	bl	8000564 <__aeabi_i2d>
 8013c2e:	4632      	mov	r2, r6
 8013c30:	463b      	mov	r3, r7
 8013c32:	f7ec fd01 	bl	8000638 <__aeabi_dmul>
 8013c36:	4642      	mov	r2, r8
 8013c38:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013c3c:	464b      	mov	r3, r9
 8013c3e:	4630      	mov	r0, r6
 8013c40:	4639      	mov	r1, r7
 8013c42:	f7ec fcf9 	bl	8000638 <__aeabi_dmul>
 8013c46:	3c01      	subs	r4, #1
 8013c48:	4606      	mov	r6, r0
 8013c4a:	460f      	mov	r7, r1
 8013c4c:	e713      	b.n	8013a76 <__kernel_rem_pio2+0x2c6>
 8013c4e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8013c52:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8013c56:	f7ec fcef 	bl	8000638 <__aeabi_dmul>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	4648      	mov	r0, r9
 8013c60:	4651      	mov	r1, sl
 8013c62:	f7ec fb33 	bl	80002cc <__adddf3>
 8013c66:	3701      	adds	r7, #1
 8013c68:	4681      	mov	r9, r0
 8013c6a:	468a      	mov	sl, r1
 8013c6c:	9b00      	ldr	r3, [sp, #0]
 8013c6e:	429f      	cmp	r7, r3
 8013c70:	dc02      	bgt.n	8013c78 <__kernel_rem_pio2+0x4c8>
 8013c72:	9b06      	ldr	r3, [sp, #24]
 8013c74:	429f      	cmp	r7, r3
 8013c76:	ddea      	ble.n	8013c4e <__kernel_rem_pio2+0x49e>
 8013c78:	9a06      	ldr	r2, [sp, #24]
 8013c7a:	ab48      	add	r3, sp, #288	; 0x120
 8013c7c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013c80:	e9c6 9a00 	strd	r9, sl, [r6]
 8013c84:	3c01      	subs	r4, #1
 8013c86:	e6fa      	b.n	8013a7e <__kernel_rem_pio2+0x2ce>
 8013c88:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	dc0b      	bgt.n	8013ca6 <__kernel_rem_pio2+0x4f6>
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	dc39      	bgt.n	8013d06 <__kernel_rem_pio2+0x556>
 8013c92:	d05d      	beq.n	8013d50 <__kernel_rem_pio2+0x5a0>
 8013c94:	9b02      	ldr	r3, [sp, #8]
 8013c96:	f003 0007 	and.w	r0, r3, #7
 8013c9a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013c9e:	ecbd 8b02 	vpop	{d8}
 8013ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013ca8:	2b03      	cmp	r3, #3
 8013caa:	d1f3      	bne.n	8013c94 <__kernel_rem_pio2+0x4e4>
 8013cac:	9b05      	ldr	r3, [sp, #20]
 8013cae:	9500      	str	r5, [sp, #0]
 8013cb0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8013cb4:	eb0d 0403 	add.w	r4, sp, r3
 8013cb8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013cbc:	46a2      	mov	sl, r4
 8013cbe:	9b00      	ldr	r3, [sp, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f1aa 0a08 	sub.w	sl, sl, #8
 8013cc6:	dc69      	bgt.n	8013d9c <__kernel_rem_pio2+0x5ec>
 8013cc8:	46aa      	mov	sl, r5
 8013cca:	f1ba 0f01 	cmp.w	sl, #1
 8013cce:	f1a4 0408 	sub.w	r4, r4, #8
 8013cd2:	f300 8083 	bgt.w	8013ddc <__kernel_rem_pio2+0x62c>
 8013cd6:	9c05      	ldr	r4, [sp, #20]
 8013cd8:	ab48      	add	r3, sp, #288	; 0x120
 8013cda:	441c      	add	r4, r3
 8013cdc:	2000      	movs	r0, #0
 8013cde:	2100      	movs	r1, #0
 8013ce0:	2d01      	cmp	r5, #1
 8013ce2:	f300 809a 	bgt.w	8013e1a <__kernel_rem_pio2+0x66a>
 8013ce6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013cea:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013cee:	f1bb 0f00 	cmp.w	fp, #0
 8013cf2:	f040 8098 	bne.w	8013e26 <__kernel_rem_pio2+0x676>
 8013cf6:	9b04      	ldr	r3, [sp, #16]
 8013cf8:	e9c3 7800 	strd	r7, r8, [r3]
 8013cfc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013d00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013d04:	e7c6      	b.n	8013c94 <__kernel_rem_pio2+0x4e4>
 8013d06:	9e05      	ldr	r6, [sp, #20]
 8013d08:	ab48      	add	r3, sp, #288	; 0x120
 8013d0a:	441e      	add	r6, r3
 8013d0c:	462c      	mov	r4, r5
 8013d0e:	2000      	movs	r0, #0
 8013d10:	2100      	movs	r1, #0
 8013d12:	2c00      	cmp	r4, #0
 8013d14:	da33      	bge.n	8013d7e <__kernel_rem_pio2+0x5ce>
 8013d16:	f1bb 0f00 	cmp.w	fp, #0
 8013d1a:	d036      	beq.n	8013d8a <__kernel_rem_pio2+0x5da>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d22:	9c04      	ldr	r4, [sp, #16]
 8013d24:	e9c4 2300 	strd	r2, r3, [r4]
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013d30:	f7ec faca 	bl	80002c8 <__aeabi_dsub>
 8013d34:	ae4a      	add	r6, sp, #296	; 0x128
 8013d36:	2401      	movs	r4, #1
 8013d38:	42a5      	cmp	r5, r4
 8013d3a:	da29      	bge.n	8013d90 <__kernel_rem_pio2+0x5e0>
 8013d3c:	f1bb 0f00 	cmp.w	fp, #0
 8013d40:	d002      	beq.n	8013d48 <__kernel_rem_pio2+0x598>
 8013d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d46:	4619      	mov	r1, r3
 8013d48:	9b04      	ldr	r3, [sp, #16]
 8013d4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013d4e:	e7a1      	b.n	8013c94 <__kernel_rem_pio2+0x4e4>
 8013d50:	9c05      	ldr	r4, [sp, #20]
 8013d52:	ab48      	add	r3, sp, #288	; 0x120
 8013d54:	441c      	add	r4, r3
 8013d56:	2000      	movs	r0, #0
 8013d58:	2100      	movs	r1, #0
 8013d5a:	2d00      	cmp	r5, #0
 8013d5c:	da09      	bge.n	8013d72 <__kernel_rem_pio2+0x5c2>
 8013d5e:	f1bb 0f00 	cmp.w	fp, #0
 8013d62:	d002      	beq.n	8013d6a <__kernel_rem_pio2+0x5ba>
 8013d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d68:	4619      	mov	r1, r3
 8013d6a:	9b04      	ldr	r3, [sp, #16]
 8013d6c:	e9c3 0100 	strd	r0, r1, [r3]
 8013d70:	e790      	b.n	8013c94 <__kernel_rem_pio2+0x4e4>
 8013d72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d76:	f7ec faa9 	bl	80002cc <__adddf3>
 8013d7a:	3d01      	subs	r5, #1
 8013d7c:	e7ed      	b.n	8013d5a <__kernel_rem_pio2+0x5aa>
 8013d7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013d82:	f7ec faa3 	bl	80002cc <__adddf3>
 8013d86:	3c01      	subs	r4, #1
 8013d88:	e7c3      	b.n	8013d12 <__kernel_rem_pio2+0x562>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	e7c8      	b.n	8013d22 <__kernel_rem_pio2+0x572>
 8013d90:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013d94:	f7ec fa9a 	bl	80002cc <__adddf3>
 8013d98:	3401      	adds	r4, #1
 8013d9a:	e7cd      	b.n	8013d38 <__kernel_rem_pio2+0x588>
 8013d9c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013da0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013da4:	9b00      	ldr	r3, [sp, #0]
 8013da6:	3b01      	subs	r3, #1
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	4632      	mov	r2, r6
 8013dac:	463b      	mov	r3, r7
 8013dae:	4640      	mov	r0, r8
 8013db0:	4649      	mov	r1, r9
 8013db2:	f7ec fa8b 	bl	80002cc <__adddf3>
 8013db6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	4640      	mov	r0, r8
 8013dc0:	4649      	mov	r1, r9
 8013dc2:	f7ec fa81 	bl	80002c8 <__aeabi_dsub>
 8013dc6:	4632      	mov	r2, r6
 8013dc8:	463b      	mov	r3, r7
 8013dca:	f7ec fa7f 	bl	80002cc <__adddf3>
 8013dce:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013dd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013dd6:	ed8a 7b00 	vstr	d7, [sl]
 8013dda:	e770      	b.n	8013cbe <__kernel_rem_pio2+0x50e>
 8013ddc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013de0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013de4:	4640      	mov	r0, r8
 8013de6:	4632      	mov	r2, r6
 8013de8:	463b      	mov	r3, r7
 8013dea:	4649      	mov	r1, r9
 8013dec:	f7ec fa6e 	bl	80002cc <__adddf3>
 8013df0:	e9cd 0100 	strd	r0, r1, [sp]
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	4640      	mov	r0, r8
 8013dfa:	4649      	mov	r1, r9
 8013dfc:	f7ec fa64 	bl	80002c8 <__aeabi_dsub>
 8013e00:	4632      	mov	r2, r6
 8013e02:	463b      	mov	r3, r7
 8013e04:	f7ec fa62 	bl	80002cc <__adddf3>
 8013e08:	ed9d 7b00 	vldr	d7, [sp]
 8013e0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013e10:	ed84 7b00 	vstr	d7, [r4]
 8013e14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e18:	e757      	b.n	8013cca <__kernel_rem_pio2+0x51a>
 8013e1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e1e:	f7ec fa55 	bl	80002cc <__adddf3>
 8013e22:	3d01      	subs	r5, #1
 8013e24:	e75c      	b.n	8013ce0 <__kernel_rem_pio2+0x530>
 8013e26:	9b04      	ldr	r3, [sp, #16]
 8013e28:	9a04      	ldr	r2, [sp, #16]
 8013e2a:	601f      	str	r7, [r3, #0]
 8013e2c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013e30:	605c      	str	r4, [r3, #4]
 8013e32:	609d      	str	r5, [r3, #8]
 8013e34:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013e38:	60d3      	str	r3, [r2, #12]
 8013e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e3e:	6110      	str	r0, [r2, #16]
 8013e40:	6153      	str	r3, [r2, #20]
 8013e42:	e727      	b.n	8013c94 <__kernel_rem_pio2+0x4e4>
 8013e44:	41700000 	.word	0x41700000
 8013e48:	3e700000 	.word	0x3e700000
 8013e4c:	00000000 	.word	0x00000000

08013e50 <scalbn>:
 8013e50:	b570      	push	{r4, r5, r6, lr}
 8013e52:	ec55 4b10 	vmov	r4, r5, d0
 8013e56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	462b      	mov	r3, r5
 8013e5e:	b999      	cbnz	r1, 8013e88 <scalbn+0x38>
 8013e60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013e64:	4323      	orrs	r3, r4
 8013e66:	d03f      	beq.n	8013ee8 <scalbn+0x98>
 8013e68:	4b35      	ldr	r3, [pc, #212]	; (8013f40 <scalbn+0xf0>)
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	ee10 0a10 	vmov	r0, s0
 8013e70:	2200      	movs	r2, #0
 8013e72:	f7ec fbe1 	bl	8000638 <__aeabi_dmul>
 8013e76:	4b33      	ldr	r3, [pc, #204]	; (8013f44 <scalbn+0xf4>)
 8013e78:	429e      	cmp	r6, r3
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	460d      	mov	r5, r1
 8013e7e:	da10      	bge.n	8013ea2 <scalbn+0x52>
 8013e80:	a327      	add	r3, pc, #156	; (adr r3, 8013f20 <scalbn+0xd0>)
 8013e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e86:	e01f      	b.n	8013ec8 <scalbn+0x78>
 8013e88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013e8c:	4291      	cmp	r1, r2
 8013e8e:	d10c      	bne.n	8013eaa <scalbn+0x5a>
 8013e90:	ee10 2a10 	vmov	r2, s0
 8013e94:	4620      	mov	r0, r4
 8013e96:	4629      	mov	r1, r5
 8013e98:	f7ec fa18 	bl	80002cc <__adddf3>
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	460d      	mov	r5, r1
 8013ea0:	e022      	b.n	8013ee8 <scalbn+0x98>
 8013ea2:	460b      	mov	r3, r1
 8013ea4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013ea8:	3936      	subs	r1, #54	; 0x36
 8013eaa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013eae:	4296      	cmp	r6, r2
 8013eb0:	dd0d      	ble.n	8013ece <scalbn+0x7e>
 8013eb2:	2d00      	cmp	r5, #0
 8013eb4:	a11c      	add	r1, pc, #112	; (adr r1, 8013f28 <scalbn+0xd8>)
 8013eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013eba:	da02      	bge.n	8013ec2 <scalbn+0x72>
 8013ebc:	a11c      	add	r1, pc, #112	; (adr r1, 8013f30 <scalbn+0xe0>)
 8013ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ec2:	a319      	add	r3, pc, #100	; (adr r3, 8013f28 <scalbn+0xd8>)
 8013ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec8:	f7ec fbb6 	bl	8000638 <__aeabi_dmul>
 8013ecc:	e7e6      	b.n	8013e9c <scalbn+0x4c>
 8013ece:	1872      	adds	r2, r6, r1
 8013ed0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013ed4:	428a      	cmp	r2, r1
 8013ed6:	dcec      	bgt.n	8013eb2 <scalbn+0x62>
 8013ed8:	2a00      	cmp	r2, #0
 8013eda:	dd08      	ble.n	8013eee <scalbn+0x9e>
 8013edc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013ee8:	ec45 4b10 	vmov	d0, r4, r5
 8013eec:	bd70      	pop	{r4, r5, r6, pc}
 8013eee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013ef2:	da08      	bge.n	8013f06 <scalbn+0xb6>
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	a10a      	add	r1, pc, #40	; (adr r1, 8013f20 <scalbn+0xd0>)
 8013ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013efc:	dac0      	bge.n	8013e80 <scalbn+0x30>
 8013efe:	a10e      	add	r1, pc, #56	; (adr r1, 8013f38 <scalbn+0xe8>)
 8013f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f04:	e7bc      	b.n	8013e80 <scalbn+0x30>
 8013f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f0a:	3236      	adds	r2, #54	; 0x36
 8013f0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013f10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013f14:	4620      	mov	r0, r4
 8013f16:	4b0c      	ldr	r3, [pc, #48]	; (8013f48 <scalbn+0xf8>)
 8013f18:	2200      	movs	r2, #0
 8013f1a:	e7d5      	b.n	8013ec8 <scalbn+0x78>
 8013f1c:	f3af 8000 	nop.w
 8013f20:	c2f8f359 	.word	0xc2f8f359
 8013f24:	01a56e1f 	.word	0x01a56e1f
 8013f28:	8800759c 	.word	0x8800759c
 8013f2c:	7e37e43c 	.word	0x7e37e43c
 8013f30:	8800759c 	.word	0x8800759c
 8013f34:	fe37e43c 	.word	0xfe37e43c
 8013f38:	c2f8f359 	.word	0xc2f8f359
 8013f3c:	81a56e1f 	.word	0x81a56e1f
 8013f40:	43500000 	.word	0x43500000
 8013f44:	ffff3cb0 	.word	0xffff3cb0
 8013f48:	3c900000 	.word	0x3c900000
 8013f4c:	00000000 	.word	0x00000000

08013f50 <floor>:
 8013f50:	ec51 0b10 	vmov	r0, r1, d0
 8013f54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013f60:	2e13      	cmp	r6, #19
 8013f62:	ee10 5a10 	vmov	r5, s0
 8013f66:	ee10 8a10 	vmov	r8, s0
 8013f6a:	460c      	mov	r4, r1
 8013f6c:	dc31      	bgt.n	8013fd2 <floor+0x82>
 8013f6e:	2e00      	cmp	r6, #0
 8013f70:	da14      	bge.n	8013f9c <floor+0x4c>
 8013f72:	a333      	add	r3, pc, #204	; (adr r3, 8014040 <floor+0xf0>)
 8013f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f78:	f7ec f9a8 	bl	80002cc <__adddf3>
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f7ec fdea 	bl	8000b58 <__aeabi_dcmpgt>
 8013f84:	b138      	cbz	r0, 8013f96 <floor+0x46>
 8013f86:	2c00      	cmp	r4, #0
 8013f88:	da53      	bge.n	8014032 <floor+0xe2>
 8013f8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013f8e:	4325      	orrs	r5, r4
 8013f90:	d052      	beq.n	8014038 <floor+0xe8>
 8013f92:	4c2d      	ldr	r4, [pc, #180]	; (8014048 <floor+0xf8>)
 8013f94:	2500      	movs	r5, #0
 8013f96:	4621      	mov	r1, r4
 8013f98:	4628      	mov	r0, r5
 8013f9a:	e024      	b.n	8013fe6 <floor+0x96>
 8013f9c:	4f2b      	ldr	r7, [pc, #172]	; (801404c <floor+0xfc>)
 8013f9e:	4137      	asrs	r7, r6
 8013fa0:	ea01 0307 	and.w	r3, r1, r7
 8013fa4:	4303      	orrs	r3, r0
 8013fa6:	d01e      	beq.n	8013fe6 <floor+0x96>
 8013fa8:	a325      	add	r3, pc, #148	; (adr r3, 8014040 <floor+0xf0>)
 8013faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fae:	f7ec f98d 	bl	80002cc <__adddf3>
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	f7ec fdcf 	bl	8000b58 <__aeabi_dcmpgt>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d0eb      	beq.n	8013f96 <floor+0x46>
 8013fbe:	2c00      	cmp	r4, #0
 8013fc0:	bfbe      	ittt	lt
 8013fc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013fc6:	4133      	asrlt	r3, r6
 8013fc8:	18e4      	addlt	r4, r4, r3
 8013fca:	ea24 0407 	bic.w	r4, r4, r7
 8013fce:	2500      	movs	r5, #0
 8013fd0:	e7e1      	b.n	8013f96 <floor+0x46>
 8013fd2:	2e33      	cmp	r6, #51	; 0x33
 8013fd4:	dd0b      	ble.n	8013fee <floor+0x9e>
 8013fd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013fda:	d104      	bne.n	8013fe6 <floor+0x96>
 8013fdc:	ee10 2a10 	vmov	r2, s0
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	f7ec f973 	bl	80002cc <__adddf3>
 8013fe6:	ec41 0b10 	vmov	d0, r0, r1
 8013fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8013ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8013ff6:	40df      	lsrs	r7, r3
 8013ff8:	4238      	tst	r0, r7
 8013ffa:	d0f4      	beq.n	8013fe6 <floor+0x96>
 8013ffc:	a310      	add	r3, pc, #64	; (adr r3, 8014040 <floor+0xf0>)
 8013ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014002:	f7ec f963 	bl	80002cc <__adddf3>
 8014006:	2200      	movs	r2, #0
 8014008:	2300      	movs	r3, #0
 801400a:	f7ec fda5 	bl	8000b58 <__aeabi_dcmpgt>
 801400e:	2800      	cmp	r0, #0
 8014010:	d0c1      	beq.n	8013f96 <floor+0x46>
 8014012:	2c00      	cmp	r4, #0
 8014014:	da0a      	bge.n	801402c <floor+0xdc>
 8014016:	2e14      	cmp	r6, #20
 8014018:	d101      	bne.n	801401e <floor+0xce>
 801401a:	3401      	adds	r4, #1
 801401c:	e006      	b.n	801402c <floor+0xdc>
 801401e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014022:	2301      	movs	r3, #1
 8014024:	40b3      	lsls	r3, r6
 8014026:	441d      	add	r5, r3
 8014028:	45a8      	cmp	r8, r5
 801402a:	d8f6      	bhi.n	801401a <floor+0xca>
 801402c:	ea25 0507 	bic.w	r5, r5, r7
 8014030:	e7b1      	b.n	8013f96 <floor+0x46>
 8014032:	2500      	movs	r5, #0
 8014034:	462c      	mov	r4, r5
 8014036:	e7ae      	b.n	8013f96 <floor+0x46>
 8014038:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801403c:	e7ab      	b.n	8013f96 <floor+0x46>
 801403e:	bf00      	nop
 8014040:	8800759c 	.word	0x8800759c
 8014044:	7e37e43c 	.word	0x7e37e43c
 8014048:	bff00000 	.word	0xbff00000
 801404c:	000fffff 	.word	0x000fffff

08014050 <_init>:
 8014050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014052:	bf00      	nop
 8014054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014056:	bc08      	pop	{r3}
 8014058:	469e      	mov	lr, r3
 801405a:	4770      	bx	lr

0801405c <_fini>:
 801405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801405e:	bf00      	nop
 8014060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014062:	bc08      	pop	{r3}
 8014064:	469e      	mov	lr, r3
 8014066:	4770      	bx	lr
